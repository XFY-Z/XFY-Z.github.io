<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>监听器案例</title>
      <link href="/2022/12/11/%E7%9B%91%E5%90%AC%E5%99%A8%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B-%E8%AF%B7%E6%B1%82%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2022/12/11/%E7%9B%91%E5%90%AC%E5%99%A8%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B-%E8%AF%B7%E6%B1%82%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>某一个域名所对应的网站在某个时间段，浏览的变化情况：针对波峰和波谷的变化，就可以针对性地对网站进行优化和调整</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total1.png" alt="total1"></p><p>此案例包括两个部分：利用监听器实现对网站访问的量的获取，图表信息的展示</p><h2 id="一-具体实现：后台数据准备"><a href="#一-具体实现：后台数据准备" class="headerlink" title="一.具体实现：后台数据准备"></a>一.具体实现：后台数据准备</h2><h3 id="1-第一部分：编写监听器"><a href="#1-第一部分：编写监听器" class="headerlink" title="1.第一部分：编写监听器"></a>1.第一部分：编写监听器</h3><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total2.png" alt="total2"></p><p>RequestTotalListener：监听器</p><ol><li>下面这个监听器的编写方式，最重要的启发是：一个问题，梳理清业务后，做好逻辑规划，然后按条例分别编写程序就ok了</li><li>这个监听器内容其实很简单，大略看看就ok了</li><li>全局对象ServletContext创建的时候，就在全局对象中初始化两个集合对象timeList和valueList；每当请求对象ServletRequest被创建的时候，就在timeList和valueList中做出对应的操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTotalListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>, ServletContextListener &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent ser)</span> &#123;</span><br><span class="line">        <span class="comment">//应用程序启动的时候，初始化需要存储的数据</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">timeList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//存储时间的集合对象</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">valueList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//具体时间的访问量数据的集合对象、</span></span><br><span class="line">        <span class="comment">//获取ServletContext对象，并将存储时间和访问量的值存储到这个对象中</span></span><br><span class="line">        <span class="comment">//即每次启动应用，在ServletContext全局对象中初始化这两个可以存储时间和访问量的属性</span></span><br><span class="line">        ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">        ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent ser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent ser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent ser)</span> &#123;</span><br><span class="line">        <span class="comment">//TimeList： 10：01   10：02   10：05   先确定时间是否存在</span></span><br><span class="line">        <span class="comment">//ValueList：   3        6       10      这两个List中的值通过索引值精准对应；</span></span><br><span class="line">        List&lt;String&gt; timeList =(List) ser.getServletContext().getAttribute(<span class="string">&quot;timeList&quot;</span>);<span class="comment">//获取到ServletContextInit初始化后创建的集合的value值</span></span><br><span class="line">        List&lt;Integer&gt; valueList =(List) ser.getServletContext().getAttribute(<span class="string">&quot;valueList&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//时间对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm&quot;</span>);<span class="comment">//规定时间的格式为小时:分钟</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> sdf.format(date);<span class="comment">//获取规定格式好的当前时间</span></span><br><span class="line">        <span class="comment">//indexOf()方法，查找对应的数据在集合中是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (timeList.indexOf(time) == -<span class="number">1</span>)&#123;<span class="comment">//表示当前时间在集合中不存在</span></span><br><span class="line">            timeList.add(time);<span class="comment">//如果当前时间不存在，就把当前时间添加到timeList中去</span></span><br><span class="line">            valueList.add(<span class="number">1</span>);<span class="comment">//给value值添加默认的值1</span></span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取当前时间在timeList中的索引，在valueList相同索引处的值+1</span></span><br><span class="line">            <span class="comment">//timeList和valueList，通过索引值的顺序一一对应</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> timeList.indexOf(time);</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> valueList.get(index);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>RequestTotalListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-第二部分：添加HTML页面"><a href="#2-第二部分：添加HTML页面" class="headerlink" title="2.第二部分：添加HTML页面"></a>2.第二部分：添加HTML页面</h3><p>为了模拟这个应用，添加几个HTML页面以供访问</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total3.png" alt="total3"></p><h3 id="3-第三部分：编写Servlet：RequestTotalServlet"><a href="#3-第三部分：编写Servlet：RequestTotalServlet" class="headerlink" title="3.第三部分：编写Servlet：RequestTotalServlet"></a>3.第三部分：编写Servlet：RequestTotalServlet</h3><p>这个Servlet的作用是，获取全局对象ServletContext中的timeList和valueList；并将其添加到响应中去；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;RequestTotalServlet&quot;, value = &quot;/request&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTotalServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;String&gt; timeList = (List)request.getServletContext().getAttribute(<span class="string">&quot;timeList&quot;</span>);<span class="comment">//增加一个集合对象获取到ServletContext中的属性</span></span><br><span class="line">        List&lt;String&gt; valueList = (List)request.getServletContext().getAttribute(<span class="string">&quot;valueList&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(timeList.toString());</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        response.getWriter().println(valueList.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-第四部分：效果展示"><a href="#4-第四部分：效果展示" class="headerlink" title="4.第四部分：效果展示"></a>4.第四部分：效果展示</h3><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/totaal4.png" alt="totaal4"></p><p>至此，后台数据部分已经准备完成，启动应用，在浏览器对几个html访问几次（其实访问RequesTotalServlet也是可以，都会有ServletRequest对象创建）</p><h2 id="二-如何让数据在前台展示更美观"><a href="#二-如何让数据在前台展示更美观" class="headerlink" title="二.如何让数据在前台展示更美观"></a>二.如何让数据在前台展示更美观</h2><p>百度的Echarts图表：</p><h3 id="1-Echarts简单使用范例"><a href="#1-Echarts简单使用范例" class="headerlink" title="1.Echarts简单使用范例"></a>1.Echarts简单使用范例</h3><p>直接百度echarts：这是百度自己研发的一款图表组件，这个组件目前可以说是最强大的一款图表JS框架，echarts已经被Apache收购了</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total5.png" alt="total5"></p><p>进入文档部分，并点击使用教程部分</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total6.png" alt="total6"></p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total7.png" alt="total7"></p><p>其次，将下载的文件导入到项目中</p><p>解压后，找到：echarts.min.js这个js文件（在dist目录下）</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total8.png" alt="total8"></p><p>将Echarts组件的JS文件，添加到项目中：需要将这个文件放到Web目录下；一般会在Web目录下新建一个文件夹欸，专门存放外部引入的JS文件</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total9.png" alt="total9"></p><p>编写范例</p><p>根据官网的教程：total.html内容如下</p><ol><li>第一步：引入Echarts：<script type="text/javascript" src="JS/echarts.min.js"></script>&gt;</li><li>第二步：为了Echarts准备一个具有高宽的DOM容器，<div id="main" style="width:600px;height:400px;"></div></li><li>第三步：设置图表：先定义图片表，然后再option中设置图表中的各种属性，最后将设置项激活</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>total<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取div对象，利用echarts.init()对获取的div进行初始化；于是就得到一个myChart图表对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指定图表的配置和数据</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">yAxis</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line"><span class="language-javascript">        myChart.<span class="title function_">setOption</span>(option);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后观察效果</p><p>启动应用：访问total.html</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total10.png" alt="total10"></p><h3 id="2-Echarats补充"><a href="#2-Echarats补充" class="headerlink" title="2.Echarats补充"></a>2.Echarats补充</h3><p>其实，Echarts功能十分强大，有需要的时候，可以多参考官网和案例</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total11.png" alt="total11"></p><h2 id="三：具体实现：前台数据展示"><a href="#三：具体实现：前台数据展示" class="headerlink" title="三：具体实现：前台数据展示"></a>三：具体实现：前台数据展示</h2><h3 id="0-基本实现：利用百度Echarts组件展示后台数据"><a href="#0-基本实现：利用百度Echarts组件展示后台数据" class="headerlink" title="0.基本实现：利用百度Echarts组件展示后台数据"></a>0.基本实现：利用百度Echarts组件展示后台数据</h3><p>目前的问题是，前端工程师已经把前台的界面做好了，我们也已经将前端开发的界面加到工程总，如何把后台的数据怼上去呢</p><p>这其中的关键是前后端的通信</p><p>常见的通信方式是Jquery和Ajax：前端的图表需要实时的局部刷新，所以需要用到Ajax；所以上面说，前后端的通信方式采用Ajax</p><h3 id="1-前后台传输数据采用JSON格式"><a href="#1-前后台传输数据采用JSON格式" class="headerlink" title="1.前后台传输数据采用JSON格式"></a>1.前后台传输数据采用JSON格式</h3><p>在RequestTotalServlet这个Servlet中需要把传递给前台的数据转成JSON格式，使用前需要注意的是引入fastJson的jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;RequestTotalServlet&quot;, value = &quot;/request&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTotalServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;String&gt; timeList = (List)request.getServletContext().getAttribute(<span class="string">&quot;timeList&quot;</span>);<span class="comment">//增加一个集合对象获取到ServletContext中的属性</span></span><br><span class="line">        List&lt;String&gt; valueList = (List)request.getServletContext().getAttribute(<span class="string">&quot;valueList&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//        response.getWriter().println(timeList.toString());</span></span><br><span class="line"><span class="comment">//        response.getWriter().println(&quot;&lt;br/&gt;&quot;);</span></span><br><span class="line"><span class="comment">//        response.getWriter().println(valueList.toString());</span></span><br><span class="line">        <span class="comment">//将timeList，valueList存放到HashMap集合中，做key值与value值</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        result.put(<span class="string">&quot;time&quot;</span>,timeList);</span><br><span class="line">        result.put(<span class="string">&quot;value&quot;</span>,valueList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将集合Map转换成JSON字符串，然后回显到前台数据中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonRequest</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        response.getWriter().println(jsonRequest);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建total1-html文件：客户端和后台的通信采用Ajax"><a href="#2-创建total1-html文件：客户端和后台的通信采用Ajax" class="headerlink" title="2.创建total1.html文件：客户端和后台的通信采用Ajax"></a>2.创建total1.html文件：客户端和后台的通信采用Ajax</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>total1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;./request&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:<span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">json</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//Ajax已经将JSON字符串转化为JSON对象，自动将后台传过来的json字符串转为JSON对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">time</span>);<span class="comment">//在控制台中输出JSON对象调用的time(key)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//基于准备好的DOM容器，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取div对象，利用echarts.init()对获取的div进行初始化；于是就得到了一个myChart图表</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指定图表的配置项目</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">text</span>: <span class="string">&#x27;请求流量分析统计&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">data</span>: [<span class="string">&#x27;访问量&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">data</span>: json.<span class="property">time</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">yAxis</span>: &#123;&#125;,  <span class="comment">//y轴没有设置，表示显示对应的数值;数值就在下面的series中定义</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">                        &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">name</span>: <span class="string">&#x27;访问量&#x27;</span>,    <span class="comment">//这个需要和上面的legend中的data的名称保持对应</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,       <span class="comment">//代表线状图</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">data</span>: json.<span class="property">value</span> <span class="comment">//JSON对象调用集合中的value(value)</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//使用刚指定的配置项和数据显示图表</span></span></span><br><span class="line"><span class="language-javascript">                myChart.<span class="title function_">setOption</span>(option);   <span class="comment">//激活刚才在option的设置项</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total12.png" alt="total12"></p><h2 id="四：完善项目"><a href="#四：完善项目" class="headerlink" title="四：完善项目"></a>四：完善项目</h2><h3 id="1-图表自动刷新"><a href="#1-图表自动刷新" class="headerlink" title="1.图表自动刷新"></a>1.图表自动刷新</h3><p>但是，现在的问题：图表不能自动刷新，而是需要我们手动刷新toal1.html页面才能实时展现最新的数据</p><p>可以每一秒向服务器查询一次数据：需要使用JavaScript定时器来实现：</p><p>total1.html做如下的更改：(1)将原先的<script>中的内容转移到showChart()方法中；(2)window.setlnterval("showChart()",1000);每一秒执行一下showChart()方法；(3)也就是每一秒发送一个/total1请求，去获取最新的访问次数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>total1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showChart</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;./request&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//Ajax已经将JSON字符串转化为JSON对象，自动将后台传过来的json字符串转为JSON对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">time</span>);<span class="comment">//在控制台中输出JSON对象调用的time(key)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//基于准备好的DOM容器，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//获取div对象，利用echarts.init()对获取的div进行初始化；于是就得到了一个myChart图表</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//指定图表的配置项目</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">text</span>: <span class="string">&#x27;请求流量分析统计&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">data</span>: [<span class="string">&#x27;访问量&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">data</span>: json.<span class="property">time</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">yAxis</span>: &#123;&#125;,  <span class="comment">//y轴没有设置，表示显示对应的数值;数值就在下面的series中定义</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">                            &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">name</span>: <span class="string">&#x27;访问量&#x27;</span>,    <span class="comment">//这个需要和上面的legend中的data的名称保持对应</span></span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,       <span class="comment">//代表线状图</span></span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">data</span>: json.<span class="property">value</span> <span class="comment">//JSON对象调用集合中的value(value)</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;]</span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//使用刚指定的配置项和数据显示图表</span></span></span><br><span class="line"><span class="language-javascript">                    myChart.<span class="title function_">setOption</span>(option);   <span class="comment">//激活刚才在option的设置项</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="string">&quot;showChart()&quot;</span>,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：发现，这个图表每隔1秒钟就刷新一下；但是，通过浏览total1.html发现，访问/total1.html这个请求，这个请求也会被监听器拦截到，所以访问/total1.html的请求也会被计算上；(因为使用了Ajax和定时器，所以在不刷新页面的情况下会一直发送Ajax请求)</p><p>所以，为了避免上述的请求，需要把访问/taotal1.html这个请求排除在外，即访问/total1.html不应该计入请求次数的增减</p><h3 id="2-在业务代码中过滤某些请求"><a href="#2-在业务代码中过滤某些请求" class="headerlink" title="2.在业务代码中过滤某些请求"></a>2.在业务代码中过滤某些请求</h3><p>需要在监听器中的init()方法中，让访问/total1.html的时候，不增加访问次数</p><p>endsWith()方法如果参数表示的字符序列是此对象表示的字符序列的后缀，则返回 true；否则返回 false。注意，如果参数是空字符串，或者等于此 String 对象（用 equals(Object) 方法确定），则结果为 true。</p><p>return 语句的作用是终止一个函数的执行，结束当前代码块中return后的语句，即return后的语句不再执行，从当前函数退出，为该函数返回一个指定的expression 值。如果 expression 被省略， 或在函数内没有 return 语句被执行，则把值 undefined 赋给调用当前函数的表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTotalListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>, ServletContextListener &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent ser)</span> &#123;</span><br><span class="line">        <span class="comment">//应用程序启动的时候，初始化需要存储的数据</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">timeList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//存储时间的集合对象</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">valueList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//具体时间的访问量数据的集合对象、</span></span><br><span class="line">        <span class="comment">//获取ServletContext对象，并将存储时间和访问量的值存储到这个对象中</span></span><br><span class="line">        <span class="comment">//即每次启动应用，在ServletContext全局对象中初始化这两个可以存储时间和访问量的属性</span></span><br><span class="line">        ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">        ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent ser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent ser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent ser)</span> &#123;</span><br><span class="line">        <span class="comment">//在监听器中设置：让访问/total1.html的时候，不增加访问次数</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">res</span> <span class="operator">=</span> (HttpServletRequest)ser.getServletRequest();<span class="comment">//强转为HttpServletRequest对象，才可以调用此方法中的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> res.getRequestURI().toString();<span class="comment">//调用HttpServletRequest方法中的getRequestUrl方法并转为字符性</span></span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="keyword">if</span> (url.endsWith(<span class="string">&quot;request&quot;</span>) == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//TimeList： 10：01   10：02   10：05   先确定时间是否存在</span></span><br><span class="line">        <span class="comment">//ValueList：   3        6       10      这两个List中的值通过索引值精准对应；</span></span><br><span class="line">        List&lt;String&gt; timeList =(List) ser.getServletContext().getAttribute(<span class="string">&quot;timeList&quot;</span>);<span class="comment">//获取到ServletContextInit初始化后创建的集合的value值</span></span><br><span class="line">        List&lt;Integer&gt; valueList =(List) ser.getServletContext().getAttribute(<span class="string">&quot;valueList&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//时间对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm&quot;</span>);<span class="comment">//规定时间的格式为小时:分钟</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> sdf.format(date);<span class="comment">//获取规定格式好的当前时间</span></span><br><span class="line">        <span class="comment">//indexOf()方法，查找对应的数据在集合中是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (timeList.indexOf(time) == -<span class="number">1</span>)&#123;<span class="comment">//表示当前时间在集合中不存在</span></span><br><span class="line">            timeList.add(time);<span class="comment">//如果当前时间不存在，就把当前时间添加到timeList中去</span></span><br><span class="line">            valueList.add(<span class="number">1</span>);<span class="comment">//给value值添加默认的值1</span></span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取当前时间在timeList中的索引，在valueList相同索引处的值+1</span></span><br><span class="line">            <span class="comment">//timeList和valueList，通过索引值的顺序一一对应</span></span><br><span class="line">            valueList.set(timeList.indexOf(time), valueList.get(timeList.indexOf(time))+<span class="number">1</span>);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：发现，访问/total1.html不会自己增加次数，只有访问test1，2，3的时候才会增加次数</p><p><img src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total123.png" alt="total123"></p>]]></content>
      
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖项目总结</title>
      <link href="/2022/12/09/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2022/12/09/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
