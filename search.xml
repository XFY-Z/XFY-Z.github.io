<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>监听器案例</title>
      <link href="/2022/12/11/%E7%9B%91%E5%90%AC%E5%99%A8%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B-%E8%AF%B7%E6%B1%82%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2022/12/11/%E7%9B%91%E5%90%AC%E5%99%A8%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B-%E8%AF%B7%E6%B1%82%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>某一个域名所对应的网站在某个时间段，浏览的变化情况：针对波峰和波谷的变化，就可以针对性地对网站进行优化和调整</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total1.png" alt="total1"></p><p>此案例包括两个部分：利用监听器实现对网站访问的量的获取，图表信息的展示</p><h2 id="一-具体实现：后台数据准备"><a href="#一-具体实现：后台数据准备" class="headerlink" title="一.具体实现：后台数据准备"></a>一.具体实现：后台数据准备</h2><h3 id="1-第一部分：编写监听器"><a href="#1-第一部分：编写监听器" class="headerlink" title="1.第一部分：编写监听器"></a>1.第一部分：编写监听器</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total2.png" alt="total2"></p><p>RequestTotalListener：监听器</p><ol><li>下面这个监听器的编写方式，最重要的启发是：一个问题，梳理清业务后，做好逻辑规划，然后按条例分别编写程序就ok了</li><li>这个监听器内容其实很简单，大略看看就ok了</li><li>全局对象ServletContext创建的时候，就在全局对象中初始化两个集合对象timeList和valueList；每当请求对象ServletRequest被创建的时候，就在timeList和valueList中做出对应的操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTotalListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>, ServletContextListener &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent ser)</span> &#123;</span><br><span class="line">        <span class="comment">//应用程序启动的时候，初始化需要存储的数据</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">timeList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//存储时间的集合对象</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">valueList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//具体时间的访问量数据的集合对象、</span></span><br><span class="line">        <span class="comment">//获取ServletContext对象，并将存储时间和访问量的值存储到这个对象中</span></span><br><span class="line">        <span class="comment">//即每次启动应用，在ServletContext全局对象中初始化这两个可以存储时间和访问量的属性</span></span><br><span class="line">        ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">        ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent ser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent ser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent ser)</span> &#123;</span><br><span class="line">        <span class="comment">//TimeList： 10：01   10：02   10：05   先确定时间是否存在</span></span><br><span class="line">        <span class="comment">//ValueList：   3        6       10      这两个List中的值通过索引值精准对应；</span></span><br><span class="line">        List&lt;String&gt; timeList =(List) ser.getServletContext().getAttribute(<span class="string">&quot;timeList&quot;</span>);<span class="comment">//获取到ServletContextInit初始化后创建的集合的value值</span></span><br><span class="line">        List&lt;Integer&gt; valueList =(List) ser.getServletContext().getAttribute(<span class="string">&quot;valueList&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//时间对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm&quot;</span>);<span class="comment">//规定时间的格式为小时:分钟</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> sdf.format(date);<span class="comment">//获取规定格式好的当前时间</span></span><br><span class="line">        <span class="comment">//indexOf()方法，查找对应的数据在集合中是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (timeList.indexOf(time) == -<span class="number">1</span>)&#123;<span class="comment">//表示当前时间在集合中不存在</span></span><br><span class="line">            timeList.add(time);<span class="comment">//如果当前时间不存在，就把当前时间添加到timeList中去</span></span><br><span class="line">            valueList.add(<span class="number">1</span>);<span class="comment">//给value值添加默认的值1</span></span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取当前时间在timeList中的索引，在valueList相同索引处的值+1</span></span><br><span class="line">            <span class="comment">//timeList和valueList，通过索引值的顺序一一对应</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> timeList.indexOf(time);</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> valueList.get(index);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>RequestTotalListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-第二部分：添加HTML页面"><a href="#2-第二部分：添加HTML页面" class="headerlink" title="2.第二部分：添加HTML页面"></a>2.第二部分：添加HTML页面</h3><p>为了模拟这个应用，添加几个HTML页面以供访问</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total3.png" alt="total3"></p><h3 id="3-第三部分：编写Servlet：RequestTotalServlet"><a href="#3-第三部分：编写Servlet：RequestTotalServlet" class="headerlink" title="3.第三部分：编写Servlet：RequestTotalServlet"></a>3.第三部分：编写Servlet：RequestTotalServlet</h3><p>这个Servlet的作用是，获取全局对象ServletContext中的timeList和valueList；并将其添加到响应中去；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;RequestTotalServlet&quot;, value = &quot;/request&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTotalServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;String&gt; timeList = (List)request.getServletContext().getAttribute(<span class="string">&quot;timeList&quot;</span>);<span class="comment">//增加一个集合对象获取到ServletContext中的属性</span></span><br><span class="line">        List&lt;String&gt; valueList = (List)request.getServletContext().getAttribute(<span class="string">&quot;valueList&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(timeList.toString());</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        response.getWriter().println(valueList.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-第四部分：效果展示"><a href="#4-第四部分：效果展示" class="headerlink" title="4.第四部分：效果展示"></a>4.第四部分：效果展示</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/totaal4.png" alt="totaal4"></p><p>至此，后台数据部分已经准备完成，启动应用，在浏览器对几个html访问几次（其实访问RequesTotalServlet也是可以，都会有ServletRequest对象创建）</p><h2 id="二-如何让数据在前台展示更美观"><a href="#二-如何让数据在前台展示更美观" class="headerlink" title="二.如何让数据在前台展示更美观"></a>二.如何让数据在前台展示更美观</h2><p>百度的Echarts图表：</p><h3 id="1-Echarts简单使用范例"><a href="#1-Echarts简单使用范例" class="headerlink" title="1.Echarts简单使用范例"></a>1.Echarts简单使用范例</h3><p>直接百度echarts：这是百度自己研发的一款图表组件，这个组件目前可以说是最强大的一款图表JS框架，echarts已经被Apache收购了</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total5.png" alt="total5"></p><p>进入文档部分，并点击使用教程部分</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total6.png" alt="total6"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total7.png" alt="total7"></p><p>其次，将下载的文件导入到项目中</p><p>解压后，找到：echarts.min.js这个js文件（在dist目录下）</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total8.png" alt="total8"></p><p>将Echarts组件的JS文件，添加到项目中：需要将这个文件放到Web目录下；一般会在Web目录下新建一个文件夹欸，专门存放外部引入的JS文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total9.png" alt="total9"></p><p>编写范例</p><p>根据官网的教程：total.html内容如下</p><ol><li>第一步：引入Echarts：<script type="text/javascript" src="JS/echarts.min.js"></script>&gt;</li><li>第二步：为了Echarts准备一个具有高宽的DOM容器，<div id="main" style="width:600px;height:400px;"></div></li><li>第三步：设置图表：先定义图片表，然后再option中设置图表中的各种属性，最后将设置项激活</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>total<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取div对象，利用echarts.init()对获取的div进行初始化；于是就得到一个myChart图表对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指定图表的配置和数据</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">yAxis</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line"><span class="language-javascript">        myChart.<span class="title function_">setOption</span>(option);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后观察效果</p><p>启动应用：访问total.html</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total10.png" alt="total10"></p><h3 id="2-Echarats补充"><a href="#2-Echarats补充" class="headerlink" title="2.Echarats补充"></a>2.Echarats补充</h3><p>其实，Echarts功能十分强大，有需要的时候，可以多参考官网和案例</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total11.png" alt="total11"></p><h2 id="三：具体实现：前台数据展示"><a href="#三：具体实现：前台数据展示" class="headerlink" title="三：具体实现：前台数据展示"></a>三：具体实现：前台数据展示</h2><h3 id="0-基本实现：利用百度Echarts组件展示后台数据"><a href="#0-基本实现：利用百度Echarts组件展示后台数据" class="headerlink" title="0.基本实现：利用百度Echarts组件展示后台数据"></a>0.基本实现：利用百度Echarts组件展示后台数据</h3><p>目前的问题是，前端工程师已经把前台的界面做好了，我们也已经将前端开发的界面加到工程总，如何把后台的数据怼上去呢</p><p>这其中的关键是前后端的通信</p><p>常见的通信方式是Jquery和Ajax：前端的图表需要实时的局部刷新，所以需要用到Ajax；所以上面说，前后端的通信方式采用Ajax</p><h3 id="1-前后台传输数据采用JSON格式"><a href="#1-前后台传输数据采用JSON格式" class="headerlink" title="1.前后台传输数据采用JSON格式"></a>1.前后台传输数据采用JSON格式</h3><p>在RequestTotalServlet这个Servlet中需要把传递给前台的数据转成JSON格式，使用前需要注意的是引入fastJson的jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;RequestTotalServlet&quot;, value = &quot;/request&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTotalServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;String&gt; timeList = (List)request.getServletContext().getAttribute(<span class="string">&quot;timeList&quot;</span>);<span class="comment">//增加一个集合对象获取到ServletContext中的属性</span></span><br><span class="line">        List&lt;String&gt; valueList = (List)request.getServletContext().getAttribute(<span class="string">&quot;valueList&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//        response.getWriter().println(timeList.toString());</span></span><br><span class="line"><span class="comment">//        response.getWriter().println(&quot;&lt;br/&gt;&quot;);</span></span><br><span class="line"><span class="comment">//        response.getWriter().println(valueList.toString());</span></span><br><span class="line">        <span class="comment">//将timeList，valueList存放到HashMap集合中，做key值与value值</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        result.put(<span class="string">&quot;time&quot;</span>,timeList);</span><br><span class="line">        result.put(<span class="string">&quot;value&quot;</span>,valueList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将集合Map转换成JSON字符串，然后回显到前台数据中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonRequest</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        response.getWriter().println(jsonRequest);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建total1-html文件：客户端和后台的通信采用Ajax"><a href="#2-创建total1-html文件：客户端和后台的通信采用Ajax" class="headerlink" title="2.创建total1.html文件：客户端和后台的通信采用Ajax"></a>2.创建total1.html文件：客户端和后台的通信采用Ajax</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>total1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;./request&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:<span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">json</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//Ajax已经将JSON字符串转化为JSON对象，自动将后台传过来的json字符串转为JSON对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">time</span>);<span class="comment">//在控制台中输出JSON对象调用的time(key)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//基于准备好的DOM容器，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取div对象，利用echarts.init()对获取的div进行初始化；于是就得到了一个myChart图表</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指定图表的配置项目</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">text</span>: <span class="string">&#x27;请求流量分析统计&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">data</span>: [<span class="string">&#x27;访问量&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">data</span>: json.<span class="property">time</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">yAxis</span>: &#123;&#125;,  <span class="comment">//y轴没有设置，表示显示对应的数值;数值就在下面的series中定义</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">                        &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">name</span>: <span class="string">&#x27;访问量&#x27;</span>,    <span class="comment">//这个需要和上面的legend中的data的名称保持对应</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,       <span class="comment">//代表线状图</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">data</span>: json.<span class="property">value</span> <span class="comment">//JSON对象调用集合中的value(value)</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//使用刚指定的配置项和数据显示图表</span></span></span><br><span class="line"><span class="language-javascript">                myChart.<span class="title function_">setOption</span>(option);   <span class="comment">//激活刚才在option的设置项</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total12.png" alt="total12"></p><h2 id="四：完善项目"><a href="#四：完善项目" class="headerlink" title="四：完善项目"></a>四：完善项目</h2><h3 id="1-图表自动刷新"><a href="#1-图表自动刷新" class="headerlink" title="1.图表自动刷新"></a>1.图表自动刷新</h3><p>但是，现在的问题：图表不能自动刷新，而是需要我们手动刷新toal1.html页面才能实时展现最新的数据</p><p>可以每一秒向服务器查询一次数据：需要使用JavaScript定时器来实现：</p><p>total1.html做如下的更改：(1)将原先的<script>中的内容转移到showChart()方法中；(2)window.setlnterval("showChart()",1000);每一秒执行一下showChart()方法；(3)也就是每一秒发送一个/total1请求，去获取最新的访问次数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>total1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showChart</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;./request&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//Ajax已经将JSON字符串转化为JSON对象，自动将后台传过来的json字符串转为JSON对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">time</span>);<span class="comment">//在控制台中输出JSON对象调用的time(key)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//基于准备好的DOM容器，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//获取div对象，利用echarts.init()对获取的div进行初始化；于是就得到了一个myChart图表</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//指定图表的配置项目</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">text</span>: <span class="string">&#x27;请求流量分析统计&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">data</span>: [<span class="string">&#x27;访问量&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">data</span>: json.<span class="property">time</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">yAxis</span>: &#123;&#125;,  <span class="comment">//y轴没有设置，表示显示对应的数值;数值就在下面的series中定义</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">                            &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">name</span>: <span class="string">&#x27;访问量&#x27;</span>,    <span class="comment">//这个需要和上面的legend中的data的名称保持对应</span></span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,       <span class="comment">//代表线状图</span></span></span><br><span class="line"><span class="language-javascript">                                <span class="attr">data</span>: json.<span class="property">value</span> <span class="comment">//JSON对象调用集合中的value(value)</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;]</span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//使用刚指定的配置项和数据显示图表</span></span></span><br><span class="line"><span class="language-javascript">                    myChart.<span class="title function_">setOption</span>(option);   <span class="comment">//激活刚才在option的设置项</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="string">&quot;showChart()&quot;</span>,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：发现，这个图表每隔1秒钟就刷新一下；但是，通过浏览total1.html发现，访问/total1.html这个请求，这个请求也会被监听器拦截到，所以访问/total1.html的请求也会被计算上；(因为使用了Ajax和定时器，所以在不刷新页面的情况下会一直发送Ajax请求)</p><p>所以，为了避免上述的请求，需要把访问/taotal1.html这个请求排除在外，即访问/total1.html不应该计入请求次数的增减</p><h3 id="2-在业务代码中过滤某些请求"><a href="#2-在业务代码中过滤某些请求" class="headerlink" title="2.在业务代码中过滤某些请求"></a>2.在业务代码中过滤某些请求</h3><p>需要在监听器中的init()方法中，让访问/total1.html的时候，不增加访问次数</p><p>endsWith()方法如果参数表示的字符序列是此对象表示的字符序列的后缀，则返回 true；否则返回 false。注意，如果参数是空字符串，或者等于此 String 对象（用 equals(Object) 方法确定），则结果为 true。</p><p>return 语句的作用是终止一个函数的执行，结束当前代码块中return后的语句，即return后的语句不再执行，从当前函数退出，为该函数返回一个指定的expression 值。如果 expression 被省略， 或在函数内没有 return 语句被执行，则把值 undefined 赋给调用当前函数的表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTotalListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>, ServletContextListener &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent ser)</span> &#123;</span><br><span class="line">        <span class="comment">//应用程序启动的时候，初始化需要存储的数据</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">timeList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//存储时间的集合对象</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">valueList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//具体时间的访问量数据的集合对象、</span></span><br><span class="line">        <span class="comment">//获取ServletContext对象，并将存储时间和访问量的值存储到这个对象中</span></span><br><span class="line">        <span class="comment">//即每次启动应用，在ServletContext全局对象中初始化这两个可以存储时间和访问量的属性</span></span><br><span class="line">        ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">        ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent ser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent ser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent ser)</span> &#123;</span><br><span class="line">        <span class="comment">//在监听器中设置：让访问/total1.html的时候，不增加访问次数</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">res</span> <span class="operator">=</span> (HttpServletRequest)ser.getServletRequest();<span class="comment">//强转为HttpServletRequest对象，才可以调用此方法中的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> res.getRequestURI().toString();<span class="comment">//调用HttpServletRequest方法中的getRequestUrl方法并转为字符性</span></span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="keyword">if</span> (url.endsWith(<span class="string">&quot;request&quot;</span>) == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//TimeList： 10：01   10：02   10：05   先确定时间是否存在</span></span><br><span class="line">        <span class="comment">//ValueList：   3        6       10      这两个List中的值通过索引值精准对应；</span></span><br><span class="line">        List&lt;String&gt; timeList =(List) ser.getServletContext().getAttribute(<span class="string">&quot;timeList&quot;</span>);<span class="comment">//获取到ServletContextInit初始化后创建的集合的value值</span></span><br><span class="line">        List&lt;Integer&gt; valueList =(List) ser.getServletContext().getAttribute(<span class="string">&quot;valueList&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//时间对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm&quot;</span>);<span class="comment">//规定时间的格式为小时:分钟</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> sdf.format(date);<span class="comment">//获取规定格式好的当前时间</span></span><br><span class="line">        <span class="comment">//indexOf()方法，查找对应的数据在集合中是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (timeList.indexOf(time) == -<span class="number">1</span>)&#123;<span class="comment">//表示当前时间在集合中不存在</span></span><br><span class="line">            timeList.add(time);<span class="comment">//如果当前时间不存在，就把当前时间添加到timeList中去</span></span><br><span class="line">            valueList.add(<span class="number">1</span>);<span class="comment">//给value值添加默认的值1</span></span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取当前时间在timeList中的索引，在valueList相同索引处的值+1</span></span><br><span class="line">            <span class="comment">//timeList和valueList，通过索引值的顺序一一对应</span></span><br><span class="line">            valueList.set(timeList.indexOf(time), valueList.get(timeList.indexOf(time))+<span class="number">1</span>);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;timeList&quot;</span>,timeList);</span><br><span class="line">            ser.getServletContext().setAttribute(<span class="string">&quot;valueList&quot;</span>,valueList);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：发现，访问/total1.html不会自己增加次数，只有访问test1，2，3的时候才会增加次数</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/total123.png" alt="total123"></p>]]></content>
      
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖项目总结</title>
      <link href="/2022/12/09/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2022/12/09/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Set接口</title>
      <link href="/2022/07/17/Java%E4%B8%AD%E7%9A%84Set%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/07/17/Java%E4%B8%AD%E7%9A%84Set%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><h2 id="set接口存储"><a href="#set接口存储" class="headerlink" title="set接口存储"></a>set接口存储</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">存储的数据特点：无序的、不可重复的元素</span></span><br><span class="line"><span class="comment">具体的：</span></span><br><span class="line"><span class="comment">以HashSet为例说明：</span></span><br><span class="line"><span class="comment">1.无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的</span></span><br><span class="line"><span class="comment">2.不可重复性：保证添加新的元素照equals()判断时，判断的值为Hashcode的值,不能返回true，即：相同的元素只能添加一个</span></span><br><span class="line"><span class="comment">如果HashSet集合中存储的是自定义类的对象(JavaBean)，需要重写equals()，HashCode方法，利用HashCode()算出Hash值后，按照不同的情况利用equals()方法判断其中的值是否相同，然后做出不同的判断，因为HashSet集合中是没有重复的数据的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="元素添加过程"><a href="#元素添加过程" class="headerlink" title="元素添加过程"></a>元素添加过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">以HashSet为例</span></span><br><span class="line"><span class="comment">我们向HashSet中添加元素a，首先调用元素a所在类的HashCode()方法，计算元素a的哈希值，</span></span><br><span class="line"><span class="comment">此哈希值接着某种算法计算出在HashSet底层数组中的存放位置(即：索引位置，判断数组此位置上是否有元素)</span></span><br><span class="line"><span class="comment">如果此位置没有其他元素，则元素a添加成功。--&gt;情况1</span></span><br><span class="line"><span class="comment">如果此位置上有其他元素b(或以链表形式存在的多个元素，则比较元素a与元素b的hash值)</span></span><br><span class="line"><span class="comment">-如果hash值不相同，则元素a添加成功。--&gt;情况2</span></span><br><span class="line"><span class="comment">-如果hash值相同，进而需要调用元素a所在类的equals()方法(判断元素中值是否相同，set集合是不允许有重复的元素)</span></span><br><span class="line"><span class="comment">-equals()返回true，元素添加失败。</span></span><br><span class="line"><span class="comment">-equals()返回false，则元素a添加成功。--&gt;情况3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储</span></span><br><span class="line"><span class="comment">jdk 7:元素a放在数组中，指向原来的元素</span></span><br><span class="line"><span class="comment">jdk 8:原来的元素在数组中，指向元素a</span></span><br><span class="line"><span class="comment">总结：七上八下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HashSet底层：数组+链表的结构。(前提：jdk7)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Set接口中没有额外定义新的方法，使用的都是Coeeection中声明的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="常用实现类"><a href="#常用实现类" class="headerlink" title="常用实现类"></a>常用实现类</h2><ul><li>Collection接口：单例集合，用来存储一个一个对象<ul><li>Set接口：存储无序的、不可重复的数据 –&gt;高中讲的”集合”</li><li>HashSet：作为Set接口的主要实现类；线程是不安全的；可以存储null值，存储无序的、不可重复的数据  </li><li><strong>LinkedHashSet：作为HashSet的子类：遍历其内部数据时，可以按照添加的顺序遍历</strong><br>  <strong>在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。</strong><br>  <strong>对于频繁的遍历操作，LinkedHashSet效率高于HashSet</strong></li><li>TreeSet：可以按照添加对象的指定属性，进行排序。</li></ul></li></ul><h2 id="存储对象所在类的要求"><a href="#存储对象所在类的要求" class="headerlink" title="存储对象所在类的要求"></a>存储对象所在类的要求</h2><p>HashSet&#x2F;LinkedHashSet：</p><p>要求：向Set(主要指：HashSet、LinkedHashSet)中添加数据，<a href="">其所在的类一定要重写hashCode()和equals()</a>，其equals()判断hashCode()方法得到的hash值是否相等</p><p><strong>当两个对象中封装相同的内容，如果没有重写equals()和hashCode()方法就是相同的类型的数据，遍历的时候只会输出一个值，但是重写了这两个方法后，返回的hash值不同，然后通过equals方法判断是不同的值，遍历输出的时候就都输出了</strong></p><p>要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</p><p>重写两个方法的小技巧：对象中用作equals()方法比较的Field，都是用来计算hashCode值。即：相等的对象必须具有相等的散列码</p><h2 id="TreeSet的使用"><a href="#TreeSet的使用" class="headerlink" title="TreeSet的使用"></a>TreeSet的使用</h2><h3 id="TreeSet的使用说明"><a href="#TreeSet的使用说明" class="headerlink" title="TreeSet的使用说明"></a>TreeSet的使用说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0，不再是equals</span></span><br><span class="line"><span class="comment">2.定制排序中，比较两个对象是否相同的标准为：compare()返回0，不再是equals()</span></span><br><span class="line"><span class="comment">3.向TreeSet中添加的数据，要求是相同类的对象</span></span><br><span class="line"><span class="comment">4.两种排序方式：自然排序(实现Comparable接口 和 定制排序(Comparator))</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="TreeSet常用的排序方式"><a href="#TreeSet常用的排序方式" class="headerlink" title="TreeSet常用的排序方式"></a>TreeSet常用的排序方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">两种排序方式：自然排序(实现Comparable接口) 和 定制排序(ComParator)</span></span><br><span class="line"><span class="comment">1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0，不再是equals()</span></span><br><span class="line"><span class="comment">2.定制排序中，比较两个对象是否相同的标准为：compare()返回0，不再是equals()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>方式一：自然排序</p><p>在JavaBean中调用CompareTo接口重写其中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;<span class="comment">//实现Comparable接口</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;<span class="comment">//重写equals方法，可以判断对象中的值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从小到大排列，从小到大的话把this前添加负号就可以了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name.compareTo(person.name);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的类型不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败：不能添加不同类的对象</span></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add(&quot;AA&quot;);</span></span><br><span class="line"><span class="comment">//        set.add(new User(&quot;Tom&quot;,12));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//举例一：</span></span><br><span class="line"><span class="comment">//        set.add(34);</span></span><br><span class="line"><span class="comment">//        set.add(-34);</span></span><br><span class="line"><span class="comment">//        set.add(43);</span></span><br><span class="line"><span class="comment">//        set.add(11);</span></span><br><span class="line"><span class="comment">//        set.add(8);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方式二：定制排序</p><p>在当前类中调用匿名内部类，实现Compartor接口中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span>&#123;</span><br><span class="line">    TreeSet&lt;Object&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;&gt;() &#123;</span><br><span class="line">        <span class="comment">//按照年龄从小到大排列</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> Person &amp;&amp; o2 <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">                <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> (Person) o1;</span><br><span class="line">                <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> (Person) o2;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(p1.getAge(), p2.getAge());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Ash&quot;</span>,<span class="number">22</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;<span class="comment">//判断是否还有下一个元素</span></span><br><span class="line">        System.out.println(iterator.next());<span class="comment">//1.指针下移  2.将下移以后集合位置上的元素返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的List接口</title>
      <link href="/2022/07/17/Java%E4%B8%AD%E7%9A%84List%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/07/17/Java%E4%B8%AD%E7%9A%84List%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h1><h2 id="List接口概述"><a href="#List接口概述" class="headerlink" title="List接口概述"></a>List接口概述</h2><ul><li>鉴于Java中数组用来存储数据的局限性·，我们通常使用List代替数组</li><li>List集合类中元素有序。且可重复，集合中的每个怨怒苏都有其对应的顺序索引</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存储容器中的元素</li><li>JDK API中的List接口的实现类常用的有： ArrayList、LinkedList和Vector</li></ul><span id="more"></span><h2 id="List接口存储数据的特点"><a href="#List接口存储数据的特点" class="headerlink" title="List接口存储数据的特点"></a>List接口存储数据的特点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">List接口存储数据的特点：存储有序的、可重复的数据</span></span><br><span class="line"><span class="comment">如果List集合中存储的是自定义类的对象(JavaBean)，需要重写equals()方法，add()方法不需要用到此方法，但是例如改，查操作的时候是需要用到的equals()方法来判断其中的值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="List接口的常用方法"><a href="#List接口的常用方法" class="headerlink" title="List接口的常用方法"></a>List接口的常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">增加：add(Object obj)</span></span><br><span class="line"><span class="comment">删除：remove(int index)/remove(Object obj)</span></span><br><span class="line"><span class="comment">改：set(int index,Object ele)</span></span><br><span class="line"><span class="comment">查：get(int index)</span></span><br><span class="line"><span class="comment">插入：add(int index,Object ele)</span></span><br><span class="line"><span class="comment">长度：size</span></span><br><span class="line"><span class="comment">遍历：1.Iterator迭代器方式</span></span><br><span class="line"><span class="comment"> 2.增强for循环</span></span><br><span class="line"><span class="comment"> 3.普通的循环</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="List接口的常用实现类"><a href="#List接口的常用实现类" class="headerlink" title="List接口的常用实现类"></a>List接口的常用实现类</h2><ul><li><p>Collection接口：单例集合，用来存储一个一个的对象</p></li><li><p>List接口：存储有序的、可重复的数据 –&gt;”动态”数组，替换原来的数组</p><ul><li>ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[]存储</li><li>LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高：底层使用双向链表存储</li><li>vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</li></ul></li></ul><p>面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">面试题：ArrayList、LinkedList、Vector三者的异同？</span></span><br><span class="line"><span class="comment">同：三个类都是实现了List接口，存储数据的特点相同：存储有序的。可重复的数据</span></span><br><span class="line"><span class="comment">不同：可以参考不同子接口的作用不同，及底层代码的实现</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="ArrayList的源码分析"><a href="#ArrayList的源码分析" class="headerlink" title="ArrayList的源码分析"></a>ArrayList的源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">jdk 7情况下</span></span><br><span class="line"><span class="comment">*      ArrayList list = new ArrayList();//底层创建了长度是10的Object[]数组elementData</span></span><br><span class="line"><span class="comment">*      list.add(123);//elementData[0] = new Integer(123);</span></span><br><span class="line"><span class="comment">*      ...</span></span><br><span class="line"><span class="comment">*      list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。</span></span><br><span class="line"><span class="comment">*      默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*      结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">jdk 8中ArrayList的变化：</span></span><br><span class="line"><span class="comment">*      ArrayList list = new ArrayList();//底层Object[] elementData初始化为&#123;&#125;.并没创建长度为10的数组</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*      list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span></span><br><span class="line"><span class="comment">*      ...</span></span><br><span class="line"><span class="comment">*      后续的添加和扩容操作与jdk 7 无异。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象</span></span><br><span class="line"><span class="comment">*            的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a>LinkedList源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*      LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</span></span><br><span class="line"><span class="comment">*      list.add(123);//将123封装到Node中，创建了Node对象。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*      其中，Node定义为：体现了LinkedList的双向链表的说法</span></span><br><span class="line"><span class="comment">*      private static class Node&lt;E&gt; &#123;</span></span><br><span class="line"><span class="comment">            E item;</span></span><br><span class="line"><span class="comment">            Node&lt;E&gt; next;</span></span><br><span class="line"><span class="comment">            Node&lt;E&gt; prev;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            this.item = element;</span></span><br><span class="line"><span class="comment">            this.next = next;</span></span><br><span class="line"><span class="comment">            this.prev = prev;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Vector的源码分析"><a href="#Vector的源码分析" class="headerlink" title="Vector的源码分析"></a>Vector的源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。</span></span><br><span class="line"><span class="comment">在扩容方面，默认扩容为原来的数组长度的2倍。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="List接口中的常用方法测试"><a href="#List接口中的常用方法测试" class="headerlink" title="List接口中的常用方法测试"></a>List接口中的常用方法测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//ArrayList中定义泛型是为了数据中的数据类型,定义Object就是什么类型的数据都可以添加到list集合中 </span></span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        list.add(<span class="literal">false</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.void add(int index,Object ele)：在index位置插入ele元素</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.boolean addAll(int index,Collection eles):从index位置开始将eles中的所有元素都添加进来</span></span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">////asList(T... a)返回的是一个固定大小的list集合,这里返回[1,2,3]</span></span><br><span class="line">        list.addAll( integers);</span><br><span class="line">        System.out.println(list.size());<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Object get(int index):获取指定index位置的元素</span></span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));<span class="comment">//得到1这个位置上的数据BB</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.int indexOf(Object obj):返回obj在当前集合中首次出现的位置</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="number">456</span>));<span class="comment">//输出456第一次出现的位置2，如果没有就输出为-1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line">        list.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//BB被删除了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.Object set(int index,Object ele):设置指定index位置的元素ele</span></span><br><span class="line">        list.set(<span class="number">1</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//设置索引值为1的值为CC</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List subList(int fromIndex,Int toIndex):返回从fromIndex到toIndex位置的子集合是(X&lt;=X&lt;X)</span></span><br><span class="line">        System.out.println(list.subList(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//输出位置1与2上面的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环遍历List</span></span><br><span class="line">        <span class="comment">//方式一：Iterator迭代器方式</span></span><br><span class="line">        Iterator&lt;Object&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：增强型for循环</span></span><br><span class="line">        <span class="keyword">for</span> (Object o: list)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Collection接口</title>
      <link href="/2022/07/17/Java%E4%B8%AD%E7%9A%84Collection%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/07/17/Java%E4%B8%AD%E7%9A%84Collection%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="单列集合框架结构"><a href="#单列集合框架结构" class="headerlink" title="单列集合框架结构"></a>单列集合框架结构</h2><ul><li>Collection接口：单列集合，用来存储一个一个对象<ul><li>List接口：存储有序的。可重复的数据–&gt;”动态”数组</li><li>ArrayList、LinkedList、vector</li></ul></li><li>Set接口：存储无序的、不可重复的数据  –&gt;高中讲的”集合”<ul><li>HashSet、LinkedHashSet、TreeSet</li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220715163516340.png" alt="image-20220715163516340"></p><span id="more"></span><h2 id="Collection接口中常用的方法"><a href="#Collection接口中常用的方法" class="headerlink" title="Collection接口中常用的方法"></a>Collection接口中常用的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collection接口中声明的方法的测试</span></span><br><span class="line"><span class="comment"> * 向Collection接口的实现类的对象中添加数据obj时，要求obj所在类中重写equals();</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//ArrayList中定义泛型是为了数据中的数据类型</span></span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        list.add(<span class="literal">false</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        <span class="keyword">for</span> (Object list1:list)&#123;</span><br><span class="line">            System.out.println(list1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.contains(Object obj):判断当前集合中是否包含obj</span></span><br><span class="line">        <span class="comment">//我们在判断时会调用obj对象所在类的equals()方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> list.contains(<span class="number">123</span>);</span><br><span class="line">        System.out.println(contains);</span><br><span class="line">        System.out.println(list.contains(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>)));</span><br><span class="line">        System.out.println(list.contains(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">12</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.containsAll(Collection coll1)：判断形参coll1中的所有元素是否都存在于当前集合中</span></span><br><span class="line">        System.out.println(list.containsAll(list));<span class="comment">//返回true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.remove(Object obj)：从当前集合中移除obj元素</span></span><br><span class="line">        list.remove(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        list.remove(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        <span class="keyword">for</span> (Object list2:list)&#123;</span><br><span class="line">            System.out.println(list2);<span class="comment">//[123,456, Person&#123;name=&#x27;Jerry&#x27;, age=20&#125;, false]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.removeAll(Collection coll1)：从当前集合中移除coll1中的所有元素</span></span><br><span class="line">        <span class="comment">//list.removeAll(list);</span></span><br><span class="line">        System.out.println(list);<span class="comment">//输出为空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.retainAll(Collection coll1):交集：获取当前集合和从coll1集合的交集，并返回给当前集合</span></span><br><span class="line">        List&lt;Integer&gt; asList = Arrays.asList(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>);<span class="comment">//asList(T... a)返回的是一个固定大小的list集合,这里返回[123,456,789]</span></span><br><span class="line">        <span class="comment">//list.retainAll(asList);</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.equals(Object obj):要想返回true，需要当前集合和形参集合元素都相同</span></span><br><span class="line">        ArrayList&lt;Object&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="literal">false</span>);</span><br><span class="line">        System.out.println(list.equals(list3));<span class="comment">//输出为false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        list.add(<span class="literal">false</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.hashCode()：返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(list.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.集合 --&gt;数组：toArray</span></span><br><span class="line">        Object[] arr = list.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object o:arr)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展：数组 --&gt;集合：调用Array类的静态方法aList()</span></span><br><span class="line">        List&lt;String&gt; list1 = Arrays.asList(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>&#125;);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator接口与foreach循环"><a href="#Iterator接口与foreach循环" class="headerlink" title="Iterator接口与foreach循环"></a>Iterator接口与foreach循环</h2><h3 id="遍历Collection的两种方式"><a href="#遍历Collection的两种方式" class="headerlink" title="遍历Collection的两种方式"></a>遍历Collection的两种方式</h3><ul><li>使用迭代器Iterator</li><li>foreach循环（或增强for循环）</li></ul><h3 id="java-utils包下定义的迭代器接口：Iterator"><a href="#java-utils包下定义的迭代器接口：Iterator" class="headerlink" title="java.utils包下定义的迭代器接口：Iterator"></a>java.utils包下定义的迭代器接口：Iterator</h3><p>说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1.Iterator对象称为迭代器(设计模式的一种)，主要用于遍历Collection集合中的元素</span></span><br><span class="line"><span class="comment">2.GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节，迭代器模式，就是为容器而生</span></span><br><span class="line"><span class="comment">3.内部的方法：hasNext()和next()</span></span><br><span class="line"><span class="comment">4.集合对象每次调用iterator()方法得到一个全新的迭代器对象，从头开始遍历</span></span><br><span class="line"><span class="comment">5.内部定义了remove()，可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">遍历集合Collection元素</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如何获取实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">coll.iterator()返回一个迭代器实例</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>遍历的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//&#x27;List接口：存储有序的。可重复的数据--&gt;&quot;动态&quot;数组&#x27;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test1</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//ArrayList中定义泛型是为了数据中的数据类型</span></span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        list.add(<span class="literal">false</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">12</span>));</span><br><span class="line"><span class="comment">//返回一个迭代器实例，返回一个数据集</span></span><br><span class="line">        Iterator&lt;Object&gt; iterator = list.iterator();</span><br><span class="line">        <span class="comment">//hashNet():判断是否有下一个元素</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//next():1.指针下移 2.将下移以后集合位置上的元素返回</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图示说明</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220715214754123.png" alt="image-20220715214754123"></p><p>remove()的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试Iterator中的remove()</span></span><br><span class="line"><span class="comment">//如果还未调用next()或在上一次调用next方法之后已经调用remove方法，再调用remove都会报IllegalStateException</span></span><br><span class="line"><span class="comment">//内部定义remove()，可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//ArrayList中定义泛型是为了数据中的数据类型</span></span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        list.add(<span class="literal">false</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//删除集合中&quot;Tom&quot;</span></span><br><span class="line">        Iterator&lt;Object&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;Tom&quot;</span>.equals(next))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Object&gt; iterator1 = list.iterator();<span class="comment">//上一个迭代器的指针指向最后一个元素，所以新创建一个迭代器指向第一个元素重新遍历</span></span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) System.out.println(iterator1.next());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="增强for循环：-foreach循环"><a href="#增强for循环：-foreach循环" class="headerlink" title="增强for循环：(foreach循环)"></a>增强for循环：(foreach循环)</h3><p>遍历集合举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    coll.add(<span class="number">123</span>);</span><br><span class="line">    coll.add(<span class="number">456</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">    coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for(集合元素的类型 局部变量：集合对象)</span></span><br><span class="line">    <span class="comment">//说明：内部仍然调用了迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : coll)&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历数组举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a1:a)&#123;</span><br><span class="line">    System.out.println(a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的反射机制</title>
      <link href="/2022/07/17/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/07/17/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><h2 id="java反射机制概述"><a href="#java反射机制概述" class="headerlink" title="java反射机制概述"></a>java反射机制概述</h2><ul><li>Reflection（反射）是被视为<strong>动态语言</strong>的关键，反射机制允许程序在执行期借助于Reflection API（反射接口）取得任何类的内部信息，并能直接操作任何对象的内部属性及方法</li><li>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称为：反射。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/reflection1.png" alt="reflection1"></p><span id="more"></span><h2 id="动态语言-VS-静态语言"><a href="#动态语言-VS-静态语言" class="headerlink" title="动态语言 VS 静态语言"></a>动态语言 VS 静态语言</h2><ol><li>动态语言<br> 是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行代码可以根据某些条件改变自身结构<br> 主要静态语言：Object-C、C#、JavaScript、PHP、Python、Erlang</li><li>静态语言<br> 与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++</li><li>Java<br> Java不是动态语言，但Java可以称之为”准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。Java的动态性让编程的时候更加灵活</li></ol><h2 id="Java反射机制研究及应用"><a href="#Java反射机制研究及应用" class="headerlink" title="Java反射机制研究及应用"></a>Java反射机制研究及应用</h2><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><h2 id="Java反射相关的主要API"><a href="#Java反射相关的主要API" class="headerlink" title="Java反射相关的主要API"></a>Java反射相关的主要API</h2><ul><li>java.lang.Class：代表一个类</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造器</li><li>……</li></ul><h2 id="Java反射之前，类的实例化"><a href="#Java反射之前，类的实例化" class="headerlink" title="Java反射之前，类的实例化"></a>Java反射之前，类的实例化</h2><p>Person类，封装了一些方法和构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//重写toString()方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showNation</span><span class="params">(String nation)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的国籍是&quot;</span>+nation);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RefilectionTest类，调用Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefilectionTest</span> &#123;</span><br><span class="line">    <span class="comment">//反射之前，对于Person类的操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建Person类的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        <span class="comment">//2、通过对象，调用其内部的属性、方法</span></span><br><span class="line">        p1.age=<span class="number">10</span>;</span><br><span class="line">        System.out.println(p1.toString());</span><br><span class="line">        p1.show();</span><br><span class="line">        <span class="comment">//在Person类外部，不可以通过Person类的对象调用其内部私有结构</span></span><br><span class="line">        <span class="comment">//比如：name、showNation()以及私有的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java反射之后"><a href="#Java反射之后" class="headerlink" title="Java反射之后"></a>Java反射之后</h2><p>Person类，封装了一些公有私有的属性，公有私有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//重写toString()方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showNation</span><span class="params">(String nation)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的国籍是&quot;</span>+nation);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RefilectionTest类，通过反射调用其中的属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射之后，对于Person的操作</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="comment">//1、通过反射，创建Person的对象</span></span><br><span class="line">     <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">     <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span>clazz.getConstructor(String.class,<span class="type">int</span>.class);<span class="comment">//获取带参的构造器</span></span><br><span class="line">     Object obj=cons.newInstance(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);<span class="comment">//创建带参的实例对象</span></span><br><span class="line">     <span class="type">Person</span> <span class="variable">p</span>  <span class="operator">=</span> (Person) obj;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//2、通过反射，调用对象指定的属性、方法</span></span><br><span class="line">     <span class="comment">//调用属性</span></span><br><span class="line">     <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span>clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">     age.set(p,<span class="number">10</span>);</span><br><span class="line">     <span class="comment">//调用方法</span></span><br><span class="line">     Method shows=clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">     shows.invoke(p);</span><br><span class="line">     System.out.println(<span class="string">&quot;***************************************&quot;</span>);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//通过反射，可以调用Person类的私有结构，比如：私有的构造器、方法、属性</span></span><br><span class="line">     <span class="comment">//通过反射，调用私有的构造器</span></span><br><span class="line">     Constructor cons1=clazz.getDeclaredConstructor(String.class);</span><br><span class="line">     cons1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">     Person p1=(Person) cons1.newInstance(<span class="string">&quot;Jerry&quot;</span>);<span class="comment">//赋值</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//调用私有的属性</span></span><br><span class="line">     Field name=clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">     name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">     name.set(p1,<span class="string">&quot;huangyufeng&quot;</span>);</span><br><span class="line">     System.out.println(p1);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//调用私有的方法</span></span><br><span class="line">     Method nation=clazz.getDeclaredMethod(<span class="string">&quot;showNation&quot;</span>, String.class);</span><br><span class="line">     nation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">     nation.invoke(p1,<span class="string">&quot;中国&quot;</span>);<span class="comment">//相当于p1.showNation(&quot;中国&quot;);</span></span><br><span class="line">     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Java反射-Class类的理解"><a href="#Java反射-Class类的理解" class="headerlink" title="Java反射-Class类的理解"></a>Java反射-Class类的理解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于java.lang.Class类的理解</span></span><br><span class="line"><span class="comment">1.类的加载过程：</span></span><br><span class="line"><span class="comment">程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)</span></span><br><span class="line"><span class="comment">接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存的过程就称为类的加载</span></span><br><span class="line"><span class="comment">加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例(简单来说就是这个运行时类被作为对象来使用，然后Class去实例化这个运行时类)</span></span><br><span class="line"><span class="comment">2.换句话说，Class的实例就对应着一个运行时类。</span></span><br><span class="line"><span class="comment">3.加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们静态通过不同的方式来获取此运行时l</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//万事万物皆对象？对象.xxx，File，URL，反射，前端，数据库操作</span></span><br></pre></td></tr></table></figure><h3 id="获取Class实例的四种方式"><a href="#获取Class实例的四种方式" class="headerlink" title="获取Class实例的四种方式"></a>获取Class实例的四种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//获取Class的实例的方式(前三种方式需要掌握)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//方式一：调用运行时类的属性：.class</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    System.out.println(clazz1);<span class="comment">//输出的是person类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二：通过运行时类的实例对象，调用getClass()</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz2</span>  <span class="operator">=</span> p1.getClass();</span><br><span class="line">    System.out.println(clazz2);<span class="comment">//输出的是person类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式三：调用Class的静态方法：forName(String classPath)</span></span><br><span class="line">    Class clazz3=Class.forName(<span class="string">&quot;com.atguigu.java.Person&quot;</span>);</span><br><span class="line">    System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式四：使用类的加载器：ClassLoader</span></span><br><span class="line">    ClassLoader classLoader=RefilectionTest.class.getClassLoader();</span><br><span class="line">    Class clazz4=classLoader.loadClass(<span class="string">&quot;com.atguigu.java.Person&quot;</span>);</span><br><span class="line">    System.out.println(clazz4);</span><br></pre></td></tr></table></figure><h3 id="class实例对应的结构说明"><a href="#class实例对应的结构说明" class="headerlink" title="class实例对应的结构说明"></a>class实例对应的结构说明</h3><ol><li>class：<br> 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：接口</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class实例可以是哪些结构的说明    </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class;</span><br><span class="line">        Class&lt;ElementType&gt; c5 = ElementType.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> Override.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> <span class="type">int</span>.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c10</span> <span class="operator">=</span> a.getClass();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c11</span> <span class="operator">=</span> b.getClass();</span><br><span class="line">        <span class="comment">//只要元素类型与维度一样，就是同一个Class</span></span><br><span class="line">        System.out.println(c10==c11);</span><br></pre></td></tr></table></figure><hr><h1 id="理解类的加载过程"><a href="#理解类的加载过程" class="headerlink" title="理解类的加载过程"></a>理解类的加载过程</h1><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/reflection2.png" alt="reflection2"></p><h1 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与ClassLoader的理解</h1><h3 id="类加载器的作用："><a href="#类加载器的作用：" class="headerlink" title="类加载器的作用："></a>类加载器的作用：</h3><ul><li>类加载器的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</li><li>类缓存：标准的JavaSE类加载器可以按照要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象</li></ul><h3 id="ClassLoder："><a href="#ClassLoder：" class="headerlink" title="ClassLoder："></a>ClassLoder：</h3><p>类加载器的作用是用来把类（class）装载进内存的，JVM规范定义如下类似类的加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoderTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//对于自定义类，使用系统类加载器进行加载</span></span><br><span class="line">        ClassLoader classLoader=ClassLoderTest.class.getClassLoader();<span class="comment">//获取当前运行类的类加载器</span></span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        <span class="comment">//调用系统类加载器的getParent()：获取扩展类加载器</span></span><br><span class="line">        ClassLoader parent=classLoader.getParent();<span class="comment">//获取上一层的类加载器</span></span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        <span class="comment">//调用扩展类加载器的getParment()：无法获取引导类加载器</span></span><br><span class="line">        <span class="comment">//引导类加载器主要负责加载java的核心库类，无法加载自定义类</span></span><br><span class="line">        ClassLoader classLoader1=parent.getParent();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/reflection3.png" alt="reflection3"></p><h3 id="使用ClassLoader加载配置文件"><a href="#使用ClassLoader加载配置文件" class="headerlink" title="使用ClassLoader加载配置文件"></a>使用ClassLoader加载配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Properties：用来读取配置文件，Properties的特点就是键值都是String</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">//此时的文件默认在当前的module下</span></span><br><span class="line">    <span class="comment">//读取配置文件的方式一</span></span><br><span class="line">     <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\Documents\\java\\javaweb\\jdbc\\src\\jdbc.properties&quot;</span>);<span class="comment">//利用文件字节流读取配置文件</span></span><br><span class="line">     properties.load(fis);<span class="comment">//加载流的数据，然后生成数据集，数据集的键和值都为字符型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件的方式二</span></span><br><span class="line">    <span class="comment">//系统类加载器</span></span><br><span class="line">    <span class="comment">//配置文件默认识别为：当前module的src下</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoderTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);<span class="comment">//此运行时类(ClassLoderTest)调用系统类加载器，读取字节流,读取class目录下的jdbc.properties文件</span></span><br><span class="line">    properties.load(is);<span class="comment">//加载读取到的流的数据，然后生成数据集，数据集的键和值都为字符型</span></span><br><span class="line"></span><br><span class="line">    String user=properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    String password=properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(user+<span class="string">&quot;,&quot;</span>+password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建运行时类的实例化对象"><a href="#创建运行时类的实例化对象" class="headerlink" title="创建运行时类的实例化对象"></a>创建运行时类的实例化对象</h1><h3 id="通过反射创建对应的运行时类的对象"><a href="#通过反射创建对应的运行时类的对象" class="headerlink" title="通过反射创建对应的运行时类的对象"></a><strong>通过反射创建对应的运行时类的对象</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过反射创建对应的运行时类的对象</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewInstanceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;<span class="comment">//获取运行时类的实例</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newInstance()：调用此方法，创建对应的运行时类的对象，内部调用了运行时类的空参的构造器</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 要想此方法正常的创建运行时类的对象，要求</span></span><br><span class="line"><span class="comment">         * 1.运行时类必须提供空参的构造器</span></span><br><span class="line"><span class="comment">         * 2.空参的构造器的访问权限得够，通常，设置为public</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在javabean中要求提供一个public得空参构造器。原因：</span></span><br><span class="line"><span class="comment">         * 1.便于通过反射，创建运行时类得对象</span></span><br><span class="line"><span class="comment">         * 2.便于子类继承此运行时类时，默认调用super()，保证父类有此构造器</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span> <span class="operator">=</span> (Person) clazz.newInstance();<span class="comment">//相当于 Person p1 = new Person();中的p1对象，可以调用Person类中的属性和方法了</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        obj.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="举例体会反射的动态性"><a href="#举例体会反射的动态性" class="headerlink" title="举例体会反射的动态性"></a><strong>举例体会反射的动态性</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//体会反射的动态性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);<span class="comment">//0,1,2</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;com.atguigu.java.Person&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getInstance(classPath);<span class="comment">//随机创建一个classPath，然后创建不同的对象，体现了反射的动态性</span></span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建一个指定类的对象。</span></span><br><span class="line"><span class="comment">    classPath:指定类的全类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span>  Class.forName(classPath);</span><br><span class="line">       <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时，会对于内存中的运行时类，做出不同的判断来对此进行操作</p><hr><h1 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h1><h3 id="获取运行时类的属性结构与内部结构"><a href="#获取运行时类的属性结构与内部结构" class="headerlink" title="获取运行时类的属性结构与内部结构"></a><strong>获取运行时类的属性结构与内部结构</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;<span class="comment">//获取运行时类的实例,clazz代表其运行时类，显然这里的classzz不是运行时类的实例化对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> (Person) clazz.newInstance();<span class="comment">//这里才是运行时类的实例化对象,调用运行时类中的属性和方法</span></span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取属性结构</span></span><br><span class="line">        <span class="comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;<span class="comment">//增强型for循环</span></span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredFields()：获取当前运行时类的所有属性。(不包含父类中声明的属性)</span></span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : declaredFields) &#123;<span class="comment">//增强型for循环</span></span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//权限修饰符 数据类型    变量名</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : declaredFields) &#123;<span class="comment">//增强型for循环</span></span><br><span class="line">            System.out.println(f);</span><br><span class="line">            <span class="comment">//1.权限修饰符</span></span><br><span class="line">            <span class="type">int</span> modifiers=f.getModifiers();</span><br><span class="line">            System.out.println(modifiers);<span class="comment">//输出对应的修饰符代表的int类型数值</span></span><br><span class="line">            System.out.println(Modifier.toString(modifiers));<span class="comment">//输出java.lang包下的对象可以直接调用其中的toString方法去将其转换对应的修饰符</span></span><br><span class="line">            <span class="comment">//2.数据类型</span></span><br><span class="line">            Class type=f.getType();<span class="comment">//这里是类调用方法</span></span><br><span class="line">            System.out.println(type+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="comment">//3.变量名,其中私有，公有，默认的属性名都可以看到</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> f.getName();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="获取运行时类的方法结构"><a href="#获取运行时类的方法结构" class="headerlink" title="获取运行时类的方法结构"></a><strong>获取运行时类的方法结构</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取运行时类的方法结构</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getMethods()：获取当前运行时类及其所有父类中声明为public权限的方法</span></span><br><span class="line">        Method[] method =clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m:method)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclareMethods():获取当前运行时类中声明的所有方法(不包括父类中声明的方法)</span></span><br><span class="line">        Method[] method2=clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method1:method2)&#123;</span><br><span class="line">            System.out.println(method1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取方法的权限修饰符，返回值类型，方法名-参数类型1-形参名1，……-throws"><a href="#获取方法的权限修饰符，返回值类型，方法名-参数类型1-形参名1，……-throws" class="headerlink" title="获取方法的权限修饰符，返回值类型，方法名(参数类型1 形参名1，……)throws"></a><strong>获取方法的权限修饰符，返回值类型，方法名(参数类型1 形参名1，……)throws</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Xxxx</span></span><br><span class="line"><span class="comment">    权限修饰符  返回值类型  方法名(参数类型1 形参名1,...) throws XxxException&#123;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">     Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">     <span class="keyword">for</span>(Method m : declaredMethods)&#123;</span><br><span class="line">         <span class="comment">//1.获取方法声明的注解</span></span><br><span class="line">         Annotation[] annos = m.getAnnotations();</span><br><span class="line">         <span class="keyword">for</span>(Annotation a : annos)&#123;</span><br><span class="line">             System.out.println(a);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//2.权限修饰符</span></span><br><span class="line">         System.out.print(Modifier.toString(m.getModifiers()) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//3.返回值类型</span></span><br><span class="line">         System.out.print(m.getReturnType().getName() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//4.方法名</span></span><br><span class="line">         System.out.print(m.getName());</span><br><span class="line">         System.out.print(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">         <span class="comment">//5.形参列表</span></span><br><span class="line">         Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line">         <span class="keyword">if</span>(!(parameterTypes == <span class="literal">null</span> &amp;&amp; parameterTypes.length == <span class="number">0</span>))&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; parameterTypes.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">if</span>(i == parameterTypes.length - <span class="number">1</span>)&#123;</span><br><span class="line">                     System.out.print(parameterTypes[i].getName() + <span class="string">&quot; args_&quot;</span> + i);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 System.out.print(parameterTypes[i].getName() + <span class="string">&quot; args_&quot;</span> + i + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         System.out.print(<span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//6.抛出的异常</span></span><br><span class="line">         Class[] exceptionTypes = m.getExceptionTypes();</span><br><span class="line">         <span class="keyword">if</span>(exceptionTypes.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">             System.out.print(<span class="string">&quot;throws &quot;</span>);</span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; exceptionTypes.length;i++)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(i == exceptionTypes.length - <span class="number">1</span>)&#123;</span><br><span class="line">                     System.out.print(exceptionTypes[i].getName());</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 System.out.print(exceptionTypes[i].getName() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         System.out.println();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="获取运行时类的构造器结构"><a href="#获取运行时类的构造器结构" class="headerlink" title="获取运行时类的构造器结构"></a><strong>获取运行时类的构造器结构</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *获取构造器结构</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtherTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="comment">//getConstructors()：获取当前运行时类中声明为public的构造器</span></span><br><span class="line">        Constructor[] constructors1 =clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c:constructors1)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredConstructors()：获取当前运行时类的所有构造器</span></span><br><span class="line">        Constructor[] constructors2=clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor:constructors2)&#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取运行时类的父类及父类的泛型"><a href="#获取运行时类的父类及父类的泛型" class="headerlink" title="获取运行时类的父类及父类的泛型"></a><strong>获取运行时类的父类及父类的泛型</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtherTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取运行时类的父类</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Class superclass=clazz.getSuperclass();</span><br><span class="line">        System.out.println(superclass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取运行时类的带泛型的父类</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">superclass</span> <span class="operator">=</span>clazz.getGenericSuperclass();</span><br><span class="line">        System.out.println(superclass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取运行时类的带泛型的父类的泛型</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">superclass</span> <span class="operator">=</span>clazz.getGenericSuperclass();</span><br><span class="line">        <span class="type">ParameterizedType</span> <span class="variable">parameterizedType</span> <span class="operator">=</span> (ParameterizedType)superclass;</span><br><span class="line">        <span class="comment">//获取泛型类型</span></span><br><span class="line">        Type[] actualTypeArguments= parameterizedType.getActualTypeArguments();</span><br><span class="line">        System.out.println(actualTypeArguments[<span class="number">0</span>].getTypeName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取运行时类的接口，所在包，注解等"><a href="#获取运行时类的接口，所在包，注解等" class="headerlink" title="获取运行时类的接口，所在包，注解等"></a><strong>获取运行时类的接口，所在包，注解等</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取运行时类的接口</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Class[] classinter=clazz.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class c :classinter)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">        <span class="comment">//获取运行时类的父类实现的接口</span></span><br><span class="line">        Class[] interfaces1=clazz.getSuperclass().getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class c1:interfaces1)&#123;</span><br><span class="line">            System.out.println(c1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取运行时类所在的包</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Package pack=clazz.getPackage();</span><br><span class="line">        System.out.println(pack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取运行时类声明的注解</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Annotation[] clazzAnnotations =clazz.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation a:clazzAnnotations)&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="调用运行时类的指定结构"><a href="#调用运行时类的指定结构" class="headerlink" title="调用运行时类的指定结构"></a>调用运行时类的指定结构</h1><h3 id="调用运行时类中的指定属性"><a href="#调用运行时类中的指定属性" class="headerlink" title="调用运行时类中的指定属性"></a><strong>调用运行时类中的指定属性</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *调用运行时类中指定的结构：属性、方法、构造器</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testField</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建运行时类的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) clazz.newInstance();<span class="comment">//创建Person实例化对象p</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的属性：要求运行时类中属性声明为public</span></span><br><span class="line">        <span class="comment">//通常不采用</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span>clazz.getField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置当前属性的值</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * set():参数1：指明哪个对象的属性  参数2：将此属性值设置为多少</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        id.set(p,<span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取当前属性的值</span></span><br><span class="line"><span class="comment">         * get()：参数1：获取哪个对象的当前属性值</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">int</span> pId=(<span class="type">int</span>)id.get(p);</span><br><span class="line">        System.out.println(pId);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*如何操作运行时类中的指定的属性 --需要掌握</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testField1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建运行时类的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) clazz.newInstance();<span class="comment">//创建Person实例化对象p</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.getDeclaredField(String fieldName)：获取运行时类中指定变量名的属性</span></span><br><span class="line">        Field name=clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证当前属性是可访问的</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置、获取指定对象的此属性值</span></span><br><span class="line">        name.set(p,<span class="string">&quot;Tom&quot;</span>);<span class="comment">//相当于p.setName(值)</span></span><br><span class="line">        String pName=(String) name.get(p);</span><br><span class="line">        System.out.println(pName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用运行时类中的指定方法"><a href="#调用运行时类中的指定方法" class="headerlink" title="调用运行时类中的指定方法"></a><strong>调用运行时类中的指定方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如何操作运行时类中的指定方法 -- 需要掌握</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建运行时类的实例化对象</span></span><br><span class="line">        Person p=(Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**1.获取指定的某个方法</span></span><br><span class="line"><span class="comment">        *getDeclaredMethod():参数1：指明获取的方法的名称 参数2：指明获取的方法的形参列表</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span>clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>,String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证当前方法是可访问的</span></span><br><span class="line">        show.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.调用invoke()方法</span></span><br><span class="line"><span class="comment">         * invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参</span></span><br><span class="line"><span class="comment">         * invoke()的返回值即为对应类中调用的方法的返回值</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        show.invoke(p,<span class="string">&quot;CHN&quot;</span>);<span class="comment">//相当于p.show(&quot;CHN&quot;)</span></span><br><span class="line">        Object returnValue=show.invoke(p,<span class="string">&quot;CHN&quot;</span>);</span><br><span class="line">        System.out.println(returnValue);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***************如何调用静态方法****************&quot;</span>);</span><br><span class="line">        <span class="comment">//private static void showDesc,Person类中封装的静态方法</span></span><br><span class="line">        Method showDesc=clazz.getDeclaredMethod(<span class="string">&quot;showDesc&quot;</span>);</span><br><span class="line">        showDesc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        showDesc.invoke(Person.class.newInstance());</span><br><span class="line">        <span class="comment">//如果调用的运行时类中的方法没有返回值，则此invoke()返回null</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnVal</span> <span class="operator">=</span> showDesc.invoke(Person.class.newInstance());</span><br><span class="line">        System.out.println(returnVal);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用运行时类的指定构造器"><a href="#调用运行时类的指定构造器" class="headerlink" title="调用运行时类的指定构造器"></a><strong>调用运行时类的指定构造器</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如何调用运行时类中的指定的构造器</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConstructor</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.获取指定的构造器</span></span><br><span class="line"><span class="comment">         * getDeclaredConstructor()：参数：指明构造器的参数列表</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span>clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证此构造器是可访问的</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用此构造器创建运行时类带参的实例化对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> (Person) constructor.newInstance(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(per);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="代理设计模式的原理"><a href="#代理设计模式的原理" class="headerlink" title="代理设计模式的原理"></a>代理设计模式的原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用一个代理将对象包装起来，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">之前为大家讲解过代理机制的操作，属于静态代理，特征是代理类和目标对象的类都是在编译期间确定下来的，不利于程序的扩展。同时，每一代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。最好可以通过一个代理类完成全部的代理功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态代理是指客户通过代理类来调用其他对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象</span></span><br><span class="line"><span class="comment">动态代理使用场合：调式，远程方法调用</span></span><br><span class="line"><span class="comment">动态代理相比于静态代理的优点</span></span><br><span class="line"><span class="comment">抽象接口声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用JDBC获取数据库连接</title>
      <link href="/2022/07/11/%E5%88%A9%E7%94%A8JDBC%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
      <url>/2022/07/11/%E5%88%A9%E7%94%A8JDBC%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h1><h2 id="2-1要素一-Driver接口的实现类"><a href="#2-1要素一-Driver接口的实现类" class="headerlink" title="2.1要素一:Driver接口的实现类"></a>2.1要素一:Driver接口的实现类</h2><h3 id="2-1-1Driver接口介绍"><a href="#2-1-1Driver接口介绍" class="headerlink" title="2.1.1Driver接口介绍"></a>2.1.1Driver接口介绍</h3><ul><li>java.sql.Driver接口是所有JDBC驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现，也就是说要调用jdbc的jar，必须需要实现driver接口</li><li>在程序中不需要直接去访问实现了Driver接口的类，而是由驱动程序管理类(java.sql.DriverManager)去调用这些Driver实现<br>  1.Oracle的驱动：oracle.jdbc.driver.OracleDriver<br>  2.mySql的驱动：com.mysql.jdbc.Driver</li></ul><span id="more"></span><p>将jdbc的jar包导入工程</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jdbc6.png" alt="jdbc6"></p><p>注意：如果是Dynamic Web Project（动态的web项目），则是把驱动jar放到WEB目录下的WEB-INF目录下中lib目录中即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jdbc7.png" alt="jdbc7"></p><h3 id="2-1-2加载与注册JDBC驱动"><a href="#2-1-2加载与注册JDBC驱动" class="headerlink" title="2.1.2加载与注册JDBC驱动"></a>2.1.2加载与注册JDBC驱动</h3><ul><li>加载驱动：加载jdbc驱动(jdbc的jar包)需要调用Class类的静态forName()，向其传递要加载的JDBC驱动的类名<br>  class.forName(“com.mysql.jdbc.Driver”)</li><li>注册驱动：DriverManager类是驱动程序类，负责管理驱动程序<br>  1.使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动<br>  2.通常不用显示调用DriverManager类的registerDriver()方法来注册驱动程序类的实例，因为Driver接口的驱动程序类都包含了静态代码块中，会调用DriverManager.registerDriver()方法来注册自身的一个实例</li></ul><h2 id="2-2要素二-URL"><a href="#2-2要素二-URL" class="headerlink" title="2.2要素二:URL"></a>2.2要素二:URL</h2><p>JDBC URL用于标识一个被注册的驱动程序，驱动程序管理器通过这个URL选择正确的驱动程序，从而建立到数据库的连接</p><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔</p><ul><li>jdbc:子协议:子名称</li><li>协议:JDBC URL中的协议总是jdbc</li><li>子协议:子协议用于标识一个数据库或驱动程序</li><li>子名称:一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了定位数据库，提供足够的信息，包含主机名(对应服务端的ip地址)，端口号，数据库名</li><li>举例：<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jdbc8.png" alt="jdbc8"></li></ul><h2 id="2-3要素三-用户名和密码"><a href="#2-3要素三-用户名和密码" class="headerlink" title="2.3要素三:用户名和密码"></a>2.3要素三:用户名和密码</h2><ul><li>user，password可以用”属性名&#x3D;属性值”方式告诉数据库</li><li>可以调用DriverManager类的getConnection()方法建立到数据库的连接</li></ul><h2 id="2-4数据库连接方式"><a href="#2-4数据库连接方式" class="headerlink" title="2.4数据库连接方式"></a>2.4数据库连接方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testConnection1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式五(final版本),将数据库连接需要的4个基本信息声明在配置文件中,通过读取配置文件的方式,获取连接</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">getconnection5</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.读取和加载class目录下的配置文件(类加载器)</span></span><br><span class="line">         <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span>testConnection1.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);<span class="comment">//调用系统类加载器读取字节流,读取class目录下的jdbc.properties文件为字节</span></span><br><span class="line">         <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();<span class="comment">//Properties 类表示了一个持久的属性集。Properties 可保存在流中或从流中加载的数据。属性列表中每个键及其对应值都是一个字符串。</span></span><br><span class="line">         properties.load(is);<span class="comment">//加载读取的流文件,此时对象中就拥有数据集</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);<span class="comment">//user为键,获取其值,封装在字符串类型对象中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);<span class="comment">//f</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中对第三步的加载驱动的说明，Driver.class在背后做了手脚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.加载驱动</span></span><br><span class="line">Class.forName(driverClass);<span class="comment">//获取到接口实现类的此运行时类</span></span><br><span class="line"><span class="comment">//省略了如下的操作</span></span><br><span class="line"><span class="comment">//创建此运行时类的实例</span></span><br><span class="line"><span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) clazz.newInstance();</span><br><span class="line"><span class="comment">//注册驱动</span></span><br><span class="line">DriverManager.registerDriver(driver)</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*为什么只需要写前面的一句话就可以加载数据库的驱动</span></span><br><span class="line"><span class="comment">因为在Driver.class(Driver实现类)中写了静态方法，当加载驱动的时候，静态方法随着类的加载而加载自动帮我们创建实例然后注册驱动</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mysql.cj.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver//指明驱动类型</span></span><br></pre></td></tr></table></figure><p>说明：使用配置文件的方式保存配置信息,在代码中加载配置文件</p><p>使用配置文件的好处</p><ol><li>实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码</li><li>如果修改了配置信息，省去重新编译的过程</li></ol><h2 id="2-5补充：加载properties文件的两种方式"><a href="#2-5补充：加载properties文件的两种方式" class="headerlink" title="2.5补充：加载properties文件的两种方式"></a>2.5补充：加载properties文件的两种方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Properties对象</span></span><br><span class="line">Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();<span class="comment">//Properties 类表示了一个持久的属性集。Properties 可保存在流中或从流中加载的数据。属性列表中每个键及其对应值都是一个字符串。其中的load()方法对起字节流进行加载</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//用字节读取流加载</span></span><br><span class="line"><span class="number">1</span>、获取class目录下的配置文件</span><br><span class="line"> <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;re.properties&quot;</span>);</span><br><span class="line"> properties.load(is);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>、<span class="comment">//直接用文件读取流加载</span></span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\re.properties&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery选择器</title>
      <link href="/2022/05/31/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2022/05/31/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h1><h2 id="web开发的两个要素"><a href="#web开发的两个要素" class="headerlink" title="web开发的两个要素"></a>web开发的两个要素</h2><ul><li>在使用HTML开发页面时，有两个基本点</li><li>选择HTML页面上的哪些元素</li><li>在这些元素上做哪些动作</li></ul><p>在JavaScript中有document.getElementById()等方式获取元素，但这种方式太古老。麻烦、局限</p><span id="more"></span><h2 id="jQuery选择器-1"><a href="#jQuery选择器-1" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><ul><li>jQuery选择器用于选择器用于选中需要操作的页面元素</li><li>语法1：jQuery（选择器表达式）</li><li>语法2：$（选择器表达式）</li></ul><p>jQuery选择器是一种更加快捷高效的方式：</p><p>上面的语法1和语法2是等价的，当在页面中引入jQuery文件后，使用jQuery关键字和$是完全等价的；符合需求，高效准确地选择器表达式是关键</p><h2 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h2><ul><li><p>基本选择器是jQuery最基础也是最常用的选择器表达式</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“#id”)</td><td>ID选择器，指定id元素的对象</td></tr><tr><td>$(“标签”)</td><td>元素选择器，选择指定标签名的选择器（例如a标签等）</td></tr><tr><td>$(“.class”)</td><td>类选择器，选中拥有指定的CSS类的元素</td></tr><tr><td>$(“S1,S2,SN”)</td><td>组合选择器，对元素进行组合</td></tr></tbody></table></li></ul><p>id选择器和类选择器最常用：</p><p>标签选择器有点提示页面元素间的耦合性，所以可能用的也不多；</p><h3 id="jQuery基本选择器的范例"><a href="#jQuery基本选择器的范例" class="headerlink" title="jQuery基本选择器的范例"></a>jQuery基本选择器的范例</h3><p>我们使用前面做过的jQuery的简单案例来试一下组合选择器</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery3.png" alt="jquery3"></p><h2 id="jQuery层叠选择器"><a href="#jQuery层叠选择器" class="headerlink" title="jQuery层叠选择器"></a>jQuery层叠选择器</h2><ul><li><p>层叠选择器睡觉哦根据元素的位置关系来获取元素的选择器表达式<br>  选中某一个节点的所有后代节点，后代节点包括子节点、子节点的子节点</p></li><li><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“ancestor descendant”)</td><td>后代选择器</td></tr><tr><td>$(“ancestor &gt; descendant”)</td><td>子选择器</td></tr><tr><td>$(“ancestor ~ descendant”)</td><td>兄弟选择器</td></tr></tbody></table></li></ul><h3 id="jQuery后代选择器示例1"><a href="#jQuery后代选择器示例1" class="headerlink" title="jQuery后代选择器示例1"></a>jQuery后代选择器示例1</h3><p>选择a标签，这个a标签必须是li标签的后代标签：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery4.png" alt="jquery4"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jsquery5.png" alt="jquery5"></p><h3 id="jQuery后代选择器示例2："><a href="#jQuery后代选择器示例2：" class="headerlink" title="jQuery后代选择器示例2："></a>jQuery后代选择器示例2：</h3><p>即使a标签不是div标签的直接子标签，但是后代选择器依旧能够选中</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery6.png" alt="jquery6"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery7.png" alt="jquery7"></p><h3 id="jQuery后代选择器示例3"><a href="#jQuery后代选择器示例3" class="headerlink" title="jQuery后代选择器示例3"></a>jQuery后代选择器示例3</h3><p>span后的a标签</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery8.png" alt="jquery8"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery9.png" alt="jquery9"></p><h3 id="jQuery子选择器示例1"><a href="#jQuery子选择器示例1" class="headerlink" title="jQuery子选择器示例1"></a>jQuery子选择器示例1</h3><p>必须是直接子节点才会选中；</p><p>例如在这个jQuery简单案例中：a标签必须是li标签的直接子标签才会被选中</p><p>在这里是只有li标签后的a标签被选中然后jquery，span后的a标签不会被选中</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery10.png" alt="jquery10"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery11.png" alt="jquery11"></p><h3 id="jQuery兄弟选择器示例1"><a href="#jQuery兄弟选择器示例1" class="headerlink" title="jQuery兄弟选择器示例1"></a>jQuery兄弟选择器示例1</h3><p>选择p标签，这个p标签需要是span标签的兄弟标签，是平级节点；</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery12.png" alt="jquery12"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery13.png" alt="jquery13"></p><h2 id="jQuery属性选择器"><a href="#jQuery属性选择器" class="headerlink" title="jQuery属性选择器"></a>jQuery属性选择器</h2><ul><li><p>属性选择器是根据元素的属性值来选择元素的选择器表达式</p></li><li><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“selector[attribute&#x3D;value]”)</td><td>选中的属性值完全等于具体值得组件</td></tr><tr><td>$(“selector[attribute^&#x3D;’value’]”)</td><td>选中得属性值以某值开头得组件</td></tr><tr><td>$(“selector[attribute$&#x3D;’value’]”)</td><td>选中属性值以某值结尾得组件</td></tr><tr><td>$(“selector[attribute*&#x3D;’value’]”)</td><td>选中属性值包含某值得组件</td></tr></tbody></table></li></ul><p>比如当前得需求是：获取超链接地址为”网易”的元素</p><p>属性选择器中，selector是前面讲到的选择器表达式，其他选择器后面跟着[]，[]中的是某个属性的属性值，相当于是再原有选择器的基础上二次筛选</p><h3 id="jQuery属性选择器示例：完全匹配"><a href="#jQuery属性选择器示例：完全匹配" class="headerlink" title="jQuery属性选择器示例：完全匹配"></a>jQuery属性选择器示例：完全匹配</h3><p>完全匹配：a[href&#x3D;”<a href="http://www.baidu.com"]:是选中a标签，这个a标签的href属性值是"http://www.baidu.com"；">http://www.baidu.com&quot;]:是选中a标签，这个a标签的href属性值是&quot;http://www.baidu.com&quot;；</a></p><p>所以这里只有百度的标签是高亮的</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery14.png" alt="jquery14"></p><h3 id="jQuery属性选择器示例2：开头匹配"><a href="#jQuery属性选择器示例2：开头匹配" class="headerlink" title="jQuery属性选择器示例2：开头匹配"></a>jQuery属性选择器示例2：开头匹配</h3><p>拿到所有邮箱的超链接：a[href^&#x3D;’<a href="http://mail']">http://mail&#39;]</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery15.png" alt="jquery15"></p><h3 id="jQuery属性选择器示例3：结尾匹配"><a href="#jQuery属性选择器示例3：结尾匹配" class="headerlink" title="jQuery属性选择器示例3：结尾匹配"></a>jQuery属性选择器示例3：结尾匹配</h3><p>拿到所有中国名校的超链接：a[href$&#x3D;’edu.cn’]</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery16.png" alt="jquery16"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery17.png" alt="jquery17"></p><h3 id="jQuery属性选择器示例4：包含匹配"><a href="#jQuery属性选择器示例4：包含匹配" class="headerlink" title="jQuery属性选择器示例4：包含匹配"></a>jQuery属性选择器示例4：包含匹配</h3><p>拿到所有包含”edu.cn”字段的标签属性并增加css样式：a[href*&#x3D;’edu.cn’]</p><p><img src= "/img/loading.gif" data-lazy-src="D:\Documents\typora_photo\jquery16.png" alt="jquery16"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery18.png" alt="jquery18"></p><h3 id="jQuery属性选择器说明"><a href="#jQuery属性选择器说明" class="headerlink" title="jQuery属性选择器说明"></a>jQuery属性选择器说明</h3><p>说明1：属性选择器中，属性可以是其他任何属性不止只有上面的a标签可以用，页面中的input属性也是可以用的：input[type&#x3D;’text’];这个意思是选择input标签，且器type属性为text的元素</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery19.png" alt="jquery19"></p><p>说明2：如上input[type&#x3D;’text’];为什么选择左边的那个文本框，而不是选择右边的文本框呢？这是因为，属性选择器明确书写了某个属性的元素：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery20.png" alt="jquery20"></p><p>说明3：如上input[type&#x3D;”text”];形如这个，其需要用单引号的；</p><p>很显然是因为：$(“input[type&#x3D;”text]”).addClass(“highlight”);所以需要使用单引号</p><h2 id="jQuery位置选择器"><a href="#jQuery位置选择器" class="headerlink" title="jQuery位置选择器"></a>jQuery位置选择器</h2><ul><li><p>位置选择器是指通过位置获取指定的元素，例如”获取第三个元素”</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“selector:first”)</td><td>获取第一个元素</td></tr><tr><td>$(“selector:last”)</td><td>获取最后一个元素</td></tr><tr><td>$(“selector:even”)</td><td>获取偶数位置的元素(从0开始)</td></tr><tr><td>$(“selector:odd”)</td><td>获取奇数位置的元素(从0开始)</td></tr><tr><td>$(“selector:eq(n)”)</td><td>获取指定位置的元素(从0凯斯)</td></tr></tbody></table></li></ul><h3 id="jQuery位置选择器示例1：获取第一个元素"><a href="#jQuery位置选择器示例1：获取第一个元素" class="headerlink" title="jQuery位置选择器示例1：获取第一个元素"></a>jQuery位置选择器示例1：获取第一个元素</h3><p>获取class&#x3D;”myclass”的第一个元素：.myclass:first</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery21.png" alt="jquery21"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery22.png" alt="jquery22"></p><h2 id="jQuery表单选择器"><a href="#jQuery表单选择器" class="headerlink" title="jQuery表单选择器"></a>jQuery表单选择器</h2><ul><li><p>表单选择器是获取表单元素的简化形式，例如：获取所有的文本框</p></li><li><p>之所以叫表单选择器，是因为这个选择器是直接针对表单中的元素进行选择的</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“selector:input”)</td><td>所有表单输入的集合元素</td></tr><tr><td>$(“slector:text”)</td><td>获取表单汇总文本框</td></tr><tr><td>$(“selector:password”)</td><td>获取表单中密码框</td></tr><tr><td>$(“welector:submit”)</td><td>获取提交的按钮</td></tr><tr><td>$(“selecrror”)</td><td>获取重置的按钮</td></tr><tr><td>……</td><td></td></tr></tbody></table></li></ul><h3 id="jQuery表单选择器示例1-获取表单中输入框中的值"><a href="#jQuery表单选择器示例1-获取表单中输入框中的值" class="headerlink" title="jQuery表单选择器示例1:获取表单中输入框中的值"></a>jQuery表单选择器示例1:获取表单中输入框中的值</h3><p>:input是选择页面中的所有输入框中的值</p><p>​                               <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery23.png" alt="jquery23"></p><p>​                                             </p><h3 id="jQuery表单选择器示例2：获取表单汇总文本框"><a href="#jQuery表单选择器示例2：获取表单汇总文本框" class="headerlink" title="jQuery表单选择器示例2：获取表单汇总文本框"></a>jQuery表单选择器示例2：获取表单汇总文本框</h3><p>​                                                                                    <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery24.png" alt="jquery24"></p><p>​                                                             <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery25.png" alt="jquery25"></p><h3 id="jQuery表单选择器总结"><a href="#jQuery表单选择器总结" class="headerlink" title="jQuery表单选择器总结"></a>jQuery表单选择器总结</h3><p>(1):input选取所有input、textarea、select和button元素-集合元素；</p><p>(2):text选择所有单行文本框，即type&#x3D;text-集合元素；</p><p>(3):password选择所有密码框，即type&#x3D;password-集合元素；</p><p>(4):radio选择所有单选框，即type&#x3D;radio-集合元素；</p><p>(5):checkbox选择所有复选框，即type&#x3D;checkbox-集合元素；</p><p>(6):submit选取所有提交按钮，即type&#x3D;submit-集合元素；</p><p>(7):reset选取所有重置按钮，即type&#x3D;reset-集合元素；</p><p>(8):image选取所有图像按钮，即type&#x3D;image-集合元素；</p><p>(9):button选择所有普通按钮，即button元素-集合元素；</p><p>(10):file选择所有文件按钮，即type&#x3D;file-集合元素；</p><p>(11):hidden选择所有不可见字段，即 type&#x3D;hidden-集合元素；</p><h2 id="标签选择器和表单选择器的区别"><a href="#标签选择器和表单选择器的区别" class="headerlink" title="标签选择器和表单选择器的区别"></a>标签选择器和表单选择器的区别</h2><p>经过测试：如果使用input标签选择器时候，其会选中所有的input标签，不是input的标签不会被选中；即使标签选择器很严谨，也很明确；使用：input表单选择器的时候，会选取所有input、textarea、select和button元素；即其范围会大一些</p><p>所以目前可以暂时认为：（1）标签选择器和表单选择器作用基本类似，但在某些情况下。表单选择器可能范围更大一些；（2）感觉标签选择器更加明确，在实际业务中，当然更倾向标签选择器；</p><h3 id="不同选择器的可以组合使用"><a href="#不同选择器的可以组合使用" class="headerlink" title="不同选择器的可以组合使用"></a>不同选择器的可以组合使用</h3><p>尤其是其他选择器和位置选择器的组合，以应对某些特别的需求</p><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>如：:input:last先使用表单选择器选中input，然后通过位置选择器二次筛选，选中最后一个</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery26.png" alt="jquery26"></p><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>li a:last；先使用层叠选择器选中li标签的后代a标签，然后选择最后一个</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jquery27.png" alt="jquery27"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery对Ajax的支持</title>
      <link href="/2022/05/26/jQuery%E5%AF%B9Ajax%E7%9A%84%E6%94%AF%E6%8C%81/"/>
      <url>/2022/05/26/jQuery%E5%AF%B9Ajax%E7%9A%84%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>已经知道，JavaScript是一种浏览器脚本语言，Ajax是一种内嵌到浏览器中的一种技术</p><p>jQuery是一个以JavaScript为基础的plugin，即jQuery可以简化JavaScript开发；jQuery也可以简化Ajax的开发</p><p>Ajax的流程包括创建XmlHttpRequest对象，发送Ajax请求，处理服务器响应三个步骤；比较麻烦；jQuery也提供了对Ajax的支持；在jQuery中对Ajax进行了大幅度的简化和封装</p><span id="more"></span><h2 id="jQuery对Ajax的支持"><a href="#jQuery对Ajax的支持" class="headerlink" title="jQuery对Ajax的支持"></a>jQuery对Ajax的支持</h2><ul><li><p>jQuery对Ajax进行封装，提供了$.ajax()方法</p></li><li><p>语法：$.ajax(options)；即在引入jQuery文件后，在html文件的<script></script>标签中，就可以使用$.ajax(方法中书写一个json表达式，使用Ajax)之所以这么简单，背后是jQuery的简化的”plugin”</p></li><li><p>在设计之初，Ajax是使用XML作为对象或数据传输的表达方式的，这也是Ajax最后一个x的含义；但后来发现利用JSON来进行数据传输更加简单，目前基本使用JSON进行数据交互</p></li><li><table><thead><tr><th>json常用设置项</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>发送请求地址</td></tr><tr><td>type</td><td>请求的类型 get | post</td></tr><tr><td>data</td><td>向服务器传递的参数</td></tr><tr><td>dataType</td><td>服务器响应的数据类型：text | json | xml | html | jsonp | script</td></tr><tr><td>success</td><td>接受响应时的处理函数</td></tr><tr><td>error</td><td>请求失败时的处理函数</td></tr></tbody></table><p>  说明：</p><p>  success：在把响应数据接受到了以后，会使用success函数进行数据处理</p><p>  error：如果请求失败，或者服务器出现问题的时候，会使用error函数来对请求视频进行处理</p><p>  jsonp：用来解决跨域访问问题，因为在实际开发中，浏览器有一种内置安全机制，这种机制如禁止从<a href="http://www.abc.com向www.bcd.com发送ajax请求,因为其域名不同;为了解决上述的问题,jquery提供了一种jsonp的传输方式,其利用script块跨域的特性,解决了数据跨域传输的问题,简单来说如果使用ajax的时候,涉及到了再两个不同域名应用进行数据交换,就需要使用jsonp了/">www.abc.com向www.bcd.com发送Ajax请求，因为其域名不同；为了解决上述的问题，jQuery提供了一种jsonp的传输方式，其利用script块跨域的特性，解决了数据跨域传输的问题，简单来说如果使用Ajax的时候，涉及到了再两个不同域名应用进行数据交换，就需要使用jsonp了</a></p></li></ul><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>为了使用jQuery需要先引入jQuery文件导入</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jajax1.png" alt="jajax1"></p><p>NewListServlet类：稍微修改一下</p><p>(1)后台处理后的数据向前台传的时候，需要转成JSON字符串；这需要引入fastjson的jar包</p><p>(2)这个Servlet并没有主动重定向至news.html；而是在这儿默默的等待，等待news.html的Ajax的XmlHttpServlet主动去请求访问这个servlet</p><p>(3)这个Servlet通过，response.getWritwe().println(newsJsonStr);将JSON字符串回显到html中</p><p>(4)为了演示$.ajax()中的data传递参数，servlet中设置了if()else if()判断语句；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;NewsListServlet&quot;, value = &quot;/news_list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewsListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;t&quot;</span>);<span class="comment">//获取发送请求中的参数t(key)</span></span><br><span class="line">        List&lt;News&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;News&gt;();<span class="comment">//创建集合对象list</span></span><br><span class="line">        <span class="keyword">if</span>(type !=<span class="literal">null</span> &amp;&amp; type.equals(<span class="string">&quot;tiobe&quot;</span>)) &#123;<span class="comment">//如果有带参且参数的值匹配字符串tiobe，增加下列的集合</span></span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题1&quot;</span>, <span class="string">&quot;2022-1-1&quot;</span>, <span class="string">&quot;TIOBE&quot;</span>, <span class="string">&quot;内容1&quot;</span>));<span class="comment">//在集合中增加内容</span></span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题2&quot;</span>, <span class="string">&quot;2022-1-2&quot;</span>, <span class="string">&quot;TIOBE&quot;</span>, <span class="string">&quot;内容2&quot;</span>));</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题3&quot;</span>, <span class="string">&quot;2022-1-3&quot;</span>, <span class="string">&quot;TIOBE&quot;</span>, <span class="string">&quot;内容3&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="literal">null</span> || type.equals(<span class="string">&quot;pypl&quot;</span>)) &#123;<span class="comment">//如果上面的不匹配，不带参数或者带参的值为pypl，增加下列集合中的内容</span></span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题1&quot;</span>,<span class="string">&quot;2021-1-1&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容1&quot;</span>));</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题2&quot;</span>,<span class="string">&quot;2021-1-2&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容2&quot;</span>));</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题3&quot;</span>,<span class="string">&quot;2021-1-3&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在Servlet处理后，对外进行字符串序列化的时候，一律将其转化为JSON：通过JSON，可以对数据进行有效的描述</span></span><br><span class="line">        <span class="comment">//然后在前端的html中，再通过javaScript自带的JSON处理方式，将从这儿发送过去的数据进行解析</span></span><br><span class="line">        <span class="comment">//将集合对象list转成JSON需要，引入fastjson包，可以这样想回显是需要字符串的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newsjsonstr</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">        System.out.println(newsjsonstr);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);<span class="comment">//json字符串中包含中文需要设置编码</span></span><br><span class="line">        response.getWriter().println(newsjsonstr);<span class="comment">//回显从list集合对象序列化成json字符串,回显到html中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新增jquery_news.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Inset title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="comment">//创建一个页面就绪函数，其用途是在页面加载完毕后，执行这个function里面的代码</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;url&quot;</span>:<span class="string">&quot;/ajax/news_list&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;type&quot;</span>:<span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;data&quot;</span>:<span class="string">&quot;t=pypl&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;dataType&quot;</span>:<span class="string">&quot;json&quot;</span>,<span class="comment">//服务器响应的数据类型为json，也就说这里将回显的JSON字符串转变为JOSN对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;success&quot;</span>:<span class="keyword">function</span> (<span class="params">json</span>)&#123;<span class="comment">//这里的json只是一个变量，用来接受服务器返回的数据,也就是说这里接受到从JSON字符串转变的JSON对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//append()作用可以将append()中的html代码追加到div中</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#container&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;h1&gt;&quot;</span>+json[i].<span class="property">title</span>+<span class="string">&quot;&lt;/h1&gt;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：在div中输出JSON对象调用的title属性，在控制台中输出接受服务器的数据也就是JSON对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jajax2.png" alt="jajax2"></p><h2 id="ajax-中的JSON表达式添加error项"><a href="#ajax-中的JSON表达式添加error项" class="headerlink" title="$.ajax({})中的JSON表达式添加error项"></a>$.ajax({})中的JSON表达式添加error项</h2><p>jquery_news.html文件中的$.ajax({})的JSON表达式添加error项。为了演示执行error内容的效果，，故意将JSON表达式中的type改成了post，而Servlet中是get方式，所以会报错，会执行error的部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Inset title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="comment">//创建一个页面就绪函数，其用途是在页面加载完毕后，执行这个function里面的代码</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;url&quot;</span>:<span class="string">&quot;/ajax/news_list&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;type&quot;</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;data&quot;</span>:<span class="string">&quot;t=pypl&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;dataType&quot;</span>:<span class="string">&quot;json&quot;</span>,<span class="comment">//服务器响应的数据类型为json，也就说这里将回显的JSON字符串转变为JOSN对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;success&quot;</span>:<span class="keyword">function</span> (<span class="params">json</span>)&#123;<span class="comment">//这里的json只是一个变量，用来接受服务器返回的数据,也就是说这里接受到从JSON字符串转变的JSON对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//append()作用可以将append()中的html代码追加到div中</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#container&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;h1&gt;&quot;</span>+json[i].<span class="property">title</span>+<span class="string">&quot;&lt;/h1&gt;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;error&quot;</span>:<span class="keyword">function</span> (<span class="params">xmlhttp,errorText</span>)&#123;<span class="comment">//xmlhttp代表的是XmlHttpRequest对象，errorText代表的是错误的代码文本，这里jquery自动创建XmlHttpRrquest对象实例 名字叫xmlhttp</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(errorText);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xmlhttp.<span class="property">status</span> == <span class="string">&quot;405&quot;</span>)&#123;<span class="comment">//如果XmlHttpRequest对象(接受后台与服务器交换的数据)，这里监视数据的状态，如果状态为405</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;无效的请求方式&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (xmlhttp.<span class="property">status</span> == <span class="string">&quot;404&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;未找到url资源&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (xmlhttp.<span class="property">status</span> == <span class="string">&quot;500&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;服务器内部错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;其他异常&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时执行的效果：</p><p>执行error部分，因为是请求方式错误，故错误码为405，所以会执行error中的alert(“无效的请求方式”)；部分</p><p>在上面的示例中，针对不同的错误，只是打印了一些简单的信息，在实际中，会更加复杂，会根据实际业务不同，针对不同的错误情况做出不同的处理</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jajax3.png" alt="jajax3"></p><p>data参数最好采用json的形式；这样更好看</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;t&quot;</span>:<span class="string">&quot;pypl&quot;</span>,<span class="string">&quot;abc&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;,<span class="comment">//data最好使用json的形式书写；其实在程序在编译时会将json格式转化成下面的这种传统的方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//&quot;data&quot;:&quot;t=pypl&amp;abc=123&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jajax4.png" alt="jajax4"></p><h2 id="jQuery利用Ajax实现二级联动菜单"><a href="#jQuery利用Ajax实现二级联动菜单" class="headerlink" title="jQuery利用Ajax实现二级联动菜单"></a>jQuery利用Ajax实现二级联动菜单</h2><p>二级联动菜单的形式多种多样，在实际开发中十分常见</p><p>下面就是真实网站中的二级联动菜单</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220521192649781.png" alt="image-20220521192649781"></p><h3 id="下面就使用Ajax来实现二级联动菜单的案例"><a href="#下面就使用Ajax来实现二级联动菜单的案例" class="headerlink" title="下面就使用Ajax来实现二级联动菜单的案例"></a>下面就使用Ajax来实现二级联动菜单的案例</h3><p>自然使用jQuery脚本来提供Ajax的简化</p><p>实现二级联动菜单的主要内容：JavaBean，Servlet类，html</p><h4 id="Channel类：JavaBean"><a href="#Channel类：JavaBean" class="headerlink" title="Channel类：JavaBean"></a>Channel类：JavaBean</h4><p>利用java实现封装，写入无参与有参的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Channel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Channel</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Channel</span><span class="params">(String code, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ChannelServlet类：Servlet"><a href="#ChannelServlet类：Servlet" class="headerlink" title="ChannelServlet类：Servlet"></a>ChannelServlet类：Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ChannelServlet&quot;, value = &quot;/channel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">level</span>  <span class="operator">=</span> request.getParameter(<span class="string">&quot;level&quot;</span>);<span class="comment">//获取到请求中的level属性并赋予字符串level,level=1:对应第一级菜单，level=2：对应二级菜单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;parent&quot;</span>);<span class="comment">//获取到请求中的parent属性并赋予字符串parent,对应一级菜单选项&lt;option&gt;的value值</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">chlist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (level.equals(<span class="string">&quot;1&quot;</span>))&#123;<span class="comment">//Ajax传入的参数</span></span><br><span class="line">            chlist.add(<span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&quot;ai&quot;</span>,<span class="string">&quot;前沿/区块链/人工智能&quot;</span>));</span><br><span class="line">            chlist.add(<span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&quot;web&quot;</span>,<span class="string">&quot;前端/小程序/JS&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (level.equals(<span class="string">&quot;2&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.equals(<span class="string">&quot;ai&quot;</span>))&#123;</span><br><span class="line">                chlist.add(<span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&quot;mirco&quot;</span>,<span class="string">&quot;微服务&quot;</span>));</span><br><span class="line">                chlist.add(<span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&quot;blockchain&quot;</span>,<span class="string">&quot;区块链&quot;</span>));</span><br><span class="line">                chlist.add(<span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&quot;other&quot;</span>,<span class="string">&quot;……&quot;</span>));</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (parent.equals(<span class="string">&quot;web&quot;</span>))&#123;</span><br><span class="line">                chlist.add(<span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&quot;html&quot;</span>,<span class="string">&quot;HTML&quot;</span>));</span><br><span class="line">                chlist.add(<span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&quot;css&quot;</span>,<span class="string">&quot;CSS&quot;</span>));</span><br><span class="line">                chlist.add(<span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&quot;other&quot;</span>,<span class="string">&quot;……&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(chlist);<span class="comment">//利用fastjson将将集合转变为JSON字符串</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(json);<span class="comment">//回显到前端中的JSON字符串</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="channel-html：html"><a href="#channel-html：html" class="headerlink" title="channel.html：html"></a>channel.html：html</h4><p>执行流程：</p><p>首先，第一个初始化函数会初始化第一级菜单；即data的参数是level&#x3D;1，此时会执行servlet中的if(level.equals(“1”)){}；的部分；</p><p>即执行完第一个初始化函数后，会调用一次Servlet，最后的结果就是浏览器上的第一级菜单初始化了；此时，浏览器上的第一级菜单就会存下Servlet返回的结果，并在浏览器的页面上显示出来</p><p>其次，当第一级菜单发生change的时候(也就是选择第一级菜单的时候)，会调用第二个初始化函数；此时的data参数是{“level”:”2”,”parent”:parent};其中parent是第一级菜单的option的key值，这个值是从浏览器中获取到的，然后去调用Servlet增加到chlist中，然后添加到二级菜单中，仍然会从头到尾执行，自然Servlet中的chlist需要重新创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax实现二级菜单联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//页面就绪函数完成第一阶段，页面初始化的时候，加载出第一级菜单</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;url&quot;</span>:<span class="string">&quot;/ajax/channel&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;dataType&quot;</span>:<span class="string">&quot;json&quot;</span>,<span class="comment">//将服务器回显到前端中JSON字符串转变为JSON对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;success&quot;</span>:<span class="keyword">function</span> (<span class="params">json</span>)&#123;<span class="comment">//json只是存放变量的变量名字</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> ch = json[i];</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#lv1&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+ch.<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+ch.<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//jquery允许出现多个页面就绪函数，执行是从上到下依次执行，每一个页面就绪函数最好是一个独立的功能</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#lv1&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="comment">//on()方法的作用是用来绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> parent=$(<span class="variable language_">this</span>).<span class="title function_">val</span>();<span class="comment">//this()代表的是当前触发事件的对象(也就是一级菜单)，val()，其作用是获取输入项的值(这里获取到了一级菜单中的key值)，同样可以用在下拉框中，这里是获取到一级菜单中的key值</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;url&quot;</span>:<span class="string">&quot;/ajax/channel&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;type&quot;</span>:<span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="string">&quot;parent&quot;</span>:parent&#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;dataType&quot;</span>:<span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;success&quot;</span>:<span class="keyword">function</span> (<span class="params">json</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#lv2&gt;option&quot;</span>).<span class="title function_">remove</span>();<span class="comment">//移除所有lv2下的原始option选项,这里使用了jQuery中的子选择器</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> ch=json[i];</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#lv2&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+ch.<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+ch.<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;lv1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 30px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;lv2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 30px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：可以根据一级菜单的不同，实现不同内容的二级菜单</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jajax5.png" alt="jajax5"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jajax6.png" alt="jajax6"></p><hr><p>整体来看，Ajax的应用场景十分广泛，明白Ajax的作用，实际中很多业务场景适合使用Ajax</p><p>在实现某种业务问题时，具体的实现方式和实现策略，需要多看多写实际的例子</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax工具介绍</title>
      <link href="/2022/05/24/Ajax%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/05/24/Ajax%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="Ajax介绍"><a href="#Ajax介绍" class="headerlink" title="Ajax介绍"></a>Ajax介绍</h2><p>Ajax主要作用：在不刷新网页的情况下，与后台数据进行交互，从而实现页面局部刷新的功能</p><ul><li>Asynchronous JavaScript And Xml（异步的JavaScript和XML）</li><li>Ajax可以在不刷新页面的前提下，进行页面局部更新</li><li>Ajax不是新的技术，Ajax并不是W3C的标准</li><li>Ajax并不是一种标准，而是服务商提供的一种技术；大部分浏览器在浏览器内核中都提供了Ajax的核心实现；后来某位大牛对这些技术进行整合和命名，才有今天的Ajax</li></ul><span id="more"></span><p>学习Ajax时，需要理解几点：</p><p>(1)以前遇到的请求都是和一个网页面联系在一起的，即前端发起一个请求就是和一个网页联系在一起，也可以理解为以前接触到的都是为了展示一个全新的页面而发起的一个请求，也可以理解为每发起一个新的请求，都会创建一个新的界面来展示一个新的界面来展示本次响应的内容；但Ajax不是这样的，Ajax的请求内容并不是为了展示一个新的界面，而是将本次请求的响应内容，局部刷新展示在已有界面上，本质是，已有页面发起一个没有和新的页面绑定的请求（这个请求和已有界面的局部刷新有关）</p><p>而这个功能的实现，浏览器中内嵌的ajax起到了重要作用</p><p>(2)一个可以接受请求，发出响应的servlet的任务仅仅是接受前台请求数据，处理后再返回给前台，具体响应后，前台怎么展示这些数据就和后台Servlet无关了</p><p>(3)目前可以这样理解：ajax是内嵌到浏览器中的一种技术，归浏览器解释；当浏览器解析到前端文件中的ajax部分的时候，浏览器会自动采用内置的ajax去解释</p><h2 id="Ajax使用流程简介和准备工作"><a href="#Ajax使用流程简介和准备工作" class="headerlink" title="Ajax使用流程简介和准备工作"></a>Ajax使用流程简介和准备工作</h2><h3 id="一-Ajax使用流程简介"><a href="#一-Ajax使用流程简介" class="headerlink" title="一.Ajax使用流程简介"></a>一.Ajax使用流程简介</h3><ul><li>创建XmlHttpRequest对象</li><li>发送Ajax请求（通过XmlHttpRequest对象发送请求）</li><li>处理服务器响应（在web页面中，通过JavaScript对响应进行后续的处理，将其显示在页面中）</li></ul><h3 id="二-准备工作"><a href="#二-准备工作" class="headerlink" title="二.准备工作"></a>二.准备工作</h3><p>创建Web工程ajax，并创建ContentServlet和index.html：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/jqfunction6.png" alt="jqfunction6"></p><p>index.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>text ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当点击“加载”按钮，向服务器发送请求，将服务器返回的信息动态地写入到divContent这个div块中，即点加载后局部刷新和加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btnLoad&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;加载&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ContentServlet.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ContentServlet&quot;, value = &quot;/ContentServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&lt;br&gt;I&#x27;m server Content&lt;/br&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//(1)用于应对Ajax请求的Servlet，该Servlet不进行任何页面的跳转，而是直接返回要响应给Ajax请求的信息(或者说是提供用户所需要的数据回显就可以了)</span></span><br><span class="line">        <span class="comment">//(2)通常数据的格式会采用JSON，很少这样直接回显一个html(字符串)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前的需求是：当点击”加载”按钮的时候，向服务器发送请求，将回显动态写入到divContent中；即局部刷新和加载</p><h3 id="三-利用Ajax实现Ajax请求"><a href="#三-利用Ajax实现Ajax请求" class="headerlink" title="三.利用Ajax实现Ajax请求"></a>三.利用Ajax实现Ajax请求</h3><h4 id="1-创建XmlHttpRequest对象"><a href="#1-创建XmlHttpRequest对象" class="headerlink" title="1.创建XmlHttpRequest对象"></a>1.创建XmlHttpRequest对象</h4><ul><li><p>XML HttpRequest用于在后台与服务器交换数据，是AJAX核心</p></li><li><p>XMLHttpRequest并不是W3C的标准，不同浏览器的创建方式不同</p></li><li><p>创建XMLHttpRequest对象</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnLoad&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;  <span class="comment">// 新版本浏览器支持这句话</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();  <span class="comment">// 创建一个新的XmlHttpRequest对象</span></span></span><br><span class="line"><span class="language-javascript">&#125;<span class="keyword">else</span>&#123;   <span class="comment">// 老版本浏览器</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax1.png" alt="ajax1"></p><h4 id="2-发送Ajax请求"><a href="#2-发送Ajax请求" class="headerlink" title="2.发送Ajax请求"></a>2.发送Ajax请求</h4><ul><li><p>xmlhttp.open（）用于创建请求</p></li><li><p>xmlhttp.send（）用于发送请求</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建请求</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://localhost:8080/ajax/content&quot;</span>,<span class="string">&quot;true&quot;</span>);<span class="comment">//包括请求的类型，请求的地址，ture为异步，false为同步</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//发送到服务器</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  效果：</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax2.png" alt="ajax2"></p><p>查看content：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax3.png" alt="ajax3"></p><p>查看response：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax4.png" alt="ajax4"></p><p>当多次点击”加载”按钮时：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax5.png" alt="ajax5"></p><h4 id="3-处理服务器的响应"><a href="#3-处理服务器的响应" class="headerlink" title="3.处理服务器的响应"></a>3.处理服务器的响应</h4><ul><li><p>xmlhttp.onreadystatechange()事件用于监听AJAX的执行过程：这个方法用于捕捉Ajax的执行过程</p></li><li><p>xmlhttp.readyState属性说明XMLHttpRequest当前的状态：XmlhttpRequest对象中的一个重要属性，readState用于指示说明当前Ajax执行到哪一步了</p></li><li><table><thead><tr><th>readState值</th><th>说明</th></tr></thead><tbody><tr><td>readState&#x3D;0</td><td>请求未初始化</td></tr><tr><td>readState&#x3D;1</td><td>服务器连接已建立</td></tr><tr><td>readState&#x3D;2</td><td>请求已被接受</td></tr><tr><td>readState&#x3D;3</td><td>请求正在处理</td></tr><tr><td>readState&#x3D;4</td><td>响应文本已被接受</td></tr></tbody></table></li><li><p>xmlhttp.status属性服务器响应状态码，200：成功，404：未找到……</p></li></ul><p>(1)核心事件是onreadystatechange，当ajax在发送过程中，各个状态发生变化的时候，就会触发这个事件；（注：onreadystatechange是XmlHttpRequest对象的事件）</p><p>(2)readState用以判断Ajax执行到哪一步，最重要的是为4的时候；（注意：status是XmlHttpRequest对象的属性）</p><p>(3)status：服务器处理的状态，200代表处理成功（注意：status是XmlHttpRequest对象的属性）</p><p>readState&#x3D;4和status&#x3D;200，就代表响应已经被接受，而且服务是处理成功了。（服务器处理不成功时，其也还是会有响应的，只是这个响应是一个出错的响应，比如当status&#x3D;404的时候，对于响应出错的时候，后续应该采取其他策略</p><p>(4)使用了XmlHttpRequest对象的responseText属性，获取服务器响应的文本；（注意：responseText是XmlHttpRequest对象的属性）获取服务器响应的文本后，对这个文本进行后续处理就可以了；（这个文本一般是JSON形式的，JSON作为一种功能强大，前后端都能解释得表示方法很给力）</p><p>Ajax处理响应得标准范例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="property">onreadstatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//给onreqdestatechange绑定一个匿名函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//响应被接受且服务器处理成功时才执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(xmlhttp.<span class="property">readyState</span>=<span class="number">4</span>&amp;&amp;xmlhttp.<span class="property">status</span>=<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取响应体得文本</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> responseText = xmlhttp.<span class="property">responseText</span>;<span class="comment">//通过这个responseText获取响应文本</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//对服务器结果进行处理</span></span></span><br><span class="line"><span class="language-javascript">    ……</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>text ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当点击“加载”按钮，向服务器发送请求，将服务器返回的信息动态地写入到divContent这个div块中，即点加载后局部刷新和加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btnLoad&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;加载&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnLoad&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;  <span class="comment">// 新版本浏览器支持这句话</span></span></span><br><span class="line"><span class="language-javascript">            xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();  <span class="comment">// 创建一个新的XmlHttpRequest对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 老版本浏览器</span></span></span><br><span class="line"><span class="language-javascript">            xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp);<span class="comment">//在控制台中输入xmlhttprequest对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.发送Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//xmlhttp.open(&quot;GET&quot;,&quot;http://localhost:8080/ajax/content&quot;,&quot;true&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//请求地址可以写成上面完整的http的形式，也可以采用下面的简写形式</span></span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/ajax/content&quot;</span>,<span class="literal">true</span>);<span class="comment">//通过XMLHttpRequest对象创建Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.处理服务器响应</span></span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span>&amp;&amp;xmlhttp.<span class="property">status</span>==<span class="number">200</span>)&#123;<span class="comment">//代表响应已经被接受，而且服务是处理成功</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> t =xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(t);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//这个对响应文本的后续处理肯定会比较复杂，不会像下面这样简单赋值就OK了的</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;divContent&quot;</span>).<span class="property">innerHTML</span> =t;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax6.png" alt="ajax6"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax7.png" alt="ajax7"></p><h2 id="利用Ajax实现新闻列表"><a href="#利用Ajax实现新闻列表" class="headerlink" title="利用Ajax实现新闻列表"></a>利用Ajax实现新闻列表</h2><p>这个例子主要是展示在实际中，前后端交互的时候，传输的文本常常是JSON形式</p><p>News.java:定义构成函数等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">News</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    <span class="keyword">private</span> String source;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">News</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">News</span><span class="params">(String title, String date, String source, String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(String date)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSource</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>NewListServlet类：</p><p>(1)后台处理后的数据向前台传的时候，需要转成JSON字符串；这需要引入fastjson的jar包</p><p>(2)这个Servlet并没有主动重定向或者转发至news.html中；而是在这里默默的等待，等待news,html的Ajax的XmlHttpServlet对象创建的Ajax请求，然后请求到这个Servlet中</p><p>(3)这个Servlet通过，response.getWriter().println(newsJsonStr);将JSON字符串回显到news.html中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;NewsListServlet&quot;, value = &quot;/news_list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewsListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;News&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;News&gt;();<span class="comment">//创建集合对象list</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题1&quot;</span>,<span class="string">&quot;2022-1-1&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容1&quot;</span>));<span class="comment">//在集合中增加内容</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题2&quot;</span>,<span class="string">&quot;2022-1-2&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容2&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题3&quot;</span>,<span class="string">&quot;2022-1-3&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容3&quot;</span>));</span><br><span class="line">        <span class="comment">//在Servlet处理后，对外进行字符串序列化的时候，一律将其转化为JSON：通过JSON，可以对数据进行有效的描述</span></span><br><span class="line">        <span class="comment">//然后在前端的html中，再通过javaScript自带的JSON处理方式，将从这儿发送过去的数据进行解析</span></span><br><span class="line">        <span class="comment">//将集合对象list转成JSON需要，引入fastjson包，可以这样想回显是需要字符串的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newsjsonstr</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">        System.out.println(newsjsonstr);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);<span class="comment">//json字符串中包含中文需要设置编码</span></span><br><span class="line">        response.getWriter().println(newsjsonstr);<span class="comment">//回显从list集合对象序列化成json字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>news.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建XmlHttpRequest对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/ajax/news_list&quot;</span>,<span class="literal">true</span>);<span class="comment">//创建Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">send</span>();<span class="comment">//发送Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//处理服务器响应(处理回显中的JSON字符串)</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> json = xmlhttp.<span class="property">responseText</span>;<span class="comment">//从后台拿过来的数据，这个json是JSON字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> jsont = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);<span class="comment">//需要将JSON字符串转成JSON对象；JavaScript可以认为内置了JSON对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(jsont);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;jsont.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> news = jsont[i];</span></span><br><span class="line"><span class="language-javascript">                html = html + <span class="string">&quot;&lt;h1&gt;&quot;</span>+news.<span class="property">title</span>+<span class="string">&quot;&lt;/h1&gt;&quot;</span>;<span class="comment">//输出JSON对象调用其中的属性</span></span></span><br><span class="line"><span class="language-javascript">                html = html + <span class="string">&quot;&lt;h2&gt;&quot;</span>+news.<span class="property">date</span>+<span class="string">&quot; &quot;</span>+news.<span class="property">source</span>+<span class="string">&quot; &quot;</span>+news.<span class="property">content</span> + <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                html = html + <span class="string">&quot;&lt;hr/&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>).<span class="property">innerHTML</span>=html;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：html中的ajax部分，会去请求访问Servlet，获取响应中的JSON字符串，在html中转变为JSON对象，按照需求来调用JSON对象中的属性</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax8.png" alt="ajax8"></p><h2 id="Ajax同步和异步的简述"><a href="#Ajax同步和异步的简述" class="headerlink" title="Ajax同步和异步的简述"></a>Ajax同步和异步的简述</h2><p>在ajax的第二步，发送ajax请求的时候，第三个参数，true：异步；false同步</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.创建并发送Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/ajax/news_list&quot;</span>,<span class="literal">true</span>);<span class="comment">//创建异步Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">send</span>();<span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>那么什么是异步，什么是同步呢？</p><p>分析：xmlhttp.send()；在发送请求的过程中是需要时间的，网络传输将请求发送到服务器，服务器处理后再返回响应的过程肯定是需要一些时间的</p><p>true异步：在上面发送请求的过程中，程序的其他部分继续向下执行；</p><p>false同步：在上面发送请求的过程中，程序的其他部分不继续向下执行，而是等到响应成功后再继续执行；</p><p>注意：</p><p>(1)ajax绝大部分情况下使用异步处理，但说不定某些场景适合使用同步的方式</p><p>(2)同步是发送一个请求，需要等待返回，然后才能够发送下一个请求；异步是发送一个请求，不需要等待返回，随时可以再发送下一个请求；同步有等待响应的过程</p><p>(3)同步和异步的深入理解必须通过实际应用中逐深渐化理解</p><h3 id="同步与异步的区别"><a href="#同步与异步的区别" class="headerlink" title="同步与异步的区别"></a>同步与异步的区别</h3><p>同步：同步可以看作是一个单线程操作，只要客户端请求了，在服务器没有回显之前都是线程阻塞的状态，不会向下执行任何操作，同步传输是面向比特的传输，他的单位是帧</p><p>异步：异步肯定是多线程，在客户端请求时，可以执行其他线程，并且把这个线程存放在他的队列里面，有序的执行，异步传输是面向字符的传输，他的单位是字符</p><h3 id="示例一：设置为false同步"><a href="#示例一：设置为false同步" class="headerlink" title="示例一：设置为false同步"></a>示例一：设置为false同步</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/ajax/news_list&quot;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求发送完成&quot;</span>);<span class="comment">//为了方便观察效果，当响应返回时，在控制台输出一段话&quot;请求发送完成&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际开发中，后台服务器响应需要一定的时间，为了使效果明显，方便肉眼观察，模拟后台实际消耗的时间，这里在servlet中写入休眠5秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;NewsListServlet&quot;, value = &quot;/news_list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewsListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;News&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;News&gt;();<span class="comment">//创建集合对象list</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题1&quot;</span>,<span class="string">&quot;2022-1-1&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容1&quot;</span>));<span class="comment">//在集合中增加内容</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题2&quot;</span>,<span class="string">&quot;2022-1-2&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容2&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">News</span>(<span class="string">&quot;标题3&quot;</span>,<span class="string">&quot;2022-1-3&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;内容3&quot;</span>));</span><br><span class="line">        <span class="comment">//在Servlet处理后，对外进行字符串序列化的时候，一律将其转化为JSON：通过JSON，可以对数据进行有效的描述</span></span><br><span class="line">        <span class="comment">//然后在前端的html中，再通过javaScript自带的JSON处理方式，将从这儿发送过去的数据进行解析</span></span><br><span class="line">        <span class="comment">//将集合对象list转成JSON需要，引入fastjson包，可以这样想回显是需要字符串的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newsjsonstr</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">        System.out.println(newsjsonstr);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);<span class="comment">//json字符串中包含中文需要设置编码</span></span><br><span class="line">        response.getWriter().println(newsjsonstr);<span class="comment">//回显从list集合对象序列化成json字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效果：发现，等后台响应后，html中的控制台才会输出预设的内容；但是，在浏览器界面没有显示出响应的结果，而是显示一个白板</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax9.png" alt="ajax9"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax10.png" alt="ajax10"></p><p>一.为什么程序处于一直等待的状态；等待了差不多5秒后，才执行console.log(“请求发送完成”)</p><p>分析：在发送Ajax请求设置为false同步后，程序的其他部分不继续向下执行，而是等到服务器响应成功后再继续执行；send()方法会处于阻塞的状态，直到后台响应返回之后，才会向下执行，执行console.log()</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax11.png" alt="ajax11"></p><p>二.为什么浏览器界面没有回显出相应的内容？</p><p>分析：这里是由Ajax的机制决定的，一旦这儿设置成false同步;在xmlhttp.onreadystatechanse &#x3D; function(){}这个事件会失效</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax12.png" alt="ajax12"></p><p>如果想在同步的情况下，继续在浏览器界面显示出响应内容：将xmlhttp.onreadystatechange &#x3D; function(){}里面的内容复制到send()后面：也就是说xmlhttp.onreadystatechange &#x3D; function(){}这个会不起作用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">=<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1.创建XmlHttpRequest对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2.发送Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/ajax/news_list&quot;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求发送完成&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> t = xmlhttp.<span class="property">responseText</span>;  <span class="comment">// 从后台拿过来的数据：这个JSON是个JSON字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> jsont = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(t);  <span class="comment">// 需要将JSON字符串转成JSON对象；JavaScript可以认为内置了JSON对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(t);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsont);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; jsont.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> news = jsont[i];</span></span><br><span class="line"><span class="language-javascript">html = html+<span class="string">&quot;&lt;h1&gt;&quot;</span>+news.<span class="property">title</span>+<span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">html = html + <span class="string">&quot;&lt;h2&gt;&quot;</span>+news.<span class="property">date</span>+<span class="string">&quot; &quot;</span>+news.<span class="property">source</span>+<span class="string">&quot; &quot;</span>+news.<span class="property">content</span> + <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">html = html + <span class="string">&quot;&lt;hr/&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>).<span class="property">innerHTML</span> = html;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br></pre></td></tr></table></figure><p>效果：将失效的代码删除吗，直接复制到send()方法后面，等待5秒后回显到浏览器上</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax13.png" alt="ajax13"></p><h3 id="示例二：设置成true异步时：（核心内容）"><a href="#示例二：设置成true异步时：（核心内容）" class="headerlink" title="示例二：设置成true异步时：（核心内容）"></a>示例二：设置成true异步时：（核心内容）</h3><p>异步：在网络发送请求的过程中不进行代码阻塞，继续向下执行，异步采用onreadstatechange进行对响应状态的监控，程序的其他部分同时进行</p><p>设置为异步案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建XmlHttpRequest对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送Ajax请求</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/ajax/news_list&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求发送完成&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//处理服务器响应</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> json = xmlhttp.<span class="property">responseText</span>;<span class="comment">//从后台拿过来的数据，这个json是JSON字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> jsont = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);<span class="comment">//需要将JSON字符串转成JSON对象；JavaScript可以认为内置了JSON对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(jsont);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;jsont.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> news = jsont[i];</span></span><br><span class="line"><span class="language-javascript">                html = html + <span class="string">&quot;&lt;h1&gt;&quot;</span>+news.<span class="property">title</span>+<span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                html = html + <span class="string">&quot;&lt;h2&gt;&quot;</span>+news.<span class="property">date</span>+<span class="string">&quot; &quot;</span>+news.<span class="property">source</span>+<span class="string">&quot; &quot;</span>+news.<span class="property">content</span> + <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                html = html + <span class="string">&quot;&lt;hr/&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>).<span class="property">innerHTML</span>=html;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：可以看到，刷新界面后，控制台立即打印出”请求发送成功”，然后等待后台响应发送到html中回显；说明：当设置为异步后，请求发送后、响应回来前，程序会继续执行，只是xml.onreadystatechange &#x3D; function(){}来实时监控响应的状态，程序可以通过此方法来按照不同的需求做出不同的程序</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/ajax14.png" alt="ajax14"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJson工具使用及案例分析</title>
      <link href="/2022/05/24/FastJson%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
      <url>/2022/05/24/FastJson%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Java对象转换为JSON字符串案例"><a href="#Java对象转换为JSON字符串案例" class="headerlink" title="Java对象转换为JSON字符串案例"></a>Java对象转换为JSON字符串案例</h2><p>主要内容是Java中利用FastJson对JSON工具的序列化</p><p>序列化：简单来说序列化就是用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化，流的概念这里不用多说(就是I&#x2F;O)，<strong>我们可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间(注：想要将对象传输于网络必须进行流化</strong>）在对对象流进行读写操作时会引发一些问题，而序列化机制也正是用来解决这些问题</p><span id="more"></span><h4 id="示例：利用FastJson将java对象转变为JSON字符串"><a href="#示例：利用FastJson将java对象转变为JSON字符串" class="headerlink" title="示例：利用FastJson将java对象转变为JSON字符串"></a>示例：利用FastJson将java对象转变为JSON字符串</h4><p>创建一个Java类程序，使其后面的赋值更加方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Date hdarw;</span><br><span class="line">    <span class="keyword">private</span> Float salary;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getEmpno</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpno</span><span class="params">(Integer empno)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJob</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJob</span><span class="params">(String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getHdarw</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hdarw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHdarw</span><span class="params">(Date hdarw)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hdarw = hdarw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(Float salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再创建一个Java类，将刚刚的java类实例化，并进行赋值然后利用FastJson工具将对象转变为字符串（序列化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonSample1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">        employee.setEmpno(<span class="number">4488</span>);</span><br><span class="line">        employee.setEname(<span class="string">&quot;张东西&quot;</span>);</span><br><span class="line">        employee.setJob(<span class="string">&quot;客户经理&quot;</span>);</span><br><span class="line">        employee.setSalary(<span class="number">10000f</span>);</span><br><span class="line">        employee.setDname(<span class="string">&quot;工程师&quot;</span>);</span><br><span class="line">        <span class="comment">//月份是从0开始的，所以5代表的是六月，Calendar日历函数，通过set放置开始时间，getTime得到刚刚设置好的时间</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        c.set(<span class="number">2020</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">10</span>,<span class="number">38</span>,<span class="number">10</span>);</span><br><span class="line">        employee.setHdarw(c.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//FastJson中提供了Json对象，完成对象与JSON字符串的互相转换</span></span><br><span class="line">        <span class="comment">//这里我们将对象序列化变为字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(employee);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：输出了刚刚在实例化对象中定义好的属性，并以JSON对象的形式输出出来</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson3.png" alt="fastjson3"></p><h3 id="JSONField注解"><a href="#JSONField注解" class="headerlink" title="JSONField注解"></a>JSONField注解</h3><p>这里发现，上面的hdarw的值是：设置时间的毫秒数，很难看懂；为了解决这个问题，需要用到JSON注释来对日期格式进行格式化输出：@JSONField注释</p><h4 id="我们在定义属性的java类中编写JSONField注解"><a href="#我们在定义属性的java类中编写JSONField注解" class="headerlink" title="我们在定义属性的java类中编写JSONField注解"></a>我们在定义属性的java类中编写JSONField注解</h4><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson4.png" alt="fastjson4"></p><p>这时候我们在运行的效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson5.png" alt="fastjson5"></p><h4 id="JSONField注解还可以对输出的key进行描述"><a href="#JSONField注解还可以对输出的key进行描述" class="headerlink" title="JSONField注解还可以对输出的key进行描述"></a>JSONField注解还可以对输出的key进行描述</h4><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson6.png" alt="fastjson6"></p><p>此时的效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson7.png" alt="fastjson7"></p><h4 id="JSONFile注解还可以取消个别属性的JSON序列化"><a href="#JSONFile注解还可以取消个别属性的JSON序列化" class="headerlink" title="JSONFile注解还可以取消个别属性的JSON序列化"></a>JSONFile注解还可以取消个别属性的JSON序列化</h4><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson8.png" alt="fastjson8"></p><p>效果：可以看到说已经没有dname这个属性</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson9.png" alt="fastjson9"></p><h3 id="JSON字符串转换为Java对象"><a href="#JSON字符串转换为Java对象" class="headerlink" title="JSON字符串转换为Java对象"></a>JSON字符串转换为Java对象</h3><p>主要内容是Java中利用FastJson对java对象的反序列化</p><p>反序列化：Java反序列化就是指把字节序列恢复为Java对象的过程，<strong>反序列化最重要的作用是根据字节流中保存的对象状态及描述信息，通过反序列化重建对象</strong></p><h4 id="示例：利用FastJson将JSON字符串转变为java对象"><a href="#示例：利用FastJson将JSON字符串转变为java对象" class="headerlink" title="示例：利用FastJson将JSON字符串转变为java对象"></a>示例：利用FastJson将JSON字符串转变为java对象</h4><p>Employee emp &#x3D; JSON.parseObject(jsonString,Employee.class)：第一个参数为待转换的JSON字符串，第二个参数为想要转换的已存在类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonSample1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">        employee.setEmpno(<span class="number">4488</span>);</span><br><span class="line">        employee.setEname(<span class="string">&quot;张东西&quot;</span>);</span><br><span class="line">        employee.setJob(<span class="string">&quot;客户经理&quot;</span>);</span><br><span class="line">        employee.setSalary(<span class="number">10000f</span>);</span><br><span class="line">        employee.setDname(<span class="string">&quot;工程师&quot;</span>);</span><br><span class="line">        <span class="comment">//月份是从0开始的，所以5代表的是六月，Calendar日历函数，通过set放置开始时间，getTime得到刚刚设置的时间</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        c.set(<span class="number">2020</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">10</span>,<span class="number">38</span>,<span class="number">10</span>);</span><br><span class="line">        employee.setHdarw(c.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//FastJson中提供了Json对象，完成对象与JSON字符串的互相转换</span></span><br><span class="line">        <span class="comment">//这里我们将对象序列化变为字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(employee);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串反序列化为对象</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span>JSON.parseObject(jsonString,Employee.class);</span><br><span class="line">        System.out.println(emp.getEname());<span class="comment">//输出emp这个JSON对象中的Ename属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson10.png" alt="fastjson10"></p><h2 id="Java对象集合与JSON-数组-的转换"><a href="#Java对象集合与JSON-数组-的转换" class="headerlink" title="Java对象集合与JSON(数组)的转换"></a>Java对象集合与JSON(数组)的转换</h2><p>在实际业务中，往往会是对多个对象批量出来：这个用处会非常广泛</p><p>JSON序列化与反序列化用途，比如：</p><p>(1)要求：本地有100个员工对象信息，如何把这100个员工的的信息传递给另外一个系统呢</p><p>方法：可以将100个员工的信息JSON序列化，然后传递给另外一个系统；另外一个系统接受后，JSON反序列化成员工对象即可</p><p>(2)后面的Ajax中也会用到JSON序列化</p><h3 id="多个对象的集合，转成JSON-数组"><a href="#多个对象的集合，转成JSON-数组" class="headerlink" title="多个对象的集合，转成JSON(数组)"></a>多个对象的集合，转成JSON(数组)</h3><p>String jsonString &#x3D; JSON.toJSONString(empList):还是这个方法，将对象集合作为参数传入即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonSample2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; emplist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();<span class="comment">//创建一个集合</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;<span class="comment">//简单模拟一下10个员工；设置了两个属性；</span></span><br><span class="line">            <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();<span class="comment">//实例化对象</span></span><br><span class="line">            employee.setEmpno(<span class="number">4488</span>+i);</span><br><span class="line">            employee.setEname(<span class="string">&quot;员工&quot;</span>+i);</span><br><span class="line">            emplist.add(employee);<span class="comment">//增加到集合中</span></span><br><span class="line">        &#125;</span><br><span class="line">        String jsonString=JSON.toJSONString(emplist);<span class="comment">//java集合对象序列化为字符串</span></span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：发现（1）[]说明这是一个集合；（2）只有empno和ename，说明当某个属性的属性值为null的时候，则FastJson会将其忽略</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson11.png" alt="fastjson11"></p><h3 id="将JSON数组转成对象的集合"><a href="#将JSON数组转成对象的集合" class="headerlink" title="将JSON数组转成对象的集合"></a>将JSON数组转成对象的集合</h3><p>List<Employee> listEmployee &#x3D; JSON.pareArray(jsonString,Employee.class);将JSON数组,转变为对象集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonSample2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; emplist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;<span class="comment">//简单模拟一下10个员工；设置了两个属性；</span></span><br><span class="line">            <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            employee.setEmpno(<span class="number">4488</span>+i);</span><br><span class="line">            employee.setEname(<span class="string">&quot;员工&quot;</span>+i);</span><br><span class="line">            emplist.add(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        String jsonString=JSON.toJSONString(emplist);<span class="comment">//序列化，将集合元素变为JOSN（数组）字符串</span></span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; listEmployee = JSON.parseArray(jsonString,Employee.class);<span class="comment">//反序列化，将JSON（数组）字符串变为JSON集合对象</span></span><br><span class="line">        <span class="keyword">for</span> (Employee e:listEmployee)&#123;<span class="comment">//增强型for循环，循环遍历JSON集合对象</span></span><br><span class="line">            System.out.println(e.getEmpno()+<span class="string">&quot;:&quot;</span>+e.getEname());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/fastjson13.jpg" alt="fastjson13"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS访问JSON并输出</title>
      <link href="/2022/05/24/JS%E8%AE%BF%E9%97%AEJSON%E5%B9%B6%E8%BE%93%E5%87%BA/"/>
      <url>/2022/05/24/JS%E8%AE%BF%E9%97%AEJSON%E5%B9%B6%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript访问JSON"><a href="#JavaScript访问JSON" class="headerlink" title="JavaScript访问JSON"></a>JavaScript访问JSON</h2><p>疑问：JSON主要用于数据传递和数据表示上，程序势必要和JSON数据进行交互；那么JavaScript如何访问JSON文件的呢</p><p><strong>JavaScript天生就具备JSON数据的处理能力</strong></p><p>在web目录下创建sample.html</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS1.png" alt="JSON访问JS1"></p><span id="more"></span><p><strong>直接将emp.json中的内容，赋值给变量json；JavaScript可以将其作为一个数组进行解析</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> json=[<span class="comment">//将JSON中的内容设置为JavaScript中的数组</span></span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;empno&quot;</span>: <span class="string">&quot;7369&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;ename&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;job&quot;</span>: <span class="string">&quot;软件工程师&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;hiredate&quot;</span>: <span class="string">&quot;2017-05-12&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;salary&quot;</span>: <span class="number">130000</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;dname&quot;</span>: <span class="string">&quot;研发部&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;empno&quot;</span>: <span class="string">&quot;7449&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;ename&quot;</span>: <span class="string">&quot;王五&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;job&quot;</span>: <span class="string">&quot;客户经理&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;hiredate&quot;</span>: <span class="string">&quot;2018-06-12&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;salary&quot;</span>: <span class="number">100000</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;dname&quot;</span>: <span class="string">&quot;市场部&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;customers&quot;</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;cname&quot;</span>: <span class="string">&quot;李四&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;cname&quot;</span>: <span class="string">&quot;黄玉峰&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;cname&quot;</span>: <span class="string">&quot;郭嘉&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//在浏览器控制台中对json内容进行输出。console是浏览器的内置对象，表示控制台</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//log方法是向浏览器输出一个日志</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(json);<span class="comment">//这时候我们可以在网页控制台中查看到JSON的内容</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：虽然输出的页面是空白的，但是在控制台中可以查看到我们书写的JSON数组</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%25E8%25AE%25BF%25E9%2597%25AEJS2.png" alt="JSON访问JS2"></p><h3 id="示例：在浏览器页面对json内容进行输出"><a href="#示例：在浏览器页面对json内容进行输出" class="headerlink" title="示例：在浏览器页面对json内容进行输出"></a>示例：在浏览器页面对json内容进行输出</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> json=[</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;empno&quot;</span>: <span class="string">&quot;7369&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;ename&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;job&quot;</span>: <span class="string">&quot;软件工程师&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;hiredate&quot;</span>: <span class="string">&quot;2017-05-12&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;salary&quot;</span>: <span class="number">130000</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;dname&quot;</span>: <span class="string">&quot;研发部&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;empno&quot;</span>: <span class="string">&quot;7449&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;ename&quot;</span>: <span class="string">&quot;王五&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;job&quot;</span>: <span class="string">&quot;客户经理&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;hiredate&quot;</span>: <span class="string">&quot;2018-06-12&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;salary&quot;</span>: <span class="number">100000</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;dname&quot;</span>: <span class="string">&quot;市场部&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;customers&quot;</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;cname&quot;</span>: <span class="string">&quot;李四&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;cname&quot;</span>: <span class="string">&quot;黄玉峰&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;cname&quot;</span>: <span class="string">&quot;郭嘉&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//在浏览器控制台中对json内容进行输出。console是浏览器的内置对象，表示控制台</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//log方法是向浏览器输出一个日志</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> emp = json[i];</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(emp.<span class="property">empno</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;,&quot;</span>+emp.<span class="property">empno</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;,&quot;</span>+emp.<span class="property">job</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;,&quot;</span>+emp.<span class="property">hiredate</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;,&quot;</span>+emp.<span class="property">salary</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;,&quot;</span>+emp.<span class="property">dname</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (emp.<span class="property">customers</span> !=<span class="literal">null</span>)&#123;<span class="comment">//判断数组json中是否有customers元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h2&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;emp.<span class="property">customers</span>.<span class="property">length</span>;j++)&#123;<span class="comment">//数组中customers数组的长度</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> customer=emp.<span class="property">customers</span>[j];<span class="comment">//customer代表的是customers数组的键跟值</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">write</span>(customer.<span class="property">cname</span>+<span class="string">&quot;,&quot;</span>);<span class="comment">//获取customer中customer键的value值</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/h2&gt;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到：（1）JavaScript把[]JSON作为一个数组解析了；（2）直接通过JSON[i]这种方式就能获取，JSON对象数组中的第i个对象；（3）然后通过emp.empno这种形式就能获取empno这个键对应的值；（4）一个键的值可能是一个字符串（或数组），也可以是包含在JSON对象中的数组</p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS3.png" alt="JSON访问JS3"></p><h2 id="JSON与字符串互相转换"><a href="#JSON与字符串互相转换" class="headerlink" title="JSON与字符串互相转换"></a>JSON与字符串互相转换</h2><ul><li>JSON.parse()方法将字符串转换为JSON对象，注意JSON对象是浏览器内置对象：JavaScript可以直接调用，但IE8以下的版本不支持JSON对象</li><li>JSON.stringify()方法将JSON对象转换为字符串</li></ul><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>JavaScript将字符串转成JSON对象：JSON.parse(str);</p><p>需要注意：</p><ol><li>定义JSON对象的方式是：var json &#x3D; {}; 定义字符串是：var str&#x3D;”{}”;</li><li>var str &#x3D; “{&quot;class_name&quot;:&quot;五年级三班&quot;}”;其中的反斜杆是为了将””这个符号转义</li></ol><p>首先在web目录下创建sample2.html</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS4.png" alt="JSON访问JS4"></p><p>然后在文件中定义字符串后转变为JSON对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS5.png" alt="JSON访问JS5"></p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS6.png" alt="JSON访问JS6"></p><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>JavaScript将JSON对象转换为字符串：JSON.stringify(json)</p><p>首先在web目录下，创建sample3.html</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS7.png" alt="JSON访问JS7"></p><p>在sample3.html中将JSON对象转变为字符串</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS8.png" alt="JSON访问JS8"></p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS9.png" alt="JSON访问JS9"></p><h2 id="字符串和JSON对象转换的用途"><a href="#字符串和JSON对象转换的用途" class="headerlink" title="字符串和JSON对象转换的用途"></a>字符串和JSON对象转换的用途</h2><p>Ajax中会用到；Ajax是JavaScript和后台的Java程序进行通信的方式；</p><p>字符串转JSON的一个应用：</p><p>Java返回的服务器后台的数据，是一个长的很像JSON的字符串；在JavaScript中获取到后台返回的这个数据后，需要使用JSON.parse()将这个字符串转换为JSON对象，这样，JavaScript才能将其中的属性提取出来；（这个会很常用）</p><p>JSON转字符串：</p><p>这个在实际开发中不常用，了解就好了</p><h2 id="初始化JSON对象"><a href="#初始化JSON对象" class="headerlink" title="初始化JSON对象"></a>初始化JSON对象</h2><p>在JavaScript中可以将json看出一个对象，定义json后，可以通过设置属性的方式，初始化json；如下面的json2；</p><p>这种方式，更像是JavaScript把JSON当成了对象处理，很清晰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初始化JSON对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> json =&#123;<span class="string">&quot;class_name&quot;</span>:<span class="string">&quot;五年级六班&quot;</span>&#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span>  str =<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">info</span>(json);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">info</span>(str);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> json2=&#123;&#125;;<span class="comment">//这里将JSON对象当作对象处理，很清晰</span></span></span><br><span class="line"><span class="language-javascript">    json2.<span class="property">class_name</span>=<span class="string">&quot;五年级六班&quot;</span>;<span class="comment">//设置属性</span></span></span><br><span class="line"><span class="language-javascript">    json2.<span class="property">location</span>=<span class="string">&quot;图书馆&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">info</span>(json2);<span class="comment">//在控制台中输出</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON%E8%AE%BF%E9%97%AEJS10.png" alt="JSON访问JS10"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/05/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/05/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><ul><li>正则表达式是检查、匹配字符串的表达式</li><li>正则表达式是描述规则，主流语言都有良好的支持</li><li>字符串校验，查找与替换是正则表达式主要使用场景</li></ul><p>注：正则表达式是检查字符串的规则，比如是不是字母开头，长度是否超过八位，是否包括大写字母等等……可以采用传统的Java代码(或JavaScript代码)，来进行挨个判断处理，但会很低效，为了解决这类问题，正则表达式是一个很好的工具，Java提供了对正则表达式这个工具的支持</p><span id="more"></span><h3 id="正则表达式的案例"><a href="#正则表达式的案例" class="headerlink" title="正则表达式的案例"></a>正则表达式的案例</h3><ul><li>检查输入的身份证号码是否合法（15位，18位）</li><li>示例：13010220200328091x</li><li>正则表达式(^\d{15}$)|(^\d{18}$)|(^\d{17}$)|(^\d{X}$)</li></ul><h2 id="正则表达式之字符范围匹配"><a href="#正则表达式之字符范围匹配" class="headerlink" title="正则表达式之字符范围匹配"></a>正则表达式之字符范围匹配</h2><table><thead><tr><th>正则表达式</th><th>说明</th><th>正确</th><th>错误</th></tr></thead><tbody><tr><td>A</td><td>精准匹配单个字符</td><td>A</td><td>a</td></tr><tr><td>x|y</td><td>允许出现的2个字符</td><td>y</td><td>n</td></tr><tr><td>[xyz]</td><td>字符集合，允许出现集合内任意单个字符</td><td>z</td><td>c</td></tr><tr><td>[a-z],[A-Z],[0-9]</td><td>字符范围</td><td>a,D,8</td><td>A,a,A</td></tr><tr><td>[^xyz],[^0-9</td><td>集合内字符不允许出现</td><td>0,A</td><td>y,8</td></tr></tbody></table><p>注：</p><p>(1)正则表达式规定了匹配条件；</p><p>(2)会根据正则表达式定义的匹配条件，逐个字符的检验原字符串的字符，符合匹配条件的字符就匹配出来，不符合匹配条件的字符就匹配不出来；</p><p>(3)<a href="https://tool.oschina.net/regex:%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD%E6%8F%90%E4%BE%9B%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E6%B5%8B%E8%AF%95%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">https://tool.oschina.net/regex:开源中国提供的正则表达式测试工具，可以用来测试正则表达式</a></p><h3 id="正则表达式的匹配条件是单个字符"><a href="#正则表达式的匹配条件是单个字符" class="headerlink" title="正则表达式的匹配条件是单个字符"></a>正则表达式的匹配条件是单个字符</h3><p>单次匹配的结果也是单个字符，自然一个包含多个字符的字符串可以匹配成功多次</p><p>输入A，其意思是在字符串中找出A这个字符</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz.png" alt="javazz"></p><h3 id="正则表达式的匹配条件是两个字符都可以"><a href="#正则表达式的匹配条件是两个字符都可以" class="headerlink" title="正则表达式的匹配条件是两个字符都可以"></a>正则表达式的匹配条件是两个字符都可以</h3><p>如果输入的是A|C，其意思是分别匹配这两个单字符。</p><p>这里就是匹配字符串中的A和C</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz1.png" alt="javazz1"></p><h3 id="正则表达式的匹配条件是一个字符集合"><a href="#正则表达式的匹配条件是一个字符集合" class="headerlink" title="正则表达式的匹配条件是一个字符集合"></a>正则表达式的匹配条件是一个字符集合</h3><p>字符集合中的每个元素的单独匹配</p><p>如果输入[Ajd]，其意思是匹配字符串中的A，j，d这三个字符</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz2.png" alt="javazz2"></p><h3 id="正则表达式的匹配条件是一个字符集合，集合可以写成如0-9的范围"><a href="#正则表达式的匹配条件是一个字符集合，集合可以写成如0-9的范围" class="headerlink" title="正则表达式的匹配条件是一个字符集合，集合可以写成如0-9的范围"></a>正则表达式的匹配条件是一个字符集合，集合可以写成如0-9的范围</h3><p>这个按照情况多用于0-9，a-z，A-Z这些；</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz3.png" alt="javazz3"></p><h3 id="正则表达式的匹配条件的匹配条件是不希望出现某些字符"><a href="#正则表达式的匹配条件的匹配条件是不希望出现某些字符" class="headerlink" title="正则表达式的匹配条件的匹配条件是不希望出现某些字符"></a>正则表达式的匹配条件的匹配条件是不希望出现某些字符</h3><p>只是在[^]在中括号中多写一个^即可</p><p>下面的这个例子是，匹配出字符串中所有不是u字符的字符</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz4.png" alt="javazz4"></p><h3 id="字符范围匹配的案例"><a href="#字符范围匹配的案例" class="headerlink" title="字符范围匹配的案例"></a>字符范围匹配的案例</h3><h4 id="1-精准匹配”hello”或者”hallo”"><a href="#1-精准匹配”hello”或者”hallo”" class="headerlink" title="(1)精准匹配”hello”或者”hallo”"></a>(1)精准匹配”hello”或者”hallo”</h4><p>通过单个字符匹配与字符集合匹配来实现精准匹配，这个用法说白了就是”字符串匹配”，即正则表达式的匹配条件是一个字符串，只是在这些字符串中有些字符没有定死</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz5.png" alt="javazz5"></p><h4 id="2-精准匹配0570-0579"><a href="#2-精准匹配0570-0579" class="headerlink" title="(2)精准匹配0570-0579"></a>(2)精准匹配0570-0579</h4><p>通过正则表达式057[0-9]来实现用法</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz6.png" alt="javazz6"></p><h4 id="3-匹配ABCD中任意一个字符"><a href="#3-匹配ABCD中任意一个字符" class="headerlink" title="(3)匹配ABCD中任意一个字符"></a>(3)匹配ABCD中任意一个字符</h4><p>可以使用[A-D]或者[A-D]这两个正则表达式都可以达到想要的效果</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz7.png" alt="javazz7"></p><p>(4)正则表达式是一个字符串的时候，是完全匹配，注意这种形式</p><p>例如正则表达式为ff的时候，这时候只会找到ff这个字符串</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz8.png" alt="javazz8"></p><h2 id="正则表达式之元字符匹配"><a href="#正则表达式之元字符匹配" class="headerlink" title="正则表达式之元字符匹配"></a>正则表达式之元字符匹配</h2><p>好好理解下元的含义！元可以看出是一种指代，是后续基础基础性的东西</p><table><thead><tr><th>正则表达式</th><th>说明</th><th>正确</th><th>错误</th></tr></thead><tbody><tr><td>\d</td><td>匹配任意单个数字</td><td>8</td><td>i</td></tr><tr><td>\D</td><td>匹配\d规则之外的任意单个字符</td><td>i</td><td>8</td></tr><tr><td>\w</td><td>匹配任意单个字母，数字，下划线</td><td>Y</td><td>&amp;</td></tr><tr><td>\W</td><td>匹配\w之外的任意单个字符</td><td>&amp;</td><td>Y</td></tr><tr><td>\s</td><td>匹配单个空格</td><td></td><td>x</td></tr><tr><td>\n</td><td>匹配单个换行符</td><td>\r\n</td><td>x</td></tr><tr><td>.</td><td>匹配任意单个字符(换行符除外)</td><td>_</td><td>\r\n</td></tr><tr><td>\.</td><td>特殊字符，只匹配.</td><td>.</td><td>1</td></tr></tbody></table><h3 id="元字符范围匹配的案例"><a href="#元字符范围匹配的案例" class="headerlink" title="元字符范围匹配的案例"></a>元字符范围匹配的案例</h3><p>下面的几个例子，正则表达式的匹配条件都是字符串，只是这些字符串的某些字符可能是没有定死而已，而是使用了元字符去指代；自然，如果正则表达式的匹配条件是字符串的话，其匹配条件是字符串的话，其匹配结果也会是字符串，这种字符串形式应该是现在最常用的形式</p><h4 id="1-匹配四位整数六位小数的一个数字，如3467-798789："><a href="#1-匹配四位整数六位小数的一个数字，如3467-798789：" class="headerlink" title="(1)匹配四位整数六位小数的一个数字，如3467.798789："></a>(1)匹配四位整数六位小数的一个数字，如3467.798789：</h4><p>\d\d\d\d.\d\d\d\d\d\d其意思为匹配字符串中的前四位的数字然后匹配小数点，最后匹配小数点后面的6位的数字</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz9.png" alt="javazz9"></p><h4 id="2-匹配杭州与宁波的座机号码-0571-0574-XXXXXXXXXXXX"><a href="#2-匹配杭州与宁波的座机号码-0571-0574-XXXXXXXXXXXX" class="headerlink" title="(2)匹配杭州与宁波的座机号码(0571|0574-XXXXXXXXXXXX)"></a>(2)匹配杭州与宁波的座机号码(0571|0574-XXXXXXXXXXXX)</h4><p>正则表达式：057[1-4]-\d\d\d\d\d\d\d\d\d</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz10.png" alt="javazz10"></p><h4 id="3-匹配十八位身份证号："><a href="#3-匹配十八位身份证号：" class="headerlink" title="(3)匹配十八位身份证号："></a>(3)匹配十八位身份证号：</h4><p>身份证号码的规则是前面有17位数字，最后一个可能是数字也可能是X或者x</p><p>身份证号的第一位的范围是1234568这几个数字</p><p>可以采用正则表达式可以是:[1234568]\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d[0-9xX]</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz11.png" alt="javazz11"></p><h2 id="正则表达式之多次重复匹配"><a href="#正则表达式之多次重复匹配" class="headerlink" title="正则表达式之多次重复匹配"></a>正则表达式之多次重复匹配</h2><p>{},*,+,?是一个多次重复匹配修饰符，跟在其他字符后面，用来和其他字符组合使用</p><table><thead><tr><th>正则表达式</th><th>说明</th><th>正确</th><th>错误</th></tr></thead><tbody><tr><td>A{N}</td><td>精准匹配N次匹配</td><td>AAA……</td><td>AA</td></tr><tr><td>A{N，}</td><td>最少出现N次</td><td>AAA……</td><td>AA</td></tr><tr><td>\d{N，N+n}</td><td>约定出现的最少次数与最大次数</td><td>1234</td><td>12</td></tr><tr><td>\d*</td><td>可以出现零次至无限次，相当于{0,}</td><td>1234</td><td>12</td></tr><tr><td>\d+</td><td>最少出现一次，相当于{1,}</td><td>12</td><td></td></tr><tr><td>\d？</td><td>最多出现一次，相当于{0,1}</td><td>1</td><td>12</td></tr></tbody></table><h3 id="多次重复匹配的案例"><a href="#多次重复匹配的案例" class="headerlink" title="多次重复匹配的案例"></a>多次重复匹配的案例</h3><h4 id="1-匹配十八位身份证号"><a href="#1-匹配十八位身份证号" class="headerlink" title="(1)匹配十八位身份证号"></a>(1)匹配十八位身份证号</h4><p>同样是上面案例中的身份证号的匹配也可以使用：[1234568]\d{16}[0-9Xx]</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz12.png" alt="javazz12"></p><h4 id="2-验证短信验证码-6位数字"><a href="#2-验证短信验证码-6位数字" class="headerlink" title="(2)验证短信验证码(6位数字)"></a>(2)验证短信验证码(6位数字)</h4><p>使用正则表达式：\d{6}</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz13.png" alt="javazz13"></p><h4 id="3-匹配全国座机号"><a href="#3-匹配全国座机号" class="headerlink" title="(3)匹配全国座机号"></a>(3)匹配全国座机号</h4><p>区号3或者4位-电话号码7或8位</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz14.png" alt="javazz14"></p><h4 id="4-匹配英文姓名"><a href="#4-匹配英文姓名" class="headerlink" title="(4)匹配英文姓名"></a>(4)匹配英文姓名</h4><p>如：Gavin Wang：前面是名后面是姓，两个首字母大写，全部都是英文字母；名字多为多个英文字母，但姓有时候是可以简写为欸一个英文字母，如上面的可以简写为Gavin W</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz15.png" alt="javazz15"></p><h2 id="正则表达式之定位匹配"><a href="#正则表达式之定位匹配" class="headerlink" title="正则表达式之定位匹配"></a>正则表达式之定位匹配</h2><p>某个字符串以什么字符开头，以什么字符结尾，需要用到定位匹配</p><p>.：小数点代表任意单个字符*：星号代表0-无限</p><table><thead><tr><th>正则表达式</th><th>说明</th><th>正确</th><th>错误</th></tr></thead><tbody><tr><td>^A.*</td><td>头匹配</td><td>ABC……</td><td>CBA……</td></tr><tr><td>.*A$</td><td>尾匹配</td><td>CB……A</td><td>AB……C</td></tr><tr><td>^A.*A$</td><td>全字匹配</td><td>ACCC……A</td><td>ACCC……B</td></tr></tbody></table><h3 id="定位匹配的案例"><a href="#定位匹配的案例" class="headerlink" title="定位匹配的案例"></a>定位匹配的案例</h3><p>默认的正则表达式是在原始字符串中依次查找；；找到了以后符合的子字符串，会继续查找，所以下面查找到4个子字符串ab</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz16.png" alt="javazz16"></p><p>如果只输出^ab.*，这里只会匹配到开头的ab后面的字符就是.&#x2F;匹配到的内容</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz17.png" alt="javazz17"></p><p>有的场景是需要限制字符数量</p><p>如：[a-z]{3}ab$：匹配[a-z]的字符三次，最后以ab结尾的字符串</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz18.png" alt="javazz18"></p><p>在实际工作中，头尾同时匹配也很常见</p><p>^ab.*ab$：以ab开头与结尾，中间匹配任意字符</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz19.png" alt="javazz19"></p><h2 id="正则表达式之贪婪模式-amp-非贪婪模式"><a href="#正则表达式之贪婪模式-amp-非贪婪模式" class="headerlink" title="正则表达式之贪婪模式&amp;非贪婪模式"></a>正则表达式之贪婪模式&amp;非贪婪模式</h2><h3 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h3><ul><li>在满足条件的情况下尽可能多匹配到字符串</li><li>示例：111222333  正则：\d{6,9}</li><li>贪婪模式下会尽可能地多匹配，所以会匹配9个</li></ul><h3 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h3><ul><li>在满足条件地情况下尽可能减少匹配到地字符串，在正则表达式后增加?，则代表采用非贪婪模式</li><li>示例：111222333  正则：\d{6,9}?</li><li>非贪婪模式会尽可能少匹配，所以会匹配6个</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.sina.com&quot;</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要求是提取出其中地网址</p><p>正则表达式：”.*”,其意为” “中地任意字符匹配，这种写法是贪婪模式</p><p>会将中间地””也匹配出来</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz20.png" alt="javazz20"></p><p>将正则表达式后增加?,更改为非贪婪模式，就会得到我们想要地结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz21.png" alt="javazz21"></p><h2 id="正则表达式之表达式分组"><a href="#正则表达式之表达式分组" class="headerlink" title="正则表达式之表达式分组"></a>正则表达式之表达式分组</h2><p>将一个完整地正则表达式分组为多个子表达式的使用方法；利用表达式分组可以将一个大的表达式进行拆分</p><ul><li>分组将正则分组为多个子表达式</li><li>示例：abababcdcdcd</li><li>正则表达式：(ab){3}(cd){3}</li></ul><p>可以发现，通过表达式分组可以组合成更加复杂的[正则表达式的字符串]，从而可以匹配出更加复杂的字符串；同时表达式分组也可以让正则表达式更加清晰，可读性更高</p><h3 id="表达式分组的案例"><a href="#表达式分组的案例" class="headerlink" title="表达式分组的案例"></a>表达式分组的案例</h3><h4 id="1-匹配验证码"><a href="#1-匹配验证码" class="headerlink" title="(1)匹配验证码"></a>(1)匹配验证码</h4><p>这个例子主要体现：表达式分组和|符号的组合使用</p><p>正则表达式：^\d{4}$|^\d{6}$其意为开头为数字且结尾也是数字的字符串，|的意思是|两边二选一，所以这可以匹配4位验证码或者6位验证码</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz22.png" alt="javazz22"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javaz23.png" alt="javaz23"></p><h4 id="2-匹配车牌号"><a href="#2-匹配车牌号" class="headerlink" title="(2)匹配车牌号"></a>(2)匹配车牌号</h4><p><strong>这个例子主要体现：表达式分组可以让正则表达式更加清晰；</strong></p><p>车牌号规范是：一个汉字，一个大写字母，一个横杠 ；然后有5个字母和数字的组合；</p><p>可以采用：^([[鲁黑晋豫]][A-Z][A-Z])-([A-Z0-9]{5})$,这样写将前面匹配的，与后面匹配的字符串分隔开来可读性高</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz24.png" alt="javazz24"></p><h4 id="3-匹配中文或英文名字"><a href="#3-匹配中文或英文名字" class="headerlink" title="(3)匹配中文或英文名字"></a>(3)匹配中文或英文名字</h4><p>这个例子主要体现：表达式分组可以应对更加复杂的情况</p><p>英文姓名：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz25.png" alt="javazz25"></p><p>匹配中文可以采用\u4e00-\u9afa5：Unicode编码中文汉字编码区间，可以判断是不是中文</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz26.png" alt="javazz26"></p><p>将匹配中文和英文利用|符号，这样就可以判断中文或者英文</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz27.png" alt="javazz27"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/javazz28.png" alt="javazz28"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON简介与语法规则</title>
      <link href="/2022/05/10/JSON%E7%AE%80%E4%BB%8B%E4%B8%8E%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99-1/"/>
      <url>/2022/05/10/JSON%E7%AE%80%E4%BB%8B%E4%B8%8E%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99-1/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h2><ul><li><p>JavaScript Object Notation(JavaScript 对象表示法)</p></li><li><p>JSON是轻量级的文本数据交换格式</p></li><li><p>JSON独立于语言，具有自我描述性，更易理解</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;sites&quot;</span><span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;百度&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;b站&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.bilibili.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;网易&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.163.com&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>  JSON对于人来说，阅读体验很好；JSON规则清晰，容易被计算机解析，JSON已经越来越多的用在数据传递和数据表上，JSON已经逐渐替代了XML，成为了软件开发的主流数据表达形式</p>  <span id="more"></span></li></ul><h2 id="JSON语法规则"><a href="#JSON语法规则" class="headerlink" title="JSON语法规则"></a>JSON语法规则</h2><ul><li>数据由键(key)值(value)描述，由逗号分隔</li><li>{ }大括号代表一个完整的对象(JSON对象)，拥有多个键&#x2F;值对，其可以被javaScript直接识别</li><li>[ ]中括号保存数据，多个JSON对象(用{}大括号的是JSON对象)之间使用逗号分隔，[ ]对于了一个数组，数组中保存了多个JSON对象<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210109233300548.png" alt="img"></li></ul><h3 id="JSON简单示例程序"><a href="#JSON简单示例程序" class="headerlink" title="JSON简单示例程序"></a>JSON简单示例程序</h3><p>首先创建新的web工程，在web根目录下，创建json文件(点击file,创建.json文件)</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON1.png" alt="JSON1"></p><p>按照JSON语法创建一个员工信息表</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON2.png" alt="JSON2"></p><p>JSON书写到后面会变得很长，这时候我们需要进行编码格式化，点击编辑器上工具类中得code→Reformat Code</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON3.png" alt="JSON3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON简介与语法规则</title>
      <link href="/2022/05/07/JSON%E7%AE%80%E4%BB%8B%E4%B8%8E%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/"/>
      <url>/2022/05/07/JSON%E7%AE%80%E4%BB%8B%E4%B8%8E%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h2><ul><li><p>JavaScript Object Notation(JavaScript 对象表示法)</p></li><li><p>JSON是轻量级的文本数据交换格式</p></li><li><p>JSON独立于语言，具有自我描述性，更易理解</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;sites&quot;</span><span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;百度&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;b站&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.bilibili.com&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;网易&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.163.com&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>  JSON对于人来说，阅读体验很好；JSON规则清晰，容易被计算机解析，JSON已经越来越多的用在数据传递和数据表上，JSON已经逐渐替代了XML，成为了软件开发的主流数据表达形式</p></li></ul><span id="more"></span><h2 id="JSON语法规则"><a href="#JSON语法规则" class="headerlink" title="JSON语法规则"></a>JSON语法规则</h2><ul><li>数据由键(key)值(value)描述，由逗号分隔</li><li>{ }大括号代表一个完整的对象(JSON对象)，拥有多个键&#x2F;值对，其可以被javaScript直接识别</li><li>[ ]中括号保存数据，多个JSON对象(用{}大括号的是JSON对象)之间使用逗号分隔，[ ]对于了一个数组，数组中保存了多个JSON对象<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210109233300548.png" alt="img"></li></ul><h3 id="JSON简单示例程序"><a href="#JSON简单示例程序" class="headerlink" title="JSON简单示例程序"></a>JSON简单示例程序</h3><p>首先创建新的web工程，在web根目录下，创建json文件(点击file,创建.json文件)</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON1.png" alt="JSON1"></p><p>按照JSON语法创建一个员工信息表</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON2.png" alt="JSON2"></p><p>JSON书写到后面会变得很长，这时候我们需要进行编码格式化，点击编辑器上工具类中得code→Reformat Code</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSON3.png" alt="JSON3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP九大内置对象</title>
      <link href="/2022/05/02/JSP%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/05/02/JSP%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h2><p>Java九大内置对象：request和out对象用的多点，其他的用的很少</p><table><thead><tr><th>内置对象</th><th>描述</th></tr></thead><tbody><tr><td>request</td><td>请求对象 - HttpServletRequest</td></tr><tr><td>response</td><td>响应对象 - HttpServletResponse</td></tr><tr><td>session</td><td>用户对象 - HttpSession</td></tr><tr><td>application</td><td>应用全局对象 - ServletContext</td></tr><tr><td>out</td><td>输出对象 - PrintWriter</td></tr><tr><td>page</td><td>当前页面对象 - this</td></tr><tr><td>pageContext</td><td>页面上下文对象 - PageContext</td></tr><tr><td>config</td><td>应用配置对象 - ServletConfig</td></tr><tr><td>exception</td><td>应用异常对象 - Throwable</td></tr></tbody></table><span id="more"></span><p>JSP本身就是Servlet，我们知道Serblet中有很多对象，JSP为了简化操作，在JSP中设置了九大内置对象，这些对象与Servlet中的对象一 一对应；即当我们使用JSP内置对象的时候，其背后实际上会去调用Servlet中对应的对象（具体怎么调用的，无需关心，这是JSP背后默默在奉献……）；如，在JSP中使用request对象，其本质是使用Servlet中的HttpServletRequest对象<br>内置对象不是新的东西，其只是在Servlet的基础上，简化的预置的变量，<strong>也就是说JSP的本质就是Servlet</strong></p><h2 id="示例：内置对象可以在任何有效的Java代码块中直接调用"><a href="#示例：内置对象可以在任何有效的Java代码块中直接调用" class="headerlink" title="示例：内置对象可以在任何有效的Java代码块中直接调用"></a>示例：内置对象可以在任何有效的Java代码块中直接调用</h2><h3 id="示例1：request对象和response对象"><a href="#示例1：request对象和response对象" class="headerlink" title="示例1：request对象和response对象"></a>示例1：request对象和response对象</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A11.png" alt="JSP内置对象1"></p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220428203130337.png" alt="image-20220428203130337"></p><h3 id="示例二：out对象"><a href="#示例二：out对象" class="headerlink" title="示例二：out对象"></a>示例二：out对象</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%25E5%2586%2585%25E7%25BD%25AE%25E5%25AF%25B9%25E8%25B1%25A12.png" alt="JSP内置对象2"></p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A13.png" alt="JSP内置对象3"></p><h3 id="示例三：session对象："><a href="#示例三：session对象：" class="headerlink" title="示例三：session对象："></a>示例三：session对象：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A14.png" alt="JSP内置对象4"></p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%25E5%2586%2585%25E7%25BD%25AE%25E5%25AF%25B9%25E8%25B1%25A15.png" alt="JSP内置对象5"></p><h3 id="示例四：application对象"><a href="#示例四：application对象" class="headerlink" title="示例四：application对象"></a>示例四：application对象</h3><p>applicaton对象的本质就是ServletContext，ServletContext中的方法，application也能使用</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A16.png" alt="JSP内置对象6"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A17.png" alt="JSP内置对象7"></p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A18.png" alt="JSP内置对象8"></p><h3 id="示例五：pageContext对象"><a href="#示例五：pageContext对象" class="headerlink" title="示例五：pageContext对象"></a>示例五：pageContext对象</h3><p>pageContext对象用于获取其他的内置对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%25E5%2586%2585%25E7%25BD%25AE%25E5%25AF%25B9%25E8%25B1%25A19.png" alt="JSP内置对象9"></p><h3 id="示例六：exception对象"><a href="#示例六：exception对象" class="headerlink" title="示例六：exception对象"></a>示例六：exception对象</h3><p>即使不考虑JSP内置对象，这里也提供了一种，通过JSP文件动态实现404，500等错误界面的策略</p><p>如前面，在web.xml中配置404等错误默认界面的时候，定义了404.html</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220428213516659.png" alt="image-20220428213516659"></p><p>404.html：这个界面其实是个定死的东西，在实际中，这个界面最好是动态的，可以动态的显示错误的信息</p><p>所以该怎么做呢？</p><p>第一步在error文件夹中创建404.jsp文件与500.jsp文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A110.png" alt="JSP内置对象10"></p><p>第二步在web.xml中进行更改</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A111.png" alt="JSP内置对象11"></p><p>第三步在500.jsp中进行对应的操作</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A112.png" alt="JSP内置对象12"></p><p>第四步查看效果</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210106134448321.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet之cookie</title>
      <link href="/2022/04/26/Servlet%E4%B9%8Bcookie/"/>
      <url>/2022/04/26/Servlet%E4%B9%8Bcookie/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器Cookie"><a href="#浏览器Cookie" class="headerlink" title="浏览器Cookie"></a>浏览器Cookie</h2><ul><li><strong>Cookie（曲奇饼干）是浏览器保存在本地的文本内容</strong></li><li>Cookie常用于保存登录状态、用户资料等小文本</li><li>Cookie具有时效性，Cookie内容会伴随请求发送给Tomcat</li><li>默认没有设置cookie时效性的情况下，cookie的有效期就是为当前浏览器窗口</li></ul><span id="more"></span><h3 id="Cookie的例子"><a href="#Cookie的例子" class="headerlink" title="Cookie的例子"></a>Cookie的例子</h3><p>例如一个平常登录的一个网站，如果选择”7天内自动登录”，登录后，关闭浏览器；重新打开浏览器，会发现登录状态并没有消失</p><p>底层的原理：利用Cookie技术，存放了用户的登录信息；浏览器二次访问时，浏览器会把Cookie中存放的用户登录信息提取出来，并通知服务器说之前这个用户已经登录过了，并不需要重新登录</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220423212850398.png" alt="image-20220423212850398"></p><h3 id="存放Cookie的文件放在哪里"><a href="#存放Cookie的文件放在哪里" class="headerlink" title="存放Cookie的文件放在哪里"></a>存放Cookie的文件放在哪里</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210105021346629.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210105021449657.png" alt="img"></p><h3 id="设置Cookie示例"><a href="#设置Cookie示例" class="headerlink" title="设置Cookie示例"></a>设置Cookie示例</h3><h4 id="向浏览器发送cookie"><a href="#向浏览器发送cookie" class="headerlink" title="向浏览器发送cookie"></a>向浏览器发送cookie</h4><p>设置Cookie，并将Cookie信息随着response(响应)发回到浏览器端；浏览器将这个Cookie信息保存到本地的文件中；之后每一次请求，request(请求对象)都会包含这个Cookie信息，一并发送到对应的地址上。<strong>所以要先设置发送到浏览器cookie值(respone)，然后的请求就带有cookie值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;LoginServlet&quot;, value = &quot;/cookies/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户登录成功&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//cookie的核心方法，第一个参数是cookie的名称，第二个参数是在cookie中要保存的数据</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;admin&quot;</span>);<span class="comment">//创建cookie</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果想让Cookie保存在客户端浏览器（中，需要调用下面的addCookie()方法</span></span><br><span class="line">        response.addCookie(cookie);<span class="comment">//在客户端浏览器中增加名字为user值为admin的Cookie</span></span><br><span class="line">        response.getWriter().println(<span class="string">&quot;Login success&quot;</span>);<span class="comment">//页面上输出Login Success</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220424140611052.png" alt="image-20220424140611052"></p><p>查看Cookie是否生效，在浏览器中F12查看</p><p>可以看到图片中的**user:”admin”**这个的含义是：对于当前的浏览器来说，每次发送请求的时候，都会将user&#x3D;admin随着请求一并发送到Tomcat服务器上</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/1401.png" alt="1401"></p><h4 id="服务器获取cookie"><a href="#服务器获取cookie" class="headerlink" title="服务器获取cookie"></a>服务器获取cookie</h4><p>直接上代码演示</p><p>服务器先向浏览器上发送cookie（response），并保存在本地，之后的每一次浏览器请求都带有这个cookie的值，所以必须先登录让浏览器端之后的请求中带有cookie值，然后服务器端才可以获取到cookie的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;LoginServlet&quot;, value = &quot;/cookies/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户登录成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cookie的核心方法，第一个参数是cookie的名称，第二个参数是在cookie中要保存的数据</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果想让Cookie保存在客户端浏览器中，需要调用下面的addCookie()方法</span></span><br><span class="line">        response.addCookie(cookie);<span class="comment">//在客户端浏览器中增加名字为user值为admin的Cookie</span></span><br><span class="line">        response.getWriter().println(<span class="string">&quot;Login success&quot;</span>);<span class="comment">//页面上输出Login Success</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;LoginIndexServlet&quot;, value = &quot;/cookies/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginIndexServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//getCookies()方法，获取请求中的Cookie信息，集合的形式</span></span><br><span class="line">        Cookie[] cs =request.getCookies();</span><br><span class="line">        String user=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Cookie c:cs)&#123;</span><br><span class="line">            <span class="comment">//c.getName():获取Cookie名称；c.getValue:获取Cookie的值</span></span><br><span class="line">            System.out.println(c.getName()+<span class="string">&quot;:&quot;</span>+c.getValue());</span><br><span class="line">            <span class="keyword">if</span> (c.getName().equals(<span class="string">&quot;user&quot;</span>))&#123;<span class="comment">//判断cookie的user的值是否为user，如果是，则获取到user的value值</span></span><br><span class="line">                user=c.getValue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;<span class="comment">//如果获取到的cookie的</span></span><br><span class="line">            response.getWriter().println(<span class="string">&quot;user not login&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/1845.png" alt="1845"></p><h3 id="Cookie的时效性"><a href="#Cookie的时效性" class="headerlink" title="Cookie的时效性"></a>Cookie的时效性</h3><p><strong>当Cookie没有设置有效期时，Cookie的有效期就是当前的浏览器窗口：</strong></p><p>在上面的例子中，我们先访问了LoginServlet这个Servlet，我们是在这个Servlet中设置增加的Cookie，然后在没有关闭浏览器的情况下，又访问了IndexServlet这个Servlet，在这个Servlet中我们访问了Cookie并获取到Cookie的值</p><p>其实是因为我们没有关闭浏览器，所以在LoginServlet设置Cookie信息会有效，IndexServlet能支持访问到Cookie的信息，但一旦，我们关闭了浏览器，重新打开浏览器，直接访问IndexServlet时，会报错，Cookie失效了</p><p><img src= "/img/loading.gif" data-lazy-src="D:\Documents\1915.png" alt="1915"></p><p>但是这里的报错是空指针异常，就是没有cookie值，cookie数组是空的（因为所有的Cookie信息都失效了），会引发空指针异常</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/1921.png" alt="1921"></p><p>可以将上面的程序更改一下，增强健壮性</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/1934.png" alt="1934"></p><p>没有访问LoginServlet的情况下，访问IndexServlet，就会输出user not login</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220425193558361.png" alt="image-20220425193558361"></p><h4 id="设置Cookie时效性"><a href="#设置Cookie时效性" class="headerlink" title="设置Cookie时效性"></a>设置Cookie时效性</h4><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/2032.png" alt="2032"></p><p>先访问LoginServlet，先让浏览器将cookie信息保存，让后面request请求中带有cookie信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220425200041766.png" alt="image-20220425200041766"></p><p>关闭浏览器：然后重新启动Tomcat服务，访问IndexServlet：结果是发现Cookie并没有因为关闭浏览器而失效，因为我们把其时效性设置为7天</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220425202552895.png" alt="image-20220425202552895"></p><hr><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ol><li>cookie（大概率）也是浏览器自动创建的，浏览器会在本地创建一个存放所有Cookie对象的列表：然后我们也可以通过<br> Cookie cookie  &#x3D; new Cookie(“user”,”admin”); 自己创建一个cookie，然后通过response.addCookie(cookie); 响应返回浏览器，然后浏览器会把这个返回cookie添加到自己维护的cookie列表中; 然后通过Cookie[] cs &#x3D; request.getCookies(); 获取所有cookie列表</li><li>换句话说，Cookie是浏览器创建和维护的；这是个特殊的Java对象，这些对象有很多属性和方法，我们可以按需调用</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet之请求与响应</title>
      <link href="/2022/04/23/Servlet%E4%B9%8B%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/"/>
      <url>/2022/04/23/Servlet%E4%B9%8B%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP请求的结构"><a href="#HTTP请求的结构" class="headerlink" title="HTTP请求的结构"></a>HTTP请求的结构</h2><ul><li><p>HTTP请求包含三部分：请求行、请求头、请求体<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220421160256593.png" alt="image-20220421160256593"></p>  <span id="more"></span></li><li><p>请求行：说明请求方法，请求的Url，HTTP的版本信息</p></li><li><p>请求头：包含了很多辅助性的信息，可以为程序处理提供额外的数据支持</p><table><thead><tr><th>请求头中的内容</th><th>作用</th></tr></thead><tbody><tr><td>Accept-Language:zh-CN</td><td>当前浏览器所设置的语言</td></tr><tr><td>User-Agent:Mozilla&#x2F;4.0(compatible;MSIE 8.0;Windows NT 6.1)</td><td>说明浏览器和操作系统的环境</td></tr><tr><td>Content-Length:112</td><td>代表内容的长度</td></tr><tr><td>Cache-Control:no-cache</td><td>缓存的设置</td></tr><tr><td>Cookie:…………</td><td>Cookie的设置</td></tr></tbody></table></li><li><p>请求体：参数：get没有请求体，<strong>需要注意的是get请求，把参数放在URL中，其实是没有请求体的；只有Post请求才有请求体</strong></p></li></ul><h3 id="HTTP的Get请求"><a href="#HTTP的Get请求" class="headerlink" title="HTTP的Get请求"></a>HTTP的Get请求</h3><p>在Tomcat中编写get请求的简单案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Servlet文件</span></span><br><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;RequestServlet&quot;, value = &quot;/RequestServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;This is get method&quot;</span>);<span class="comment">//得到Get请求后，响应后，在页面输出</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;This is post method&quot;</span>);<span class="comment">//得到Post请求后，响应后，在页面输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--html文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;RequestServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span><span class="comment">&lt;!--链接RequestServlet文件，发送get请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Query String是Get传参的标志</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220421185615265.png" alt="image-20220421185615265"></p><h3 id="HTTP的Post请求"><a href="#HTTP的Post请求" class="headerlink" title="HTTP的Post请求"></a>HTTP的Post请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Servlet文件</span></span><br><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;RequestServlet&quot;, value = &quot;/RequestServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;This is get method&quot;</span>);<span class="comment">//得到Get请求后，响应后，在页面输出</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;This is post method&quot;</span>);<span class="comment">//得到Post请求后，响应后，在页面输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--html文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;RequestServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="comment">&lt;!--链接RequestServlet文件，发送get请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Form Data是Post请求的标志</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220421185950250.png" alt="image-20220421185950250"></p><h2 id="利用请求头开发多端应用"><a href="#利用请求头开发多端应用" class="headerlink" title="利用请求头开发多端应用"></a>利用请求头开发多端应用</h2><p>情况展示：</p><p>平时，同一个网站，在电脑上和手机上显示效果完全不同，这背后的本质就是程序通过读取请求头（<strong>User-Agent</strong>）来判断是手机还是电脑</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104143546137.png" alt="img"></p><p>发现不同版本上的显示效果不同，然后请求头中的User-Agent也不同</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104143833973.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104143934120.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104144052992.png" alt="img"></p><h3 id="获取当前请求头中的User-Agent信息"><a href="#获取当前请求头中的User-Agent信息" class="headerlink" title="获取当前请求头中的User-Agent信息"></a>获取当前请求头中的User-Agent信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;UserAgeServlet&quot;, value = &quot;/UserAgeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAgeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span>request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);<span class="comment">//获取请求头中的“User-Agent”的值</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);<span class="comment">//设置响应，让其支持中文</span></span><br><span class="line">        response.getWriter().println(userAgent);<span class="comment">//响应输出页面的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104145252480.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104145428246.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210104145527288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzdWNzZ29hdA==,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="根据User-Agent信息，判断是PC端还是移动端"><a href="#根据User-Agent信息，判断是PC端还是移动端" class="headerlink" title="根据User-Agent信息，判断是PC端还是移动端"></a>根据User-Agent信息，判断是PC端还是移动端</h3><p>判断出是PC端还是移动端，方便后续区别处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;UserAgeServlet&quot;, value = &quot;/UserAgeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAgeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span>request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);<span class="comment">//获取请求头中的“User-Agent”的值</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);<span class="comment">//设置响应，让其支持中文</span></span><br><span class="line">        response.getWriter().println(userAgent);<span class="comment">//响应输出页面的值，这里的值为userAgent的值</span></span><br><span class="line">        String output=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (userAgent.indexOf(<span class="string">&quot;Windows NT&quot;</span>)!=-<span class="number">1</span>)&#123;<span class="comment">//indexof查找字符串，找到字符串返回的是大于0的数字，所以当不等于-1的时候一定是找到了这个值</span></span><br><span class="line">            output=<span class="string">&quot;&lt;h1&gt;这是PC端首页&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (userAgent.indexOf(<span class="string">&quot;iPhone&quot;</span>)!=-<span class="number">1</span> || userAgent.indexOf(<span class="string">&quot;Android&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">            output=<span class="string">&quot;&lt;h1&gt;这是移动端首页&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.getWriter().println(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210104150519944.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210104150501475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzdWNzZ29hdA==,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="服务器的响应的结构"><a href="#服务器的响应的结构" class="headerlink" title="服务器的响应的结构"></a>服务器的响应的结构</h2><p><strong>请求是浏览器向服务器发送的请求，而响应则是服务器返回给浏览器的显示结果</strong></p><ul><li><p>HTTP响应包含三部分：响应行、响应头、响应体<br>  <img src= "/img/loading.gif" data-lazy-src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20220421204608353.png" alt="image-20220421204608353"></p></li><li><p>Content-Type：text&#x2F;html表示，把响应体中内容当成text&#x2F;html去解释；浏览器会按照text&#x2F;html的方式去解释响应体中的内容</p></li><li><p>HTTP常见状态码<br>  如url网址输错的时候，会报404；如果Java的代码出了错误，会报500等；浏览器可以根据响应返回状态码，来知道服务器是处理成功还是出现了问题</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220421210137173.png" alt="image-20220421210137173"></p></li><li><p>网页中的响应内容与响应体<br>  <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210104222445998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzdWNzZ29hdA==,size_16,color_FFFFFF,t_70" alt="img"><br>  <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210104222555193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzdWNzZ29hdA==,size_16,color_FFFFFF,t_70" alt="img"><br>  <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210104222636418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzdWNzZ29hdA==,size_16,color_FFFFFF,t_70" alt="img"></p></li><li><p>常见状态码演示<br>  404：例如这里我少输出了文件名字<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220421212129141.png" alt="image-20220421212129141"></p><p>  500：服务器的内部错误，去寻找java源代码中的错误<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220421213310953.png" alt="image-20220421213310953"></p></li></ul><h2 id="ContentType的作用"><a href="#ContentType的作用" class="headerlink" title="ContentType的作用"></a>ContentType的作用</h2><ul><li>ContentType决定浏览器采用何种方式对响应体进行处理<br>  <img src= "/img/loading.gif" data-lazy-src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20220421214309570.png" alt="image-20220421214309570"></li><li>浏览器可以理解成是一个解释器（解释器响应体中的内容，并体现在浏览器页面上）；Content-Type属性值，就是浏览器对响应体内容采取何种方式；其默认是text&#x2F;html</li></ul><h3 id="ContentType的示例"><a href="#ContentType的示例" class="headerlink" title="ContentType的示例"></a>ContentType的示例</h3><p><strong>Content-Type设置为”text&#x2F;html”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ContentTypeServlet&quot;, value = &quot;/ContentTypeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentTypeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        String output=<span class="string">&quot;&lt;h1&gt;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;&lt;span&gt;百度&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);<span class="comment">//设置ContentType的值为text/html</span></span><br><span class="line">        response.getWriter().println(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104225755728.png" alt="img"></p><p><strong>Content-Type设置为”text&#x2F;plain”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ContentTypeServlet&quot;, value = &quot;/ContentTypeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentTypeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        String output=<span class="string">&quot;&lt;h1&gt;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;&lt;span&gt;百度&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);<span class="comment">//设置ContentType的值为text/plain</span></span><br><span class="line">        response.getWriter().println(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104225933866.png" alt="img"></p><p><strong>Content-Type设置为”text&#x2F;xml”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ContentTypeServlet&quot;, value = &quot;/ContentTypeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentTypeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        String output=<span class="string">&quot;&lt;h1&gt;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;&lt;span&gt;百度&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=utf-8&quot;</span>);<span class="comment">//设置ContentType的值为text/xml</span></span><br><span class="line">        response.getWriter().println(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104230402441.png" alt="img"></p><p><strong>Content-Type设置为”application&#x2F;x-msdownload”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ContentTypeServlet&quot;, value = &quot;/ContentTypeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentTypeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        String output=<span class="string">&quot;&lt;h1&gt;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;&lt;span&gt;百度&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=utf-8&quot;</span>);<span class="comment">//设置ContentType的值为application/x-msdownload</span></span><br><span class="line">        response.getWriter().println(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104230702761.png" alt="img"></p><h2 id="请求转发与重定向"><a href="#请求转发与重定向" class="headerlink" title="请求转发与重定向"></a>请求转发与重定向</h2><p>以前接触的都是一个Servlet内处理；而实际情况中，是需要多个Servlet之间跳转的，而Servlet之间的跳转方式为：请求转发和响应重定向</p><ul><li>多个Servlet(JSP)之间跳转有两种方式</li><li>request.getRequestDispatcher().forward() - 请求转发</li><li>response.sendRedirect() - 响应重定向</li></ul><h3 id="Servlet请求转发的原理"><a href="#Servlet请求转发的原理" class="headerlink" title="Servlet请求转发的原理"></a>Servlet请求转发的原理</h3><ul><li>请求转发是服务器内部跳转，只会产生一次请求</li><li>请求转发的语句是：request.getRequestDispatcher().forward<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220423220425705.png" alt="image-20220423220425705"></li></ul><h3 id="Servlet请求转发案例"><a href="#Servlet请求转发案例" class="headerlink" title="Servlet请求转发案例"></a>Servlet请求转发案例</h3><p>案例分析：例如在登录这个功能上，在登录界面，输入用户名和密码后并点击登录后；其会跳转到登录成功后的那个界面。这个案例主要是为了说明在实际开发中，Servlet是需要在不同页面上跳转显示的</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/XXKF3TPJFOUMAZ7%7EPIV%257B837.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/T5%60LKD2%7DL4~K8E368IBBK9Y.png" alt="img"></p><p>请求转发的设置</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/123.png" alt="img"></p><p>请求转发的效果</p><p>可以看到地址栏的url没有改变</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/20210104234842566.png" alt="img"></p><p>分析：输入<a href="http://localhost:8080/servlet_advanced/direct/check%E5%90%8E%EF%BC%8C%E4%BC%9A%E5%85%88%E8%BF%9B%E5%85%A5CheckLoginServlet%E8%BF%99%E4%B8%AAServlet%EF%BC%8C%E5%B9%B6%E6%89%93%E5%8D%B0%22%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F">http://localhost:8080/servlet_advanced/direct/check后，会先进入CheckLoginServlet这个Servlet，并打印&quot;用户登录成功</a>“</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220423172143698.png" alt="image-20220423172143698"></p><p>然后请求转发到IndexServlet的这个Servlet上，并触发了IndexServlet中的输出语句：This is index page！</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220423185815451.png" alt="image-20220423185815451"></p><h3 id="Servlet响应重定向的原理"><a href="#Servlet响应重定向的原理" class="headerlink" title="Servlet响应重定向的原理"></a>Servlet响应重定向的原理</h3><ul><li>重定向则是浏览器端跳转，会产生两次请求</li><li>响应重定向语句是：response.sendRedirect()<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/1933.png" alt="1933"></li></ul><h2 id="设置请求自定义属性"><a href="#设置请求自定义属性" class="headerlink" title="设置请求自定义属性"></a>设置请求自定义属性</h2><ul><li>请求允许创建自定义属性</li><li>设置请求属性：request.setAttribute(属性名，属性值)</li><li>获取请求属性：Object attr &#x3D; request.getAttribute(属性名)</li></ul><h3 id="请求转发的情况下，获取自定义属性示例"><a href="#请求转发的情况下，获取自定义属性示例" class="headerlink" title="请求转发的情况下，获取自定义属性示例"></a>请求转发的情况下，获取自定义属性示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet.direction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;CheckLoginServlet&quot;, value = &quot;/direct/check&quot;)</span><span class="comment">//文件名CheckLoginServlet，路径/direct/check</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckLoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户登录成功&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);<span class="comment">//请求转发的情况下设置属性名和属性值</span></span><br><span class="line">        <span class="comment">//request.getRequestDispatcher()方法相当于是一个请求分发器</span></span><br><span class="line">        <span class="comment">//实现了请求转发的功能,/direct/check会跳转到/direct/index下</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/direct/index&quot;</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet.direction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;IndexServlet&quot;, value = &quot;/direct/index&quot;)</span><span class="comment">//文件名IndexServlet，路径/direct/index</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;This is index page!&quot;</span>+name);</span><br><span class="line">        String username= (String) request.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/2014.png" alt="img"></p><h3 id="响应重定向的情况下，获取自定义属性示例"><a href="#响应重定向的情况下，获取自定义属性示例" class="headerlink" title="响应重定向的情况下，获取自定义属性示例"></a>响应重定向的情况下，获取自定义属性示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet.direction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;CheckLoginServlet&quot;, value = &quot;/direct/check&quot;)</span><span class="comment">//文件名CheckLoginServlet，路径/direct/check</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckLoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户登录成功&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);<span class="comment">//请求转发的情况下设置属性名和属性值</span></span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/servlet/direct/index&quot;</span>);<span class="comment">//响应重定向需要增加contextPath(即上下文路径)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet.direction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;IndexServlet&quot;, value = &quot;/direct/index&quot;)</span><span class="comment">//文件名IndexServlet，路径/direct/index</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;This is index page!&quot;</span>+name);</span><br><span class="line">        String username= (String) request.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/2025.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet入门</title>
      <link href="/2022/04/18/Servlet%E5%85%A5%E9%97%A8/"/>
      <url>/2022/04/18/Servlet%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="软件结构发展史"><a href="#软件结构发展史" class="headerlink" title="软件结构发展史"></a>软件结构发展史</h2><ul><li>单击模式-桌面应用</li><li>联机时代(Client-Server模式)</li><li>互联网时代(Browser-Server模式)</li></ul><span id="more"></span><h3 id="单击时代-桌面应用"><a href="#单击时代-桌面应用" class="headerlink" title="单击时代-桌面应用"></a>单击时代-桌面应用</h3><ul><li>桌面应用俗称单机应用，软件所有数据都保存在电脑本地硬盘中</li><li>优点：易于使用，结构简单</li><li>缺点：数据难以共享、安全性差、更新不及时</li></ul><h3 id="联机时代-Client-Server模式"><a href="#联机时代-Client-Server模式" class="headerlink" title="联机时代(Client-Server模式)"></a>联机时代(Client-Server模式)</h3><ul><li>Client&#x2F;Server结构(C&#x2F;S结构)是指客户端和服务器结构</li><li>优点：数据方便共享，安全性高</li><li>缺点：必须安装客户端，升级与维护困难</li></ul><h3 id="互联网时代-Browser-Server模式"><a href="#互联网时代-Browser-Server模式" class="headerlink" title="互联网时代(Browser-Server模式)"></a>互联网时代(Browser-Server模式)</h3><ul><li>Browser-Server(B&#x2F;S)模式即浏览器和服务器结构模式</li><li>优点：开发简单，无需安装客户端，数据易于共享</li><li>缺点：相较于C&#x2F;S模式，执行速度与用户体验相对较弱</li></ul><h3 id="B-x2F-S模式执行流程"><a href="#B-x2F-S模式执行流程" class="headerlink" title="B&#x2F;S模式执行流程"></a>B&#x2F;S模式执行流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418215229936.png" alt="image-20220418215229936"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220415192833606.png" alt="image-20220415192833606"></p><h3 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h3><ul><li>从浏览器发出送个服务器的数据包称为”请求(Request)”</li><li>从服务器返回给浏览器的结果称为”响应(Response)”</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418215248170.png" alt="image-20220418215248170"></p><h2 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h2><h3 id="JavaEE是什么"><a href="#JavaEE是什么" class="headerlink" title="JavaEE是什么"></a>JavaEE是什么</h3><ul><li>JavaEE是J2EE的新名称</li><li>开发BS(Web)应用程序就是JavaEE最核心的功能</li><li>JavaEE是由13个功能模块组成</li></ul><h3 id="JavaEE中13个功能模块"><a href="#JavaEE中13个功能模块" class="headerlink" title="JavaEE中13个功能模块"></a>JavaEE中13个功能模块</h3><table><thead><tr><th>模块名</th><th>模块功能</th></tr></thead><tbody><tr><td>Servlet</td><td>web服务器小程序</td></tr><tr><td>JSP</td><td>服务器页面</td></tr><tr><td>JDBC</td><td>数据库交互模块</td></tr><tr><td>XML</td><td>XML交互模式</td></tr><tr><td>EJB</td><td>企业级Java Bean</td></tr><tr><td>RMI</td><td>远程调用</td></tr><tr><td>JNDI</td><td>目录服务</td></tr><tr><td>JMS</td><td>消息服务</td></tr><tr><td>JTA</td><td>事务管理</td></tr><tr><td>JavaMail</td><td>发送&#x2F;接受Email</td></tr><tr><td>JAF</td><td>安全框架</td></tr><tr><td>CORBA</td><td>安全框架</td></tr><tr><td>JTS</td><td>CORBA事务框架</td></tr></tbody></table><h3 id="Apache-Tomcat"><a href="#Apache-Tomcat" class="headerlink" title="Apache Tomcat"></a>Apache Tomcat</h3><ul><li>Tomcat是Apache软件基金会旗下的一款免费的开放源代码的web应用服务器程序</li></ul><h3 id="JavaEE与Tomcat的关系"><a href="#JavaEE与Tomcat的关系" class="headerlink" title="JavaEE与Tomcat的关系"></a>JavaEE与Tomcat的关系</h3><ul><li>JavaEE是一组技术规范与指南，具体实现由软件厂商决定</li><li>Tomcat是JavaEE Web(Servlet与JSP)标准的实现者</li><li>JavaSE是JavaEE运行的基石，运行Tomcat离不开JavaSE</li><li>Tomcat相当于硬件，Servlet相当于硬件上的小程序编写代码</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220415203100362.png" alt="image-20220415203100362"></p><h3 id="标准Java-Web工程结构"><a href="#标准Java-Web工程结构" class="headerlink" title="标准Java Web工程结构"></a>标准Java Web工程结构</h3><table><thead><tr><th>组织结构</th><th>描述</th></tr></thead><tbody><tr><td>tomcat安装目录&#x2F;webapps</td><td>Tomcat应用根目录</td></tr><tr><td>&#x2F;web应用目录&#x2F;</td><td>Java Web应用目录</td></tr><tr><td>&#x2F;web应用目录&#x2F;index.html | .jsp</td><td>默认首页</td></tr><tr><td>&#x2F;WEB-INF</td><td>WEB应用的安全目录，用于存放配置文件</td></tr><tr><td>&#x2F;WEB-INF&#x2F;web.xml</td><td>web.xml是”部署描述符文件”，是该Web项目核心配置文件</td></tr><tr><td>&#x2F;WEB-INF&#x2F;classes</td><td>存放src下的文件编译后的classes文件</td></tr><tr><td>&#x2F;WEB-INF&#x2F;lib</td><td>用于存放web应用依赖的jar文件</td></tr><tr><td>&#x2F;META-INF&#x2F;MANIFEST.MF</td><td>包含Web应用的版本等信息</td></tr></tbody></table><h2 id="JavaEE中的Servlet模块"><a href="#JavaEE中的Servlet模块" class="headerlink" title="JavaEE中的Servlet模块"></a>JavaEE中的Servlet模块</h2><h3 id="Servlet模块"><a href="#Servlet模块" class="headerlink" title="Servlet模块"></a>Servlet模块</h3><ul><li>Servlet（Server Applet）服务器小程序，主要功能用于<strong>生成动态Web内容</strong></li><li>Servlet是JavaEE最重要的组成部分，也是我们学习的重点</li></ul><h3 id="Servlet的开发步骤"><a href="#Servlet的开发步骤" class="headerlink" title="Servlet的开发步骤"></a>Servlet的开发步骤</h3><ul><li>创建Servlet类,继承HttpServlet</li><li>重写service方法，编写程序代码</li><li>配置web.xml，绑定URL形成映射</li></ul><h3 id="Servlet的访问方法"><a href="#Servlet的访问方法" class="headerlink" title="Servlet的访问方法"></a>Servlet的访问方法</h3><ul><li><a href="http://IP地址:端口/context-path/url-mapping">http://IP地址:端口/context-path/url-mapping</a></li><li>远程访问使用IP地址，本地访问localhost（127.0.0.1）</li><li>context-path成为”上下文路径”，默认为工程名</li></ul><h3 id="请求参数的发送与接受"><a href="#请求参数的发送与接受" class="headerlink" title="请求参数的发送与接受"></a>请求参数的发送与接受</h3><ul><li>请求参数是指浏览器通过请求向Tomcat提交的数据</li><li>请求参数通常是用户输入的数据，待Servlet进行处理</li><li>参数名1&#x3D;值&amp;参数名2&#x3D;值2&amp;参数名n&#x3D;…</li><li>request.getParanmeter() -接收单个参数，返回的是一个字符串</li><li>request.getParameterValues() -接收多个同名的参数，返回一个数组</li></ul><p>创建一个表单：在web目录下创建一个student.html表单，action引向表单传递位置</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418163008112.png" alt="image-20220418163008112"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--student.html--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网页地址为http://localhost:8080/hi/student.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息登记表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/hi/sample&quot;</span>&gt;</span><span class="comment">&lt;!--action表示的是表单传递的地址--&gt;</span></span><br><span class="line">  姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  电话:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;moblie&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  性别:</span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;padding:5px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  特长:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">value</span>=<span class="string">&quot;English&quot;</span> /&gt;</span>英语</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Program&quot;</span> /&gt;</span>编程</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Speak&quot;</span> /&gt;</span>演讲</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Swimming&quot;</span> /&gt;</span>游泳</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sampleservlet，在web.xml中的别名为sample，这里重写的doGet方法</span></span><br><span class="line"><span class="comment">//表单传递的位置是这个java文件</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;SampleServlet&quot;, value = &quot;/SampleServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        String name=request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//获取到请求中的单个参数</span></span><br><span class="line">        String mobile=request.getParameter(<span class="string">&quot;moblie&quot;</span>);</span><br><span class="line">        String sex=request.getParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        String[] specs=request.getParameterValues(<span class="string">&quot;spec&quot;</span>);<span class="comment">//获取到多个同名参数的数组</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span>response.getWriter();<span class="comment">//response(响应)向浏览器输出数据流</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;a href=&#x27;https://www.baidu.com&#x27;&gt;Baidu&lt;/a&gt;&quot;</span>);<span class="comment">//向浏览器中输入我们想要的东西，这里是一个超链接</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;name:&quot;</span>+name+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);<span class="comment">//在浏览器中输出请求中的参数</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;moblie:&quot;</span>+mobile+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;sex:&quot;</span>+sex+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;specs.length;i++)&#123;<span class="comment">//输出同名的参数</span></span><br><span class="line">            out.println(<span class="string">&quot;&lt;h1&gt;spec:&quot;</span>+specs[i]+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Get与Post请求方法"><a href="#Get与Post请求方法" class="headerlink" title="Get与Post请求方法"></a>Get与Post请求方法</h3><ul><li>Get方式是将数据通过URL附加数据显示向服务器发送数据。应用场景：Get常用于不包含敏感信息的查询功能<br>  <a href="http://localhost:8080/hi/sample?name=123&moblie=123&sex=male&spec=English&spec=Program&spec=Speak">http://localhost:8080/hi/sample?name=123&amp;moblie=123&amp;sex=male&amp;spec=English&amp;spec=Program&amp;spec=Speak</a></li><li>Post方式会将数据存放在”请求体”中隐性向服务器发送数据。应用场景：Post用于安全性要求较高的功能或者服务器上的写操作<br>  网页显示：<a href="http://localhost:8080/hi/sample">http://localhost:8080/hi/sample</a><br>  请求体：name&#x3D;123&amp;moblie&#x3D;123&amp;sex&#x3D;male&amp;spec&#x3D;English&amp;spec&#x3D;Program&amp;spec&#x3D;Speak</li></ul><h3 id="Get与Post处理方式"><a href="#Get与Post处理方式" class="headerlink" title="Get与Post处理方式"></a>Get与Post处理方式</h3><ul><li>所有请求 - service()方法</li><li>Get请求 - doGet()方法</li><li>Post请求 - doPost()方法</li></ul><h3 id="创建第一个Servlet程序"><a href="#创建第一个Servlet程序" class="headerlink" title="创建第一个Servlet程序"></a>创建第一个Servlet程序</h3><p>首先创建一个新的Java工程</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418215310029.png" alt="image-20220418215310029"></p><p>项目名右击，选择Add Framework Support，增加web Application(web项目应用)</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220417164229924.png" alt="image-20220417164229924"></p><p>增加后在web项目下的WEB-INF文件下增加classes,lib文件夹</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418215320377.png" alt="image-20220418215320377"></p><p>将Tomcat中的servlet-api.jar包导入到项目中WEB-INF文件下的lib目录下，点击File→Project Structure→Modules→Dependencies点击+号导入依赖jar包</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220417171309426.png" alt="image-20220417171309426"></p><p>将模块编译输出路径更改为WEB-INF文件夹下的classes，点击File→Project Structure→Modules→Paths更改模块编译输出路径</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418215331487.png" alt="image-20220418215331487"></p><p>在src文件夹下创建Servlet文件</p><p>在Hello类中，自定义了一个新的service()方法，其中通过getMethod()方法判断请求的类型，从而调用doGet()或者doPost()处理get,post请求，使用者只需要继承HttpServlet，然后重写doPost()或者doGet()方法处理请求即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;Hello&quot;, value = &quot;/Hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;<span class="comment">//实现servlet接口，继承HttpServlet</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//接受请求发来的参数(Tomcat是本机搭建的服务器响应请求)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//传入get参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&quot;&lt;h1 style=&#x27;color:red&#x27;&gt;hi,&quot;</span>+name+<span class="string">&quot;!&lt;/h1&gt;&lt;hr/&gt;&quot;</span>;<span class="comment">//将发来的请求放入浏览器网页中</span></span><br><span class="line">        System.out.println(<span class="string">&quot;返回给浏览器的响应数据为&quot;</span>+html);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();<span class="comment">//response(响应)向浏览器输出数据流</span></span><br><span class="line">        out.println(html);<span class="comment">//out对象将html的值发送回浏览器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写web.xml文件，向其中编写Servlet的映射</p><p>为什么需要编写映射：我们写的JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要在web服务器注册我们写的Servlet，还需要给他一个浏览器能够访问的路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span><span class="comment">&lt;!--Servlet取别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span><span class="comment">&lt;!--我们写的类的名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="comment">&lt;!--将Servlet与URL绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/firstservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--URL路径映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="执行流程："><a href="#执行流程：" class="headerlink" title="执行流程："></a>执行流程：</h4><p>首先客户端发送请求（request）（<a href="http://localhost:8080/webserver/firstservlet?name=XFY-Z%EF%BC%89%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%A6%82%E6%9E%9C%E5%92%8Cweb.xml%E4%B8%8B%E7%9A%84">http://localhost:8080/webserver/firstservlet?name=XFY-Z）到我们的服务器上，请求如果和web.xml下的</a><url-pattern>&#x2F;firstservlet</url-pattern>的虚拟路径相匹配，那么请求就会发送到<servlet-name>HelloServlet<servlet-name>（别名）所对应的类也就是<servlet-class>Hello<servlet-class>（我们在src下的java文件），Hello类执行doGet方法方法获得name参数XFY-Z，执行相对应的代码，最后重定向（response）到指定的页面</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418215341702.png" alt="image-20220418215341702"></p><p>部署Tomcat，并更改路径为lohost:8080&#x2F;hi</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418215351163.png" alt="image-20220418215351163"></p><p>发布项目到Tomcat服务器上</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220417194949102.png" alt="image-20220417194949102"></p><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ul><li>装载 - web.xml</li><li>创建 - 构造函数</li><li>初始化 - init()</li><li>提供服务 - service()</li><li>销毁 - destory()</li></ul><h3 id="使用注解简化配置"><a href="#使用注解简化配置" class="headerlink" title="使用注解简化配置"></a>使用注解简化配置</h3><ul><li>Servlet 3.x之后引入了 “注解Annotation” 特性</li><li>注解用于简化Web应用程序的配置过程</li><li>Servlet核心注解：@WebServlet，相当于标志一样告诉tomcat文件对应的URL</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;AnnotationServlet&quot;, value = &quot;/AnnotationServlet&quot;)</span><span class="comment">//相当于标志一样告诉tomcat文件对应的URL</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//接受请求发来的参数(Tomcat是本机搭建的服务器响应请求)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&quot;&lt;h1 style=&#x27;color:red&#x27;&gt;hi,&quot;</span>+name+<span class="string">&quot;!&lt;/h1&gt;&lt;hr/&gt;&quot;</span>;<span class="comment">//将发来的请求放入其中</span></span><br><span class="line">        System.out.println(<span class="string">&quot;返回给浏览器的响应数据为&quot;</span>+html);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();<span class="comment">//响应得到的数据然后赋值给out对象</span></span><br><span class="line">        out.println(html);<span class="comment">//out对象将html的值发送回浏览器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418205336101.png" alt="image-20220418205336101"></p><h3 id="启动时加载Servlet"><a href="#启动时加载Servlet" class="headerlink" title="启动时加载Servlet"></a>启动时加载Servlet</h3><ul><li>web.xml使用<load-on-startup>设置启动加载</li><li><load-on-startup>0~9999</load-on-startup></li><li>启动时加载在工作中常用系统的预处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CreateServlet的java类，其中重写了init()初始化方法</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;CreateServlet&quot;, value = &quot;/CreateServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在创建数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ImportServlet的java类，其中重写了init()初始化方法</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ImportServlet&quot;, value = &quot;/ImportServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在导入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CreateServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span><span class="comment">&lt;!--Servlet取别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>CreateServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span><span class="comment">&lt;!--我们写的类的名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span><span class="comment">&lt;!--启动时最先加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CreateServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/create<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>import<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span><span class="comment">&lt;!--Servlet取别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ImportServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span><span class="comment">&lt;!--我们写的类的名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span><span class="comment">&lt;!--启动时其次于CreateServlet类加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>import<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/import<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220418213904537.png" alt="image-20220418213904537"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dom4j与Xpath</title>
      <link href="/2022/04/14/Dom4j%E4%B8%8EXpath/"/>
      <url>/2022/04/14/Dom4j%E4%B8%8EXpath/</url>
      
        <content type="html"><![CDATA[<h2 id="DOM文档对象模型"><a href="#DOM文档对象模型" class="headerlink" title="DOM文档对象模型"></a>DOM文档对象模型</h2><ul><li>DOM（Document Object Model）定义了访问和操作XML文档的标准方法，DOM把XML文档作为树结构来查看，能够通过DOM树来读写所有的元素<br>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220413185706029.png" alt="image-20220413185706029"></li></ul><span id="more"></span><h2 id="Dom4j的概念"><a href="#Dom4j的概念" class="headerlink" title="Dom4j的概念"></a>Dom4j的概念</h2><ul><li>Dom4j是一个易用的、开源的库，用于解析XML，它应用于Java平台，具有性能优异、功能强大和极其亿使用的特点</li><li>Dom4j将XML视为Document对象</li><li>XML标签被Dom4j定义为Element（元素）对象</li></ul><h2 id="Dom4j解析读取XML文件实例"><a href="#Dom4j解析读取XML文件实例" class="headerlink" title="Dom4j解析读取XML文件实例"></a>Dom4j解析读取XML文件实例</h2><p>在idea中创建java工程，导入dom4j的jar包</p><p>在idea中：文件→项目结构→模块→依赖→导入jar包</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220413210150911.png" alt="image-20220413210150911"></p><p> 创建xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--人力资源管理系统--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;hr-schema.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3309&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>会计部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B103<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3310&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>工程部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B104<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建解析xml文件的java文件，并导入dom4jjar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.dom4j;<span class="comment">//导入dom4jjar包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Attribute;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HrReader</span> &#123;<span class="comment">//编写一个内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readXml</span><span class="params">()</span>&#123;<span class="comment">//编写解析XML文件的方法</span></span><br><span class="line">        <span class="comment">//定义xml文件的位置</span></span><br><span class="line">        String file=<span class="string">&quot;D:\\Documents\\java\\javaweb\\XML\\src\\XML\\hr.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//SAXReader类是读取XML文件的核心类，用于将XML解析后以&quot;树&quot;的形式保存在内存中</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span>reader.read(file);<span class="comment">//读取文件</span></span><br><span class="line">            <span class="comment">//获取XML文档的根节点，即hr标签</span></span><br><span class="line">            Element root= document.getRootElement();</span><br><span class="line">            <span class="comment">//elements方法用于获取指定的标签集合，这里获取到主节点及其子节点中的集合</span></span><br><span class="line">            List&lt;Element&gt; employees = root.elements(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element employee:employees)&#123;<span class="comment">//循环遍历输出主节点中的内容</span></span><br><span class="line">                <span class="comment">//element方法用于获取唯一的子节点对象</span></span><br><span class="line">                <span class="type">Element</span> <span class="variable">name</span> <span class="operator">=</span> employee.element(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String empName=name.getText();<span class="comment">//getText()方法用于获取标签文本</span></span><br><span class="line">                System.out.println(empName);</span><br><span class="line">                <span class="comment">//elementText获取employee主节下的其他子节点，这里的employee是获得employee节点的集合</span></span><br><span class="line">                System.out.println(employee.elementText(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                System.out.println(employee.elementText(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                System.out.println(employee.elementText(<span class="string">&quot;salary&quot;</span>));</span><br><span class="line">                Element department=employee.element(<span class="string">&quot;department&quot;</span>);<span class="comment">//获取到employee下的depart标签</span></span><br><span class="line">                System.out.println(department.elementText(<span class="string">&quot;dname&quot;</span>));<span class="comment">//获取到department标签下的子标签</span></span><br><span class="line">                System.out.println(department.elementText(<span class="string">&quot;address&quot;</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//attribute方法来获取employee下的no属性</span></span><br><span class="line">                <span class="type">Attribute</span> <span class="variable">attribute</span> <span class="operator">=</span>employee.attribute(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                System.out.println(attribute.getText());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;    </span><br><span class="line">        <span class="type">HrReader</span> <span class="variable">reader</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">HrReader</span>();<span class="comment">//创建类的实例</span></span><br><span class="line">        reader.readXml();<span class="comment">//调用实例类中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Dom4j更新写入XML文件"><a href="#Dom4j更新写入XML文件" class="headerlink" title="Dom4j更新写入XML文件"></a>Dom4j更新写入XML文件</h2><p>大致步骤：获取文件→获取根节点→在根节点中添加属性，子节点→核心操作字节输出流，将其写入到xml文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.dom4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HrWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">writeXml</span><span class="params">()</span>&#123;</span><br><span class="line">        String file=<span class="string">&quot;D:\\Documents\\java\\javaweb\\XML\\src\\XML\\hr.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//SAXReader类是读取XML文件的核心类，用于将XML解析后以&quot;树&quot;的形式保存在内存中</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取文件</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(file);</span><br><span class="line">            <span class="comment">//获取根节点 hr</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">            <span class="comment">//在根节点下，添加employee子节点</span></span><br><span class="line">            Element employee=root.addElement(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">            <span class="comment">//在employee节点下增加属性no</span></span><br><span class="line">            employee.addAttribute(<span class="string">&quot;no&quot;</span>,<span class="string">&quot;3311&quot;</span>);</span><br><span class="line">            <span class="comment">//在employee节点下增加name，age，salary节点，并增加其值</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">name</span> <span class="operator">=</span> employee.addElement(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            name.setText(<span class="string">&quot;王丙&quot;</span>);</span><br><span class="line">            employee.addElement(<span class="string">&quot;age&quot;</span>).setText(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">            employee.addElement(<span class="string">&quot;salary&quot;</span>).setText(<span class="string">&quot;3800&quot;</span>);</span><br><span class="line">            <span class="comment">//在employee节点写入department节点与子节点</span></span><br><span class="line">            Element depart=employee.addElement(<span class="string">&quot;department&quot;</span>);</span><br><span class="line">            depart.addElement(<span class="string">&quot;dname&quot;</span>).setText(<span class="string">&quot;工程部&quot;</span>);</span><br><span class="line">            depart.addElement(<span class="string">&quot;address&quot;</span>).setText(<span class="string">&quot;XX大厦-B105&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写文件的核心操作，file代表的是获取到的xml文件</span></span><br><span class="line">            <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            document.write(writer);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//提升到Exception异常就不会报错了</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HrWrite hrWrite= <span class="keyword">new</span> <span class="title class_">HrWrite</span>();</span><br><span class="line">        hrWrite.writeXml();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hr</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;hr.dtd&quot;</span>&gt;</span><span class="comment">&lt;!--人力资源管理系统--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3309&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>31<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>会计部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B103<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3310&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>工程部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B104<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--w--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3311&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王丙<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>3800<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>工程部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B105<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Xpath路径表达式"><a href="#Xpath路径表达式" class="headerlink" title="Xpath路径表达式"></a>Xpath路径表达式</h2><ul><li>Xpath路径表达式是XML文档中查找数据的语言</li><li>掌握Xpath可以极大的提高在提取数据时的开发效率</li><li>学习Xpath的本质就是掌握各种形式表达式的使用技巧</li></ul><h3 id="Xpath的基本表达式"><a href="#Xpath的基本表达式" class="headerlink" title="Xpath的基本表达式"></a>Xpath的基本表达式</h3><h4 id="最常用的基本表达式"><a href="#最常用的基本表达式" class="headerlink" title="最常用的基本表达式"></a>最常用的基本表达式</h4><table><thead><tr><th>表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td>nodename</td><td align="left">选取此节点下所有子节点</td></tr><tr><td>&#x2F;</td><td align="left">从根节点选取</td></tr><tr><td>&#x2F;&#x2F;</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑他们的位置</td></tr><tr><td>.</td><td align="left">选取当前的节点</td></tr><tr><td>..</td><td align="left">选取但前节点的父节点</td></tr><tr><td>@</td><td align="left">选取属性</td></tr></tbody></table><h4 id="Xpath基本表达式案例"><a href="#Xpath基本表达式案例" class="headerlink" title="Xpath基本表达式案例"></a>Xpath基本表达式案例</h4><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>bookstore</td><td>选取bookstore元素的所有子节点</td></tr><tr><td>&#x2F;bookstore</td><td>选取根元素bookstore。注释：假如路径起始于正斜杆(&#x2F;)，则此路径始终代表到某元素的绝对路径</td></tr><tr><td>bookstore&#x2F;book</td><td>选取属于bookstore的子元素中所有book元素</td></tr><tr><td>&#x2F;&#x2F;book</td><td>选取所有book<strong>子元素</strong>，而不管他们在文档中的位置</td></tr><tr><td>bookstore&#x2F;&#x2F;book</td><td>选择属于bookstore元素的后代的所有book元素，而不管他们位于bookstore之下的什么位置</td></tr><tr><td>&#x2F;&#x2F;@long</td><td>选取名为lang的所有属性</td></tr></tbody></table><h4 id="Xpath谓语表达式"><a href="#Xpath谓语表达式" class="headerlink" title="Xpath谓语表达式"></a>Xpath谓语表达式</h4><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>&#x2F;bookstore&#x2F;book[1]</td><td>选取属于bookstore子元素的第一个book元素</td></tr><tr><td>&#x2F;bookstore&#x2F;book[last()]</td><td>选取属于bookstore子元素的最后一个book元素</td></tr><tr><td>&#x2F;bookstore&#x2F;book[last()-1]</td><td>选取属于bookstore子元素的倒数第二个book元素</td></tr><tr><td>&#x2F;bookstore&#x2F;book[position()&lt;3]</td><td>选取最前面的两个属于bookstore元素的子元素的book元素</td></tr><tr><td>&#x2F;&#x2F;title[@lang]</td><td>选取所有拥有名为lang属性的title元素</td></tr><tr><td>&#x2F;&#x2F;title[@lang&#x3D;’eng’]</td><td>选取所有的title元素，且这些元素拥有lang属性&#x3D;eng</td></tr><tr><td>&#x2F;bookstore&#x2F;book[price&gt;35.00]</td><td>选取bookstore元素的所有book元素下的price元素，且price元素的值要大于35.00</td></tr><tr><td>&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;title</td><td>选取bookstore元素中的book元素的所有title元素，且其中的price元素的值须大于35.00</td></tr></tbody></table><h2 id="Xpath实验室"><a href="#Xpath实验室" class="headerlink" title="Xpath实验室"></a>Xpath实验室</h2><h3 id="Xpath工具之Jaxen的介绍"><a href="#Xpath工具之Jaxen的介绍" class="headerlink" title="Xpath工具之Jaxen的介绍"></a>Xpath工具之Jaxen的介绍</h3><ul><li>Jaxen是一个Java编写的开源的Xpath库。这是适应多种不同的对象模型，包括DOM，XOM，dom4j和JDOM</li><li>Dom4j底层依赖Jaxen实现Xpath查询</li><li>Jaxen 下载地址：jaxen.codeehaus.org</li><li>maven.aliyun.com：阿里云的代码仓库，可以找到我们想要的jar包</li></ul><h3 id="Xpath实验"><a href="#Xpath实验" class="headerlink" title="Xpath实验"></a>Xpath实验</h3><p>利用Xpath来获取xml文件并利用Xpath表达式来对其进行操作</p><p>核心方法执行xpath表达式xpathExp,node节点是Element(元素)，attribute(属性)方法的父类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hr</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;hr.dtd&quot;</span>&gt;</span><span class="comment">&lt;!--人力资源管理系统--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3301&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>31<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>会计部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B103<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3302&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>工程部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B104<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;333&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王丙<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>3800<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>工程部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B105<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Xpath获取xml文件中节点属性，并利用Xpath表达式来调用</span></span><br><span class="line"><span class="keyword">package</span> com.java.dom4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Node;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.xpath.XPath;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XPathTestor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xpath</span><span class="params">(String xpathExp)</span>&#123;</span><br><span class="line">        String file=<span class="string">&quot;D:\\Documents\\java\\javaweb\\XML\\src\\XML\\hr.xml&quot;</span>;<span class="comment">//获取文件</span></span><br><span class="line">        <span class="comment">//SAXReader类是读取XML文件的核心类，用于将XML解析后以&quot;树&quot;的形式保存在内存中</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span>reader.read(file);<span class="comment">//读取文件返回document类型</span></span><br><span class="line">            <span class="comment">//核心方法执行xpath表达式xpathExp,node节点是Element(元素)，attribute(属性)方法的父类</span></span><br><span class="line">            List&lt;Node&gt; nodes =document.selectNodes(xpathExp);</span><br><span class="line">            <span class="keyword">for</span> (Node node:nodes)&#123;</span><br><span class="line">                <span class="comment">//循环遍历获取元素与节点</span></span><br><span class="line">                <span class="type">Element</span> <span class="variable">emp</span> <span class="operator">=</span> (Element) node;<span class="comment">//强制转换 将node父元素转换为子类Element元素执行子类中的方法</span></span><br><span class="line">                System.out.println(emp.attributeValue(<span class="string">&quot;no&quot;</span>));<span class="comment">//获取到no属性并输出</span></span><br><span class="line">                System.out.println(emp.elementText(<span class="string">&quot;name&quot;</span>));<span class="comment">//获取到name子元素并输出</span></span><br><span class="line">                System.out.println(emp.elementText(<span class="string">&quot;age&quot;</span>));<span class="comment">//获取到age子元素并输出</span></span><br><span class="line">                System.out.println(emp.elementText(<span class="string">&quot;salary&quot;</span>));<span class="comment">//获取到salary子元素并输出</span></span><br><span class="line">                <span class="type">Element</span> <span class="variable">department</span> <span class="operator">=</span> emp.element(<span class="string">&quot;department&quot;</span>);<span class="comment">//emp代表的是xml文件中的所有元素与属性的集合，这里是获取emp集合中的department元素并赋予给depatment的实例名</span></span><br><span class="line">                System.out.println(department.elementText(<span class="string">&quot;dname&quot;</span>));<span class="comment">//获取到department下dname子元素</span></span><br><span class="line">                System.out.println(department.elementText(<span class="string">&quot;address&quot;</span>));<span class="comment">//获取到department下address子元素</span></span><br><span class="line">                System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">XPathTestor</span> <span class="variable">xPathTestor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XPathTestor</span>();</span><br><span class="line">        <span class="comment">// xPathTestor.xpath(&quot;/hr/employee&quot;);//获取到hr根标签下的employee子节点下的属性并输出（方法中有输出的方法），/表示要从主节点下按顺序获取</span></span><br><span class="line">        <span class="comment">// xPathTestor.xpath(&quot;//employee&quot;);//代表的是所有的employee标签</span></span><br><span class="line">        <span class="comment">// xPathTestor.xpath(&quot;//employee[salary&lt;4000]&quot;);//代表的是所有empolyee标签下的所有的salary小于4000的结果并输出</span></span><br><span class="line">        <span class="comment">// xPathTestor.xpath(&quot;//employee[name=&#x27;王丙&#x27;]&quot;);</span></span><br><span class="line">        <span class="comment">// xPathTestor.xpath(&quot;//employee[@no=3301]&quot;);//获取到所有标签为employee的标签，且筛选no属性值为3301的结果</span></span><br><span class="line">        <span class="comment">// xPathTestor.xpath(&quot;//employee[1]&quot;);//获取到第一个employee节点下的标签（方法中有写获取到的节点）</span></span><br><span class="line">        <span class="comment">//xPathTestor.xpath(&quot;//employee[last()]&quot;);//获取到最后一个employee节点下的标签（方法中有写获取到的节点）</span></span><br><span class="line">        <span class="comment">//xPathTestor.xpath(&quot;//employee[position()&lt;=2]&quot;);//获取到employee下所有的子元素，且筛选前两个位置</span></span><br><span class="line">        <span class="comment">//xPathTestor.xpath(&quot;//employee[1] | //employee[3]&quot;);//获取到第一个与第三个employee标签下的标签中的内容</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML之DTD文件与Schema文件</title>
      <link href="/2022/04/12/XML%E4%B9%8BDTD%E4%B8%8ESchema%E6%96%87%E4%BB%B6/"/>
      <url>/2022/04/12/XML%E4%B9%8BDTD%E4%B8%8ESchema%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="XML语义约束"><a href="#XML语义约束" class="headerlink" title="XML语义约束"></a>XML语义约束</h2><ul><li>XML文档结构正确，但可能不是有效的</li><li>例如：员工档案XML中绝对不允许出现”植物品种”标签。XML语义约束就是用于规定XML文档中允许出现哪些元素</li><li>XML语义约束有两种定义方式：DTD与XML Schema</li></ul><span id="more"></span><h2 id="Doucument-Type-Defintion"><a href="#Doucument-Type-Defintion" class="headerlink" title="Doucument Type Defintion"></a>Doucument Type Defintion</h2><ul><li><p>DTD(Document Type Definition ,文档类型定义)是一种简单易用的语义约束方式</p></li><li><p>DTD文件扩展名为.dtd</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hr.dtd</span><br><span class="line">&lt;!ELEMENT hr(employee+)&gt;</span><br><span class="line">&lt;!ELEMENT employee (name,age,salaey,department)&gt;</span><br><span class="line">&lt;!ATTLIST employee no CDATA &quot;&quot;&gt;</span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">…</span><br></pre></td></tr></table></figure></li></ul><h3 id="DTD定义节点"><a href="#DTD定义节点" class="headerlink" title="DTD定义节点"></a>DTD定义节点</h3><ul><li><p>利用DTD中的&lt;!ELEMENT&gt;标签，我们可以定义XML文档中允许出现的节点及数量，以hr.xml为例：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义hr(主节点)下只允许出现1个employee子节点--&gt;</span><br><span class="line">hr.dtd</span><br><span class="line">&lt;!ELEMENT hr(employee+)&gt;</span><br><span class="line">&lt;!ELEMENT employee (name,age,salaey,department)&gt;&lt;!--employee节点下必须包含以下四个节点，且按顺序出现--&gt;</span><br><span class="line">&lt;!ATTLIST employee no CDATA &quot;&quot;&gt;</span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;&lt;!--定义name标签体只能是文本，#PCDATA代表文本元素--&gt;</span><br><span class="line">…</span><br></pre></td></tr></table></figure></li><li><p>如某字节点需要多次重复出现，则需要在子节点后增加相应的描述</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--hr节点下最少出现1个employee子节点--&gt;</span><br><span class="line">&lt;!ELEMENT hr(employee+)&gt;</span><br><span class="line">&lt;!--hr节点下可出现0..n个employee子节点--&gt;</span><br><span class="line">&lt;!ELEMENT hr(employee*)&gt;</span><br><span class="line">&lt;!--hr--&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="XML引用DTD文件"><a href="#XML引用DTD文件" class="headerlink" title="XML引用DTD文件"></a>XML引用DTD文件</h3><ul><li><p>在XML中使用&lt;!DOCTYPE&gt;标签来引用DTD文件</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">书写格式：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根节点 <span class="keyword">SYSTEM</span> <span class="string">&quot;dtd文件路径&quot;</span>&gt;</span></span><br><span class="line">示例：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hr</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;hr.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建DTD文件</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hr</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;hr.dtd&quot;</span>&gt;</span><span class="comment">&lt;!--XML文件引用DTD文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--人力资源管理系统--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3309&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>31<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>会计部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B103<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3310&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>工程部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B104<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!--dtd文件本质上也是xml文件--&gt;</span><br><span class="line">&lt;!ELEMENT hr (employee+)&gt;&lt;!--可以拥有多个employee元素--&gt;</span><br><span class="line">&lt;!ELEMENT employee (name,age,salary,department)&gt;&lt;!--employee主元素下拥有这四个子元素--&gt;</span><br><span class="line">&lt;!ATTLIST employee no CDATA &quot; &quot;&gt;&lt;!--定义employee元素中的属性no--&gt;</span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;&lt;!--定义name子元素为纯文本--&gt;</span><br><span class="line">&lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT salary (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT department (dname,address)&gt;&lt;!--定义department元素下拥有两个子元素--&gt;</span><br><span class="line">&lt;!ELEMENT dname (#PCDATA)&gt;&lt;!--定义dname子元素为纯文本--&gt;</span><br><span class="line">&lt;!ELEMENT address (#PCDATA)&gt;&lt;!--定义address子元素为纯文本--&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="XML-Schema"><a href="#XML-Schema" class="headerlink" title="XML Schema"></a>XML Schema</h2><h3 id="XML-Schema的概述"><a href="#XML-Schema的概述" class="headerlink" title="XML Schema的概述"></a>XML Schema的概述</h3><ul><li>XML Schema比DTD更为复杂，提供了更多的功能</li><li>XML Schema提供了数据类型、格式限定、数据范围等特性XMLX</li><li>XML Schema是W3C标准</li></ul><h3 id="XML-Schema文件的具体例子"><a href="#XML-Schema文件的具体例子" class="headerlink" title="XML Schema文件的具体例子"></a>XML Schema文件的具体例子</h3><p>直接上代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--人力资源管理系统--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--调用hr-scheam.xsd文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;hr-schema.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3309&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>会计部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B103<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">&quot;3310&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dname</span>&gt;</span>工程部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B104<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xsd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;hr&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--complexType标签含义是复杂节点，包含子节点时必须使用这个标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sequence标签包含是子节点必须严格书写，--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;employee&quot;</span>  <span class="attr">maxOccurs</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="comment">&lt;!--定义employee节点出现的次数--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span><span class="comment">&lt;!--说明前后顺序--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span><span class="comment">&lt;!--代表的是name子元素是字符串类型，且不能拥有子节点--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--设置age属性的简单类型约束--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xs:integer&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">xs:minInclusive</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xs:minInclusive</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">xs:maxInclusive</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xs:maxInclusive</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--代表的是salary只允许输入整型，不能拥有子节点--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:integer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--代表的是department，拥有子节点--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span><span class="comment">&lt;!--说明含有子节点--&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span><span class="comment">&lt;!--说明前后顺序--&gt;</span></span><br><span class="line">                                        <span class="comment">&lt;!--代表的是：department节点下的两个子节点，且不能含有其他子节点--&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--定义employee的no属性，必须是string类型，required表示的是employee下必须存在的--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">&quot;no&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">xs:attribute</span>&gt;</span><span class="comment">&lt;!--定义节点中的属性，名字与数据类型--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组与DOM对表单的设置</title>
      <link href="/2022/04/08/JS%E6%95%B0%E7%BB%84%E4%B8%8EDOM%E5%AF%B9%E8%A1%A8%E5%8D%95%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/04/08/JS%E6%95%B0%E7%BB%84%E4%B8%8EDOM%E5%AF%B9%E8%A1%A8%E5%8D%95%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h2><h3 id="声明与创建数组"><a href="#声明与创建数组" class="headerlink" title="声明与创建数组"></a>声明与创建数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明或创建一个不指定长度的数组</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明或创建一个数组并指定长度的数组</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明或创建一个带有默认值的数组</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;123a&quot;</span>,<span class="string">&quot;q&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个数组并赋值的简写，又称为隐式创建数据</span></span><br><span class="line"><span class="keyword">var</span> arrayObj1=[<span class="number">1</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;123a&quot;</span>,<span class="string">&quot;q&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>###输出数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组赋值，字符下标，数组遍历 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayObj[<span class="number">1</span>]);<span class="comment">//输出指定位置</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;arrayObj1.<span class="property">length</span>;i++)&#123;<span class="comment">//循环遍历输出数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arrayObj1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> o <span class="keyword">in</span> arrayObj1)&#123;<span class="comment">//便捷循环遍历数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arrayObj1[o]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对表单元素进行设置"><a href="#对表单元素进行设置" class="headerlink" title="对表单元素进行设置"></a>对表单元素进行设置</h2><h3 id="JS对表单元素进行设置"><a href="#JS对表单元素进行设置" class="headerlink" title="JS对表单元素进行设置"></a>JS对表单元素进行设置</h3><h4 id="什么是表单"><a href="#什么是表单" class="headerlink" title="什么是表单"></a>什么是表单</h4><p>概述：表单的主要作用是在客户端接受用户的信息，然后将数据递交给后台的程序来操控这些数据</p><h4 id="JS对表单需要做什么"><a href="#JS对表单需要做什么" class="headerlink" title="JS对表单需要做什么"></a>JS对表单需要做什么</h4><p>设置或获取各种表单元素的值</p><h3 id="JS获取表单元素"><a href="#JS获取表单元素" class="headerlink" title="JS获取表单元素"></a>JS获取表单元素</h3><h4 id="根据ID来获取元素并操作"><a href="#根据ID来获取元素并操作" class="headerlink" title="根据ID来获取元素并操作"></a>根据ID来获取元素并操作</h4><p>作用：使用getElementByld()方法可以获取带ID的元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>)<span class="comment">//获取id名为userName的元素对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>).<span class="property">value</span>=<span class="string">&quot;999&quot;</span>;<span class="comment">//按元素的id(指定位置)来给value的赋值为999</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">onload</span>=<span class="string">&quot;show1()&quot;</span>&gt;</span> </span><br><span class="line">    用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;userName&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;show1()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;btn&quot;</span>/&gt;</span><span class="comment">&lt;!--onclick连接js中的方法，onclick页面单击事件，点击后才执行show1方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">show1</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>).<span class="property">value</span>=<span class="string">&quot;999&quot;</span>;<span class="comment">//按元素的id来给value的赋予新值</span></span><br><span class="line">   <span class="keyword">var</span> user=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>)<span class="comment">//获取id=userName的元素对象</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">dir</span>(user);<span class="comment">//打印我们获取的元素对象，更好的查看对象里面的属性和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据name来获取元素并操作"><a href="#根据name来获取元素并操作" class="headerlink" title="根据name来获取元素并操作"></a>根据name来获取元素并操作</h4><p>作用：document.getElementsByName方法可返回带有指定名称的<strong>对象的集合</strong>，<strong>此方法是返回元素的数组</strong>，一般用于获取表单元素。name属性的值不要求必须是唯一的，多个元素也可以有同样的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xb=<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;xb&quot;</span>);<span class="comment">//将name=&quot;xb&quot;的元素获取==》value元素的数组</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">onload</span>=<span class="string">&quot;show1()&quot;</span>&gt;</span><span class="comment">&lt;!--onload页面加载事件，先加载onload中的方法，再执行body--&gt;</span></span><br><span class="line">    用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;userName&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xb&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xb&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;show1()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;btn&quot;</span>/&gt;</span><span class="comment">&lt;!--onclick连接js中的方法，onclick页面单击事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">show1</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>).<span class="property">value</span>=<span class="string">&quot;999&quot;</span>;<span class="comment">//按元素的id来给value的值</span></span><br><span class="line">   <span class="keyword">var</span> user=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>)</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> xb=<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;xb&quot;</span>);<span class="comment">//获取名字为xb的元素组成数组，数组的内容是value的值，xb[0]=name=&quot;xb&quot;,value=1 xb[1]=name=&quot;xb&quot;,value=0;</span></span><br><span class="line">    <span class="keyword">if</span>(xb[<span class="number">0</span>].<span class="property">checked</span>)&#123;<span class="comment">//check判断第一个按钮是否被选中,选中为ture，输出xb[0]</span></span><br><span class="line">      xbTest=xb[<span class="number">0</span>].<span class="property">value</span>;<span class="comment">//输出数组中第一个值中的value值</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       xbTest=xb[<span class="number">1</span>].<span class="property">value</span>;<span class="comment">//判断第二个按钮是否被选中，选中输出xb[1]</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">alert</span>(xbTest);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xb[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="根据img来获取元素并操作"><a href="#根据img来获取元素并操作" class="headerlink" title="根据img来获取元素并操作"></a>根据img来获取元素并操作</h4><p>作用：对于一个img图片元素来说，我们可以操作他的<strong>src、title属性</strong>等；或者对于input元素来说，我们可以操作他的disabled、checked、selected属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">&quot;logoImg&quot;</span> src=<span class="string">&quot;1.jpeg&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> logoImg= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;logoImg&quot;</span>);<span class="comment">//获取图片元素</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;initLogo()&quot;</span>&gt;</span><span class="comment">&lt;!--onload页面加载事件，先加载onload中的方法，再执行body，初始化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义图片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;logoImg&quot;</span> <span class="attr">src</span>=<span class="string">&quot;1.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="comment">&lt;!--定义了默认的图片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;selectLogo()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化id=logo的列表框</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initLogo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> logo=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;logo&quot;</span>);<span class="comment">//获取元素，达到对id=logo的元素进行操作</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)&#123;</span><br><span class="line">      logo.<span class="property">options</span>.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Option</span>(i,i))<span class="comment">//select中的增加option值（表单中的值），从1到15增加到select表单中的option值增加value值，value的名字也是为1-15</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectLogo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> logo=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;logo&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> n = logo.<span class="property">value</span>;<span class="comment">//根据value的值，这里的value代表的值为1-15</span></span><br><span class="line">   <span class="keyword">var</span> logoImg= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;logoImg&quot;</span>);<span class="comment">//获取到图片的那个对象元素</span></span><br><span class="line">   logoImg.<span class="property">src</span>=n+<span class="string">&quot;.jpeg&quot;</span><span class="comment">//操作图片的src，就是图片的连接，n可以操作，随n的改变而改变图片</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例-列表框实现年月日三级联动"><a href="#案例-列表框实现年月日三级联动" class="headerlink" title="案例:列表框实现年月日三级联动"></a>案例:列表框实现年月日三级联动</h4><p>每个月的天数不一样，闰年的二月的天数是不一样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js1.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;ymd(),initSelect(),initLogo()&quot;</span>&gt;</span><span class="comment">&lt;!--onload页面加载事件，先加载onload中的方法，再执行body--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;yyyy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;yyyy&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;selectYmd()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>年</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;mm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mm&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;selectYmd()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>月</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;dd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>日</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除列表框条目&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteSelect()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ymd</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">//获取id=yyyy,mm,dd的控件</span></span><br><span class="line">   <span class="keyword">var</span> yyyy=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;yyyy&quot;</span>);<span class="comment">//获取id名字为yyyy的元素对象</span></span><br><span class="line">   <span class="keyword">var</span> mm=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mm&quot;</span>);<span class="comment">//获取id名字为mm的元素对象</span></span><br><span class="line">   <span class="keyword">var</span> dd=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dd&quot;</span>);<span class="comment">//获取id名字为dd的元素对象</span></span><br><span class="line">   <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//创建日期函数</span></span><br><span class="line">   <span class="keyword">var</span> year=<span class="built_in">parseInt</span>(date.<span class="title function_">getFullYear</span>());<span class="comment">//使用日期函数，获取到年份</span></span><br><span class="line">   <span class="title function_">initSelect</span>(yyyy,<span class="number">1999</span>,year);</span><br><span class="line">   <span class="title function_">initSelect</span>(mm,<span class="number">1</span>,<span class="number">12</span>);</span><br><span class="line">   <span class="title function_">initSelect</span>(dd,<span class="number">1</span>,<span class="number">31</span>);</span><br><span class="line">   <span class="comment">//获取到列表框的长度</span></span><br><span class="line">   <span class="keyword">var</span> n=yyyy.<span class="property">length</span>;</span><br><span class="line">   <span class="comment">//列表框选中某一个条目</span></span><br><span class="line">   yyyy.<span class="property">selectedIndex</span>=<span class="title class_">Math</span>.<span class="title function_">round</span>(n/<span class="number">2</span>);</span><br><span class="line">   <span class="comment">//将某个列表框的条目数设置为0，效果是删除</span></span><br><span class="line">   <span class="comment">//dd.options.length=0;</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给列表框赋值，传递三个参数：表单元素，开始值，结束值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initSelect</span>(<span class="params">obj,start,end</span>)&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">      obj.<span class="property">options</span>.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Option</span>(i,i));<span class="comment">//给传参的值的这个表单元素中添加条目，给条目中增加值，第一个参数是显示的名字，第二个参数是value的值</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//定义不同的月份会有不同的天数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectYmd</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> mm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mm&quot;</span>);<span class="comment">//获取id名字为mm元素对象</span></span><br><span class="line">   <span class="keyword">var</span> dd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dd&quot;</span>);<span class="comment">//获取id名字为dd元素对象</span></span><br><span class="line">   <span class="keyword">var</span> yyyy=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;yyyy&quot;</span>)<span class="comment">//获取id名字为yyyy的元素对象</span></span><br><span class="line">   <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(mm.<span class="property">value</span>);<span class="comment">//取整mm元素对象的value值</span></span><br><span class="line">   <span class="keyword">var</span> dayEnd;</span><br><span class="line">   <span class="keyword">if</span>(m==<span class="number">4</span> || m==<span class="number">6</span> || m==<span class="number">9</span> || m==<span class="number">11</span>)&#123;<span class="comment">//小月的天数</span></span><br><span class="line">      dayEnd=<span class="number">30</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">2</span>)&#123;</span><br><span class="line">      dayEnd=<span class="number">28</span>;</span><br><span class="line">      <span class="keyword">var</span> y=<span class="built_in">parseInt</span>(yyyy.<span class="property">value</span>);</span><br><span class="line">      <span class="keyword">if</span>((y % <span class="number">4</span>==<span class="number">0</span> &amp;&amp; y % <span class="number">100</span> !=<span class="number">0</span>) || y % <span class="number">400</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">         dayEnd=<span class="number">29</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      dayEnd=<span class="number">31</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   dd.<span class="property">options</span>.<span class="property">length</span>=<span class="number">0</span>;<span class="comment">//删除原来的dd列表框中的所有内容</span></span><br><span class="line">   <span class="title function_">initSelect</span>(dd,<span class="number">1</span>,dayEnd);<span class="comment">//重新调用initSelect方法，重新添加，让天数变得合理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除列表框的某一个条目。即：按索引号删除</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteSelect</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> dd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">   <span class="comment">//dd.option.remove(1);</span></span><br><span class="line">   <span class="keyword">for</span>(i=dd.<span class="property">length</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//循环删除dd中的所有内容</span></span><br><span class="line">      dd.<span class="property">options</span>.<span class="title function_">remove</span>(<span class="number">0</span>);<span class="comment">//每一次都循环删除第一个dd中的数字，来到达删除dd中所有的值</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220408205544640.png" alt="image-20220408205544640"></p><h4 id="复选框的全选与不选案例"><a href="#复选框的全选与不选案例" class="headerlink" title="复选框的全选与不选案例"></a>复选框的全选与不选案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jstest1.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>爬山<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>看书<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkInterest()&quot;</span>&gt;</span><span class="comment">&lt;!--实现全选与全不选的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkInterest1()&quot;</span>&gt;</span><span class="comment">&lt;!--实现反选的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkInterest</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> interest = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;interest&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;interest.<span class="property">length</span>;i++)&#123;</span><br><span class="line">       interest[i].<span class="property">checked</span>=flag;<span class="comment">//check判断按钮是否被选中,选中为ture,反过来说当checked的值都为true的时候，代表所有的值都选中</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>).<span class="property">value</span>=<span class="string">&quot;全选&quot;</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>).<span class="property">value</span>=<span class="string">&quot;全不选&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//当flag=true的时候，运行结束执行取反，执行全不选，周而复始</span></span><br><span class="line">   flag=!flag;<span class="comment">//取反，被称为开关变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反选的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkInterest1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> interest = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;interest&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;interest.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        interest[i].<span class="property">checked</span>=!interest[i].<span class="property">checked</span>;<span class="comment">//取反赋给interest[i]的值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(interest[i].<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全选当点击一次全选的时候，会更改value的值变为全不选，然后点击全部都不选择</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220408211008637.png" alt="image-20220408211008637"></p><p>当选听歌的时候，点击反选</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220408221504921.png" alt="image-20220408221504921"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220408211854801.png" alt="image-20220408211854801"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件与DOM总结</title>
      <link href="/2022/04/08/JS%E4%BA%8B%E4%BB%B6%E4%B8%8EDOM%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/08/JS%E4%BA%8B%E4%BB%B6%E4%B8%8EDOM%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="JS事件与DOM总结"><a href="#JS事件与DOM总结" class="headerlink" title="JS事件与DOM总结"></a>JS事件与DOM总结</h2><h3 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h3><p>事件是指被程序发现的行为或发生的事情，而且它可以能会被程序处理</p><h3 id="事件的特点"><a href="#事件的特点" class="headerlink" title="事件的特点"></a>事件的特点</h3><p>js的事件，都是以on开头，有onclick、onchange、onload……</p><h3 id="事件的分类"><a href="#事件的分类" class="headerlink" title="事件的分类"></a>事件的分类</h3><p>键盘事件、鼠标事件、表单事件……</p><span id="more"></span><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220408221035716.png" alt="image-20220408221035716"></p><h2 id="DOM事件的总结"><a href="#DOM事件的总结" class="headerlink" title="DOM事件的总结"></a>DOM事件的总结</h2><h3 id="什么是DOM事件"><a href="#什么是DOM事件" class="headerlink" title="什么是DOM事件"></a>什么是DOM事件</h3><p>DOM的全称为：Document Object Model，将文档(页面)表现为结构化的表示方法，<strong>使每一个页面元素都是可操控</strong>，DOM网页和脚本以及其他的编程语言联系起来</p><h3 id="DOM事件的特点"><a href="#DOM事件的特点" class="headerlink" title="DOM事件的特点"></a>DOM事件的特点</h3><p>利用js控制页面中的所有元素，使页面更加”聪明”</p><h3 id="DOM事件的分类"><a href="#DOM事件的分类" class="headerlink" title="DOM事件的分类"></a>DOM事件的分类</h3><ul><li>元素节点</li><li>属性节点</li><li>文本节点</li></ul><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220408221627126.png" alt="image-20220408221627126"></p><h3 id="常见的DOM操作"><a href="#常见的DOM操作" class="headerlink" title="常见的DOM操作"></a>常见的DOM操作</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/img/image-20220408221019694.png" alt="image-20220408221019694"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS概述及基本使用</title>
      <link href="/2022/04/05/JS%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/05/JS%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="JS简介"><a href="#JS简介" class="headerlink" title="JS简介"></a>JS简介</h2><ul><li>什么是JS-Java-Script的简称，是一种脚本语言</li><li>什么是动态页面、静态页面（以人机交互做为区分的）</li><li>JS不需要安装就可以使用了</li><li>BOM（浏览器对象模型），DOM（文档对象模型）</li><li>可以运用在html结构中任意一个地方</li></ul><span id="more"></span><h3 id="页面使用JS的方法"><a href="#页面使用JS的方法" class="headerlink" title="页面使用JS的方法"></a>页面使用JS的方法</h3><ul><li><p>使用 “script” 在HTML页面中插入JavaScript</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;hello,javascript&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用外部JS文件</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--引用外部文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="JS的变量"><a href="#JS的变量" class="headerlink" title="JS的变量"></a>JS的变量</h2><h3 id="JS变量的简介"><a href="#JS变量的简介" class="headerlink" title="JS变量的简介"></a>JS变量的简介</h3><p>简介：与其他程序设计语言相同，是用来临时存储信息，<strong>变量赋值是弱数据类型赋值，不用像Java那样强调变量的数据类型</strong></p><h3 id="JS创建的创建方法"><a href="#JS创建的创建方法" class="headerlink" title="JS创建的创建方法"></a>JS创建的创建方法</h3><ul><li><p>方法一</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> x =<span class="number">2</span>,name=<span class="string">&quot;zhangsan&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>方法二</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p>小贴士</p><p><strong>Js中的变量，区分类型，但是没有int类型的关键字</strong></p><h2 id="JS调试"><a href="#JS调试" class="headerlink" title="JS调试"></a>JS调试</h2><h3 id="JS调试的方法"><a href="#JS调试的方法" class="headerlink" title="JS调试的方法"></a>JS调试的方法</h3><ul><li>alter弹框调试</li><li>console.log控制台输出调试</li></ul><h3 id="JS调式的作用"><a href="#JS调式的作用" class="headerlink" title="JS调式的作用"></a>JS调式的作用</h3><p>观察变量值的变化规律，是否符合程序设计的目的</p><h3 id="JS调式的示例"><a href="#JS调式的示例" class="headerlink" title="JS调式的示例"></a>JS调式的示例</h3><ul><li><p>方法一</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x =<span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(x);<span class="comment">//网页出现弹框，弹框中是我们想要的结果</span></span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/202204042208466.png" alt="image-20220404220826413"></p></li><li><p>方法二</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x =<span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/202204042209849.png" alt="image-20220404220937802"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS定位</title>
      <link href="/2022/04/05/CSS%E5%AE%9A%E4%BD%8D/"/>
      <url>/2022/04/05/CSS%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS定位及相对定位"><a href="#CSS定位及相对定位" class="headerlink" title="CSS定位及相对定位"></a>CSS定位及相对定位</h2><h3 id="CSS定位的属性"><a href="#CSS定位的属性" class="headerlink" title="CSS定位的属性"></a>CSS定位的属性</h3><ul><li>relative（相对的）</li><li>absolute（绝对的）</li><li>static（无定位的）</li><li>fixed（固定的）</li></ul><span id="more"></span><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><h4 id="相对定位的概念"><a href="#相对定位的概念" class="headerlink" title="相对定位的概念"></a>相对定位的概念</h4><p>相对定位是一个非常容易掌握的概念。如果对一个元素进行相对定位，它将出现在它所在的位置上，然后，可以通过设置垂直或水平位置，让这个元素”相对于”<strong>它自身的起点进行移动</strong>，参考元素为本身</p><h4 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">30px</span>;</span><br></pre></td></tr></table></figure><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><h4 id="绝对定位的概念"><a href="#绝对定位的概念" class="headerlink" title="绝对定位的概念"></a>绝对定位的概念</h4><p>相对于已定位的最近的祖先元素，如果没有已定位的最近的祖先元素，那么它的位置就相对于最初的包含块（如body），参考的元素为祖先元素,类型float，产生浮动的效果（脱离文档流）</p><h4 id="主要代码-1"><a href="#主要代码-1" class="headerlink" title="主要代码"></a>主要代码</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>:absolute</span><br></pre></td></tr></table></figure><h4 id="相对定位与绝对定位的使用依据"><a href="#相对定位与绝对定位的使用依据" class="headerlink" title="相对定位与绝对定位的使用依据"></a>相对定位与绝对定位的使用依据</h4><p><strong>使用绝对定位还是相对定位的一个判断依据就是文档流是否需要被破坏：绝对定位会破坏文档流——产生浮动效果</strong></p><h3 id="绝对定位与相对定位的区别"><a href="#绝对定位与相对定位的区别" class="headerlink" title="绝对定位与相对定位的区别"></a>绝对定位与相对定位的区别</h3><p>绝对定位的参照物是最近的祖先元素，如没有已定位的最近的祖先元素，参照物是body</p><p>相对定位的参照物是元素是元素本身</p><ol><li>绝对定位元素相对的元素是它最近的一个祖先，该祖先满足：position的值必须是：relative、absolute、fixed，若没有这样的祖先则相对于body进行定位，<br> 所以当父类的position的值为relative，absolute或者fixed时，子类的绝对定位以父类为基准。当父类的position的值使用默认的static时，子类的绝对定位以body为基准</li><li>判断里面的块状元素的定位可以参考其父级元素和祖先元素的定位</li></ol><h2 id="相对和绝对定位与浮动之间的关系"><a href="#相对和绝对定位与浮动之间的关系" class="headerlink" title="相对和绝对定位与浮动之间的关系"></a>相对和绝对定位与浮动之间的关系</h2><ol><li><p>在不设置定位（也就是默认定位static的情况下，对块级元素设置top&#x2F;left等属性，无效）</p></li><li><p><strong>使用绝对定位还是相对定位的一个判断依据就是文档流师傅需要被破坏：绝对定位会破坏文档流&#x3D;&#x3D;》产生浮动的效果</strong><br> 如底下代码，本来是想实现3个方块竖排紧贴在一起，实际效果：第二个覆盖第一个，第三个覆盖第二个，最终显示的只是第三个方块</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.test1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;<span class="comment">/*绝对定位产生浮动*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.test2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;<span class="comment">/*绝对定位产生浮动*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.test3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;<span class="comment">/*绝对定位产生浮动*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">     </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>作为父容器时，是使用相对定位还是绝对定位：<br> 当父一级div中只有一组子元素的时候，使用relative(相对定位)或absolute(绝对定位)都可以达到移动效果<br> 但当父容器中还有其他组的子元素时，就要考虑是否破坏文档流（是否使用absolute进行页面布局，浮动会导致文档流顶格）</p></li></ol><h3 id="绝对定位与浮动"><a href="#绝对定位与浮动" class="headerlink" title="绝对定位与浮动"></a>绝对定位与浮动</h3><h4 id="绝对定位-absolute-与浮动-float-的对比"><a href="#绝对定位-absolute-与浮动-float-的对比" class="headerlink" title="绝对定位(absolute)与浮动(float)的对比"></a>绝对定位(absolute)与浮动(float)的对比</h4><p>相同点：都会产生浮动，都会破坏文档流</p><p>不同点：float定位后，文档流其他文档会被绕开，不会遮挡。但是绝对定位会覆盖其他的内容</p><p>截图是float的演示效果（如果是相对定位，就直接部分文字被覆盖）</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/202204041640373.png" alt="image-20220404164009253"></p><h3 id="相对定位与浮动"><a href="#相对定位与浮动" class="headerlink" title="相对定位与浮动"></a>相对定位与浮动</h3><p><strong>float和relative同时使用，会同时具有各自的特点</strong></p><p>float——浮动，且文档流中的其他文档会被绕开，不会被遮掩</p><p>relative——定义容器四周的边距</p><h2 id="z-index的使用"><a href="#z-index的使用" class="headerlink" title="z-index的使用"></a>z-index的使用</h2><p>z-index用于改变层叠的顺序，数字大的先显示（稍后运行，显示在最外层）</p><h3 id="主要代码-2"><a href="#主要代码-2" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">z-index</span>：<span class="number">1</span>;<span class="comment">/*数字可以是任意的，但是为了以后修改方便，最好将前期的基础index的值，设置的较大一些，以便于后期插入新的元素（例如10、100的整倍数）*/</span></span><br></pre></td></tr></table></figure><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">30</span>;<span class="comment">/*数字最大，所以最后运行在层叠样式的最外面*/</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/202204041706398.png" alt="image-20220404170654316"></p><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><h3 id="固定定位的作用"><a href="#固定定位的作用" class="headerlink" title="固定定位的作用"></a>固定定位的作用</h3><p>固定定位：现对于浏览器窗口进行定位（固定元素不会随，页面的翻滚而滚动）</p><h3 id="主要代码-3"><a href="#主要代码-3" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>:fixed;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Div标签与CSS浮动</title>
      <link href="/2022/04/05/Div%E6%A0%87%E7%AD%BE%E4%B8%8ECSS%E6%B5%AE%E5%8A%A8/"/>
      <url>/2022/04/05/Div%E6%A0%87%E7%AD%BE%E4%B8%8ECSS%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Div简介"><a href="#Div简介" class="headerlink" title="Div简介"></a>Div简介</h2><ul><li>Div是层叠样式表中的定位技术，全称DIVision</li><li>有时把div称为2图层，更多的时候称为块</li></ul><span id="more"></span><h2 id="Div样式设置"><a href="#Div样式设置" class="headerlink" title="Div样式设置"></a>Div样式设置</h2><ul><li>div大小</li><li>div溢出效果演示、换行、滚动条显示</li><li>div边框、轮廓设置</li><li>盒子模型</li></ul><h2 id="Div设置大小，位置，背景"><a href="#Div设置大小，位置，背景" class="headerlink" title="Div设置大小，位置，背景"></a>Div设置大小，位置，背景</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;<span class="comment">/*定义绝对位置，方便下面top和left定位，不然会失效*/</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Div溢出处理效果"><a href="#Div溢出处理效果" class="headerlink" title="Div溢出处理效果"></a>Div溢出处理效果</h2><ul><li>超出div宽度的文字或图片进行隐藏处理</li><li>超出div宽度高度的文字或图片增加滚动条</li></ul><h3 id="overflow属性设置"><a href="#overflow属性设置" class="headerlink" title="overflow属性设置"></a>overflow属性设置</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/image-20220401215821569.png" alt="image-20220401215821569"></p><hr><h2 id="CSS轮廓"><a href="#CSS轮廓" class="headerlink" title="CSS轮廓"></a>CSS轮廓</h2><h3 id="CSS轮廓的属性值和作用"><a href="#CSS轮廓的属性值和作用" class="headerlink" title="CSS轮廓的属性值和作用"></a>CSS轮廓的属性值和作用</h3><ul><li>属性值：outline</li><li>作用：<strong>绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用</strong></li></ul><h3 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h3><ul><li>轮廓的其他属性还有：dotted（点状轮廓），solid（实线），double（双线）</li></ul><h3 id="CSS轮廓属性的调用举例"><a href="#CSS轮廓属性的调用举例" class="headerlink" title="CSS轮廓属性的调用举例"></a>CSS轮廓属性的调用举例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">outline</span>: dashed;<span class="comment">/*虚线轮廓*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义html结构--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;test.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        B站早期是一个ACG(动画、漫画、游戏）内容创作与分享的视频网站。 [5-6]  经过十年多的发展,围绕用户、创作者和内容,构建了一个源源不断产生优质内容的生态系统,B站已经涵盖7000多个兴趣圈层的多元文化社区,曾获得QuestMobile研究院评选的“Z世代偏爱APP”和“Z世代偏爱泛娱乐APP”两项榜单第一名并入选“BrandZ”报告2019最具价值中国品牌100强</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CSS边框"><a href="#CSS边框" class="headerlink" title="CSS边框"></a>CSS边框</h2><h3 id="CSS边框的属性"><a href="#CSS边框的属性" class="headerlink" title="CSS边框的属性"></a>CSS边框的属性</h3><ul><li>border-left</li><li>border-right</li><li>border-top</li><li>border-bottom</li></ul><h3 id="CSS边框的作用"><a href="#CSS边框的作用" class="headerlink" title="CSS边框的作用"></a>CSS边框的作用</h3><ul><li>设置div边框的边线宽度、颜色、虚线、实线等样式css属性</li></ul><h3 id="举例border-bottom：solid；-x2F-x2F-设置下边框为实线"><a href="#举例border-bottom：solid；-x2F-x2F-设置下边框为实线" class="headerlink" title="举例border-bottom：solid；&#x2F;&#x2F;设置下边框为实线"></a>举例border-bottom：solid；&#x2F;&#x2F;设置下边框为实线</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">outline</span>: dotted;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid;<span class="comment">/*设置下边框为实线*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;test.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        B站早期是一个ACG(动画、漫画、游戏）内容创作与分享的视频网站。 [5-6]  经过十年多的发展,围绕用户、创作者和内容,构建了一个源源不断产生优质内容的生态系统,B站已经涵盖7000多个兴趣圈层的多元文化社区,曾获得QuestMobile研究院评选的“Z世代偏爱APP”和“Z世代偏爱泛娱乐APP”两项榜单第一名并入选“BrandZ”报告2019最具价值中国品牌100强</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/image-20220402192347557.png" alt="image-20220402192347557"></p><h3 id="小贴士-1"><a href="#小贴士-1" class="headerlink" title="小贴士"></a>小贴士</h3><ul><li>border还有其他的属性：none（无边框），double（双线边框）等</li></ul><hr><h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><h3 id="CSS盒子模型简介"><a href="#CSS盒子模型简介" class="headerlink" title="CSS盒子模型简介"></a>CSS盒子模型简介</h3><ul><li>在HTML中，所有的标签都可以设置宽度&#x2F;高度、内边距、边框、外边距，HTML中所有的标签都是盒子</li></ul><h3 id="CSS盒子模型的范围"><a href="#CSS盒子模型的范围" class="headerlink" title="CSS盒子模型的范围"></a>CSS盒子模型的范围</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/image-20220402194808930.png" alt="image-20220402194808930"></p><p>宽度&#x2F;高度（蓝色）：content 指定可以存放的位置</p><p>内边距（绿色）：padding</p><p>边框（黄色）：border</p><p>外边距（橘色）：margin</p><h3 id="盒子模型的宽度和高度"><a href="#盒子模型的宽度和高度" class="headerlink" title="盒子模型的宽度和高度"></a>盒子模型的宽度和高度</h3><h4 id="1-内容的宽度和高度"><a href="#1-内容的宽度和高度" class="headerlink" title="1.内容的宽度和高度"></a>1.内容的宽度和高度</h4><p>​内容的宽度和高度就是通过标签的width&#x2F;height属性设置的宽度和高度</p><h4 id="2-元素的宽度和高度"><a href="#2-元素的宽度和高度" class="headerlink" title="2.元素的宽度和高度"></a>2.元素的宽度和高度</h4><p>​宽度&#x3D;左边框+左内边框+内容的宽度+右内边框+右边宽</p><p>​高度&#x3D;上边框+上内边框+内容的高度+下内边框+下边宽</p><h4 id="3-元素的空间的宽度和高度"><a href="#3-元素的空间的宽度和高度" class="headerlink" title="3.元素的空间的宽度和高度"></a>3.元素的空间的宽度和高度</h4><p>​宽度&#x3D;左外边距+左边框+左内边框+内容的宽度+右内边距+右边框+右外边距</p><p>​高度&#x3D;上外边距离+上边框+上内边距+内容的高度+下内边框+下边宽+下外边距</p><h3 id="盒子box-sizing属性"><a href="#盒子box-sizing属性" class="headerlink" title="盒子box-sizing属性"></a>盒子box-sizing属性</h3><ul><li>CSS3新增加了一个box-sizing属性，这个属性可以保证我们盒子新增padding和border属性之后，盒子的宽度和高度是不变的</li><li>新增padding和border属性之后，要想保证盒子元素的宽度不变，那么就必须减去一部分内容的宽度和高度</li></ul><hr><h2 id="CSS元素居中"><a href="#CSS元素居中" class="headerlink" title="CSS元素居中"></a>CSS元素居中</h2><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><ul><li>将文字居中：就是让自己的容器中的~元素居中，<strong>常用于文本或图片等内联元素</strong></li><li>将对象居中：就是让容器中的~自己居中，<strong>常作用于块元素，且需要配合宽度的使用</strong></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li>设置文字居中</li><li>设置块状居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;    <span class="comment">/*表示文字垂直水平居中*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;      <span class="comment">/*设置块状水平居中，20px是距离上边框的距离*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/image-20220403130959027.png" alt="image-20220403130959027"></p><hr><h2 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>可以使对象与对象的排列方式发生改变，以达到页面布局的效果</li></ul><h3 id="CSS浮动的术语"><a href="#CSS浮动的术语" class="headerlink" title="CSS浮动的术语"></a>CSS浮动的术语</h3><ul><li>行级元素：行内元素与其他元素都会在一条水平线上排列，都是在同一行</li><li>行级相关元素：a标签，label，img，span等</li><li>块级元素：在默认情况下，会独占一行</li><li>块级相关元素：div，h标签，li，table等</li></ul><h3 id="CSS定位机制"><a href="#CSS定位机制" class="headerlink" title="CSS定位机制"></a>CSS定位机制</h3><h4 id="定位机制"><a href="#定位机制" class="headerlink" title="定位机制"></a>定位机制</h4><ul><li>首先定位机制主要针对的是块级元素</li><li>(标准)文档流（从上到下依次排列，中间没有改变任何布局和位置）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/XFY-Z/img/main/image-20220403134424721.png" alt="image-20220403134424721"></p><ul><li>脱标流：(脱离标准文档流)有两种，分别是float，position:absolute)，被称为浮动，也被称为position的实现效果（让块级元素实现从左到右，从上往下）比如让内容4脱离文档流，出现在内容2的后面</li></ul><h3 id="CSS浮动：float属性"><a href="#CSS浮动：float属性" class="headerlink" title="CSS浮动：float属性"></a>CSS浮动：float属性</h3><h4 id="float属性设置"><a href="#float属性设置" class="headerlink" title="float属性设置"></a>float属性设置</h4><ul><li>left-元素向左浮动</li><li>right-元素向右浮动</li><li>none-默认值。元素不浮动</li></ul><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p><strong>给谁添加float，就将谁脱标，后面的内容会顶上来显示</strong>。</p><p>如果顶上去以后，托标的内容没有改变位置，就会出现后者被前者（脱标内容）覆盖的情况。</p><p>如果没有改变位置，就会出现该在的地方</p><h3 id="float的崩溃"><a href="#float的崩溃" class="headerlink" title="float的崩溃"></a>float的崩溃</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>当父元素没有设置高度的情况下，将子元素设置为浮动（float）父一级的块级元素高度发生破坏（又称为破坏，崩塌）</li><li>核心的内容为，<strong>浮动的子元素不能撑起非浮动的父元素</strong></li><li><strong>也就是说浮动的子元素并不能撑起父元素的高度，必须是标准流的子元素（非浮动的）才能撑起父元素的高度</strong></li><li>子类中元素的高度和宽度会撑起父级元素的高度和宽度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div2</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;<span class="comment">/*不会撑起父类块级元素中的高度 */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div3</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;<span class="comment">/*不会撑起父类块级元素中的高度 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="float的包裹性"><a href="#float的包裹性" class="headerlink" title="float的包裹性"></a>float的包裹性</h3><h4 id="包裹性"><a href="#包裹性" class="headerlink" title="包裹性"></a>包裹性</h4><ul><li><strong>当div设置浮动后，宽度会自适应其内容的宽度</strong></li><li>块级元素默认宽度就是父级元素的宽度，<strong>div设置浮动产生包裹特性</strong></li><li>如果块级元素为父元素，行级元素为子元素，当块级元素设置float时，产生包裹特性，会多出（基准线）</li></ul><h4 id="解决float包裹性产生的基准线"><a href="#解决float包裹性产生的基准线" class="headerlink" title="解决float包裹性产生的基准线"></a>解决float包裹性产生的基准线</h4><ol><li>将img转换为块级元素vertical-align：bottom</li><li>垂直对齐方式：底部对齐；行级元素转块级元素</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;<span class="comment">/*将行级元素更改为块级元素*/</span></span><br><span class="line">    &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;image/<span class="number">3</span><span class="selector-class">.jpg</span>&quot;/&gt;</span><br><span class="line">   &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><p>3.使用float进行图文混排</p><p>float的设计初衷 –&gt; 实现图文混排（环绕方式），文字和矩形位置，能够进行环绕排列</p><p>随着技术进入 –&gt;例如用于商品列表并排表示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/*img和div为平级关系*/</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: bottom;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: justify;<span class="comment">/*设置两端对齐*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">20px</span>;<span class="comment">/*设置行高*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/3.jpg&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   包裹性：当div设置浮动后 宽度会自适应其内容的宽度。</span><br><span class="line">块级元素默认宽度就是父级元素的宽度，div设置为float 产生包裹特性</span><br><span class="line">行级元素都会出现块级元素包裹多出（基准线）</span><br><span class="line">解决：</span><br><span class="line">1）将img转换为块级元素 vertical-align:botom</span><br><span class="line">2）垂直对齐方式：底部对齐；行级元素转块级元素  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*块级元素和行级元素为父子关系*/</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: bottom;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: justify;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/3.jpg&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   包裹性：当div设置浮动后 宽度会自适应其内容的宽度。</span><br><span class="line">块级元素默认宽度就是父级元素的宽度，div设置为float 产生包裹特性</span><br><span class="line">行级元素都会出现块级元素包裹多出（基准线）</span><br><span class="line">解决：</span><br><span class="line">1）将img转换为块级元素 vertical-align:botom</span><br><span class="line">2）垂直对齐方式：底部对齐；行级元素转块级元素  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CSS的float清除浮动"><a href="#CSS的float清除浮动" class="headerlink" title="CSS的float清除浮动"></a>CSS的float清除浮动</h2><h3 id="为什么需要清除浮动"><a href="#为什么需要清除浮动" class="headerlink" title="为什么需要清除浮动"></a>为什么需要清除浮动</h3><ul><li>为了父元素不会出现”高度崩塌”</li><li>如果强制规定了外层容器的尺寸，则显得就不那么灵活，高度就不能自动适应了（以后的数据，大多都是从后台获取的，这样的内容多少和版本就会不一致）</li><li><strong>从某个元素开始我们不再需要浮动效果了</strong></li></ul><h3 id="清除float浮动的方法"><a href="#清除float浮动的方法" class="headerlink" title="清除float浮动的方法"></a>清除float浮动的方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>清除浮动代码 -&gt; clear:both（right and left）； - &gt; 表示清除元素之前的浮动，如果本元素之后还有浮动，是不受这段清除代码的影响的</p><p>clear: left -&gt;清除左浮动</p><p>clear:right -&gt;清除右浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div4</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">240px</span>; </span><br><span class="line">    <span class="attribute">clear</span>: both;<span class="comment">/*清除浮动float，说明从div4的时候就不再浮动了*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>额外添加一个清除浮动的div，防止清除div的代码</p><p>#clearDiv{clear：both}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#clearDiv</span>&#123;<span class="comment">/*在div3和div4中间设置clear: both来达到div4清除浮动的效果*/</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;test.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;clearDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--设置一个块级元素来设置css样式做清除浮动的操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>目前一些大型网站流行的方法，当网站内容很多的时候，可以防止出现一个意料之外的问题</p><p>方法二的升级，防止其他的误操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#clearDiv</span>&#123;<span class="comment">/*被下面的伪元素选择器，不在浏览器中显示*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#clearDiv</span><span class="selector-pseudo">::after</span>&#123;<span class="comment">/*在clearDiv内容之后插入新的元素*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;<span class="comment">/*在clearDiv中间设置内容，但是不在浏览器中显示*/</span></span><br><span class="line">    <span class="attribute">visibility</span>: hidden;<span class="comment">/*将内容进行隐藏，防止误操作*/</span>    </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;<span class="comment">/*将行高设置为空*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;<span class="comment">/*块状显示，将content转换为跨级元素*/</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多态</title>
      <link href="/2022/04/01/Java%E5%A4%9A%E6%80%81/"/>
      <url>/2022/04/01/Java%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态的概念"><a href="#多态的概念" class="headerlink" title="多态的概念"></a>多态的概念</h2><ul><li>多态性，是面向对象中最重要的概念，在java中的体现，对象的多态性：父类的引用指向子类的对象（向上转型），是可以直接应用抽象类和接口中上</li><li>Java引用变量有两个类型：编译时类型和运行时类型。编译时类型声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。简称：编译时，看左边；运行时，看右边</li></ul><span id="more"></span><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><ul><li>子类可看作是特殊的父类，所以父类类型的引用可以指向子类的对象：向上转型</li><li>子类到父类的转换通常称作向上转型，通俗来说就是：定义父类对象指向子类对象（多态）（创建对象）（编译看左），然后实例（小类转型为大类）</li><li><strong>（既可以用父类派生的方法，也可以用子类重写的方法，但是不能使用子类特有的属性和方法）</strong></li><li>注意：父类中的静态方法无法被子类重写，所以向上转型之后，只能调用父类原有的静态方法，如果一定要使用子类中的静态方法，只能使用向下转型的方法调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();<span class="comment">//普通的创建对象 animal</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();<span class="comment">//1</span></span><br><span class="line">        <span class="comment">//向上转型，隐式转型，自动转型</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">two</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//2父类对象two，指向Cat方法，然后调用Cat中的方法</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">three</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">        one.eat();</span><br><span class="line">        two.eat();</span><br><span class="line">        three.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><ul><li>父类到子类的转换通常被称为向下转型，将子类对象指向父类对象（创建对象）注意：必须进行强制类型转换</li><li>转型时转的类型必须是父类对象所指的真实子类对象(向上转型创建的对象)，不是任意的强制类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();<span class="comment">//1</span></span><br><span class="line">        <span class="comment">//向上转型，这里的one，two，three都是父类对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">two</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//2</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">three</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 向下转型、强制类型转换</span></span><br><span class="line"><span class="comment">         *将子类的引用指向父类，此处必须进行强转，可以调用子类特有的方法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">temp</span> <span class="operator">=</span> (Cat)two;</span><br><span class="line">        temp.run();</span><br><span class="line">        temp.eat();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">temp2</span> <span class="operator">=</span> (Dog) two;<span class="comment">//报错，two指向的是Cat子类</span></span><br><span class="line">        temp2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Instanceof运算符"><a href="#Instanceof运算符" class="headerlink" title="Instanceof运算符"></a>Instanceof运算符</h3><p>简介：</p><ul><li>instanceof是java中二元运算符，左边是对象，右边是类；</li><li><strong>当对象是右边类或子类所创建对象时</strong>，返回true；否则，返回false</li><li>instanceof左边显示声明的类型与右边操作元必须是<strong>同种类或存在继承关系</strong>，也就是说需要位于同一个继承树，否则会编译失败</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();<span class="comment">//1</span></span><br><span class="line">        <span class="comment">//向上转型，隐式转型，自动转型</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">two</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//2Cat类创建的对象two，转换为特殊的父类</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">three</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (two <span class="keyword">instanceof</span>  Cat)&#123;<span class="comment">//条件为真，返回值为true执行if语句</span></span><br><span class="line">            <span class="type">Cat</span> <span class="variable">temp</span> <span class="operator">=</span> (Cat)two;</span><br><span class="line">            temp.run();</span><br><span class="line">            temp.eat();</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">temp2</span> <span class="operator">=</span> (Dog) three;</span><br><span class="line">            temp2.eat();</span><br><span class="line">            System.out.println(<span class="string">&quot;two可以转换为Cat类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>(two <span class="keyword">instanceof</span> Animal)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span> (two <span class="keyword">instanceof</span>  Object)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Object&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全部都是true，都是可以执行的</span></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>Java中使用抽象类，限制实例化</li><li>抽象类：不允许实例化，可以通过向上转型，指向子类实例，完成对象实例</li><li><strong>抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，</strong>并提供方法体。如果没有重写全部的抽象方法，仍然为抽象类</li><li>应用场景：某个父类只知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法</li></ul><h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><ul><li><strong>必须定义抽象类，抽象方法是不允许包含方法体；在子类中必须重写抽象方法，并提供方法体，否则子类也为抽象类</strong>（开摆）</li><li>abstract定义抽象方法，不需要具体实现</li><li>包含抽象方法的类一定是抽象类，但是抽象类中不一定有抽象方法</li><li><strong>当抽象方法被定义的时候，子类一定要重写方法</strong>，不然的话就定义该子类为抽象类</li><li>抽象方法是不可以与static，final，private并存</li></ul><h2 id="接口API"><a href="#接口API" class="headerlink" title="接口API"></a>接口API</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><ul><li>有时必须从几个类中派生出一个子类，继承他们所有的属性和方法，但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果</li><li>接口的本质是契约，标准，规范，就像我们的法律一样。指定好后大家都要遵守</li></ul><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li>接口定义了某一批类所需要遵守的规范</li><li>接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，他只规定这些类里必须提供某些方法</li></ul><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>接口就是抽象方法和常量值定义的集合</strong></li><li>用interface来定义</li><li>接口中的所有成员变量都默认是由public static final修饰的</li><li>接口中所有抽象方法都是默认是由public abstract修饰的</li><li>接口中是没有构造方法</li><li><strong>接口中采用多继承机制</strong></li><li><strong>其他类调用接口的时候必须重写接口中的所写方法</strong>，因为接口是抽象方法与常量值的集合</li><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">package</span> com.java.tel;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口访问修饰符：public 默认</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">INet</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *接口当中抽象方法可以不写abstract关键字,访问修饰符默认public</span></span><br><span class="line"><span class="comment">    * 当类实现接口时，需要去实现接口中所有的抽象方法，否则需要将该类设置为抽象类</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">network</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">connection</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">//接口中可以包含常量，默认public static final</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> TEP=<span class="number">20</span>;<span class="comment">//常量是不可以改变的，子类调用常量时是不可改变的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类调用接口</span></span><br><span class="line"><span class="keyword">package</span> com.java.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">implements</span> <span class="title class_">INet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> TEP=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能手表可以打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">network</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能手表可以打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connection</span><span class="params">()</span>&#123;<span class="comment">//重写INet中的connection方法，这里是调用了IPhoto中的默认方法connection</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是重写后的connection方法&quot;</span>);</span><br><span class="line">        INet.<span class="built_in">super</span>.connection();<span class="comment">//调用接口中的默认方法，这样就不用重写默认方法中的方法体</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="type">INet</span> <span class="variable">net</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Smartphone</span>();<span class="comment">//声明接口对象net，实例化对象，也就是创建并引用接口对象</span></span><br><span class="line">System.out.println(INet.TEP);<span class="comment">//接口名调用常量</span></span><br><span class="line"><span class="type">INet</span> <span class="variable">net</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartPhone</span>();</span><br><span class="line">System.out.println(net.TEP);<span class="comment">//创建接口实例化对象，调用常量</span></span><br></pre></td></tr></table></figure><h3 id="接口中的默认方法"><a href="#接口中的默认方法" class="headerlink" title="接口中的默认方法"></a>接口中的默认方法</h3><h3 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h3><ul><li>默认方法，当其他类调用接口的时候，可以依据要求是否要重写此方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口中的默认方法</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">connection</span> <span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口中的默认连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//default：默认方法，结构中是可以带有方法体，既然不是抽象方法，后面的类可以不重写此方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类中调用接口中的默认方法</span></span><br><span class="line"><span class="type">INet</span> <span class="variable">net</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartPhone</span>();<span class="comment">//声明接口对象net，实例化对象</span></span><br><span class="line">net.connection();<span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口中的静态方法"><a href="#接口中的静态方法" class="headerlink" title="接口中的静态方法"></a>接口中的静态方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口中的静态方法</span></span><br><span class="line"><span class="comment">//接口中的静态方法也是可以带有方法体的</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口中的静态方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类中调用接口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connection</span><span class="params">()</span>&#123;<span class="comment">//重写INet中的connection方法，这里是调用了IPhoto中的默认方法connection，可以不重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是重写后的connection方法&quot;</span>);</span><br><span class="line">        INet.<span class="built_in">super</span>.connection();<span class="comment">//调用接口中的默认方法，这样就不用重写默认方法中的方法体</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类中调用静态方法</span></span><br><span class="line">INet.stop();<span class="comment">//接口名.静态方法，调用接口中的静态方法</span></span><br></pre></td></tr></table></figure><h3 id="类调用多接口"><a href="#类调用多接口" class="headerlink" title="类调用多接口"></a>类调用多接口</h3><p><strong>用法：,后面跟着多个接口名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FourPhone</span> <span class="keyword">extends</span> <span class="title class_">ThreePhone</span> <span class="keyword">implements</span> <span class="title class_">IPhoto</span>,INet&#123;&#125;</span><br><span class="line"><span class="comment">//子类 extends 父类 implements 接口，接口</span></span><br></pre></td></tr></table></figure><h5 id="关于多接口中重名默认方法处理的解决方案："><a href="#关于多接口中重名默认方法处理的解决方案：" class="headerlink" title="关于多接口中重名默认方法处理的解决方案："></a>关于多接口中重名默认方法处理的解决方案：</h5><ul><li>当类中调用两个接口时，两个接口中有同名的方法，这时只有重写此方法才能解决报错</li><li>子类 extends 父类 implements 接口,接口;当父类与接口中有同名方法时，会默认使用父类中的同名方法</li><li>如果父类，与接口中有同名的常量或变量的话，那依然还是无法识别的，只有在子类中定义的同名常量，才不会报错</li></ul><h3 id="接口中的继承"><a href="#接口中的继承" class="headerlink" title="接口中的继承"></a>接口中的继承</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><ul><li>接口也可以实现继承，并且可以继承多个父接口，测试类调用接口的时候也需要依据要求重写接口中的方法</li><li>如果继承多个父接口中有同名方法，在子类中重写方法解决报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISon</span> <span class="keyword">extends</span> <span class="title class_">IFather</span>,IFather2&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
